<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/auth/EmailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/auth/EmailScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.auth&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.viewmodel.AuthViewModel&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.ui.platform.LocalLifecycleOwner&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.compose.ui.focus.onFocusChanged&#10;import androidx.compose.ui.platform.LocalFocusManager&#10;                    unfocusedLabelColor = if (isSignupFailed &amp;&amp; !isPasswordFocused) Color.Red else Color.Black&#10;            }&#10;            Button(&#10;                        }&#10;                    }&#10;                    CircularProgressIndicator(modifier = Modifier.size(24.dp), color = Color.Black)&#10;                } else {&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.auth&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.viewmodel.AuthViewModel&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.ui.platform.LocalLifecycleOwner&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.compose.ui.focus.onFocusChanged&#10;import androidx.compose.ui.platform.LocalFocusManager&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;&#10;@Composable&#10;fun EmailScreen(navController: NavController) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    val isEmailValid = android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    val authViewModel: AuthViewModel = hiltViewModel()&#10;    val coroutineScope = rememberCoroutineScope()&#10;    val lifecycleOwner = LocalLifecycleOwner.current&#10;    val focusManager = LocalFocusManager.current&#10;    var isEmailFocused by remember { mutableStateOf(false) }&#10;    var isPasswordFocused by remember { mutableStateOf(false) }&#10;    val isSignupFailed = errorMessage != null &amp;&amp; errorMessage != &quot;Verification email sent. Please check your inbox.&quot;&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;    ) {&#10;        IconButton(&#10;            onClick = { navController.popBackStack() },&#10;            modifier = Modifier&#10;                .align(Alignment.TopStart)&#10;                .padding(top = 16.dp, start = 8.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                contentDescription = &quot;Back&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .align(Alignment.Center)&#10;                .padding(horizontal = 32.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Sign Up&quot;,&#10;                fontSize = 28.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.Black,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;            OutlinedTextField(&#10;                value = email,&#10;                onValueChange = {&#10;                    email = it&#10;                    errorMessage = null // Clear error on edit&#10;                },&#10;                label = { Text(&quot;Email&quot;) },&#10;                singleLine = true,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .onFocusChanged { focusState -&gt;&#10;                        isEmailFocused = focusState.isFocused&#10;                    },&#10;                shape = RoundedCornerShape(12.dp),&#10;                colors = OutlinedTextFieldDefaults.colors(&#10;                    focusedBorderColor = AppColors.Text_Pink,&#10;                    focusedLabelColor = AppColors.Text_Pink,&#10;                    unfocusedBorderColor = if (isSignupFailed &amp;&amp; !isEmailFocused) Color.Red else Color.LightGray,&#10;                    unfocusedLabelColor = if (isSignupFailed &amp;&amp; !isEmailFocused) Color.Red else Color.Black&#10;                ),&#10;                keyboardOptions = KeyboardOptions(&#10;                    keyboardType = KeyboardType.Email&#10;                )&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            OutlinedTextField(&#10;                value = password,&#10;                onValueChange = {&#10;                    password = it&#10;                    errorMessage = null // Clear error on edit&#10;                },&#10;                label = { Text(&quot;Password&quot;) },&#10;                singleLine = true,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .onFocusChanged { focusState -&gt;&#10;                        isPasswordFocused = focusState.isFocused&#10;                    },&#10;                shape = RoundedCornerShape(12.dp),&#10;                colors = OutlinedTextFieldDefaults.colors(&#10;                    focusedBorderColor = AppColors.Text_Pink,&#10;                    focusedLabelColor = AppColors.Text_Pink,&#10;                    unfocusedBorderColor = if (isSignupFailed &amp;&amp; !isPasswordFocused) Color.Red else Color.LightGray,&#10;                    unfocusedLabelColor = if (isSignupFailed &amp;&amp; !isPasswordFocused) Color.Red else Color.Black&#10;                ),&#10;                visualTransformation = PasswordVisualTransformation(),&#10;                keyboardOptions = KeyboardOptions(&#10;                    keyboardType = KeyboardType.Password&#10;                )&#10;            )&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;            var startVerificationCheck by remember { mutableStateOf(false) }&#10;            if (startVerificationCheck) {&#10;                // Navigate to VerifyEmailScreen&#10;                navController.navigate(&quot;verify_email&quot;)&#10;                startVerificationCheck = false&#10;            }&#10;            Button(&#10;                onClick = {&#10;                    isLoading = true&#10;                    errorMessage = null&#10;                    focusManager.clearFocus()&#10;                    coroutineScope.launch {&#10;                        val signupResult = authViewModel.signupUserWithEmailVerification(email, password)&#10;                        isLoading = false&#10;                        if (signupResult == null) {&#10;                            errorMessage = &quot;Verification email sent. Please check your inbox.&quot;&#10;                            startVerificationCheck = true&#10;                        } else {&#10;                            errorMessage = signupResult&#10;                        }&#10;                    }&#10;                },&#10;                enabled = isEmailValid &amp;&amp; password.isNotBlank() &amp;&amp; !isLoading,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                shape = RoundedCornerShape(16.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = Color(0xFFFFF1FC),&#10;                    contentColor = Color.Black&#10;                )&#10;            ) {&#10;                if (isLoading) {&#10;                    CircularProgressIndicator(modifier = Modifier.size(24.dp), color = Color.Black)&#10;                } else {&#10;                    Text(&quot;Continue&quot;)&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            errorMessage?.let {&#10;                Text(&#10;                    text = it,&#10;                    color = if (it.contains(&quot;success&quot;, true)) Color(0xFF4CAF50) else Color.Red,&#10;                    modifier = Modifier.padding(top = 8.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/auth/LoginScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/auth/LoginScreen.kt" />
              <option name="originalContent" value="import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.text.font.FontWeight&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.*&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import com.example.dating.data.model.Resource&#10;import com.example.dating.ui.theme.AppColors&#10;import com.example.dating.viewmodel.AuthViewModel&#10;import com.example.dating.ui.theme.AppColors.Main_Secondary1&#10;import androidx.compose.ui.focus.onFocusChanged&#10;import androidx.compose.ui.platform.LocalFocusManager&#10;import androidx.compose.foundation.interaction.MutableInteractionSource&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun LoginScreen(viewModel: AuthViewModel?, navController: NavController) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    val authResource = viewModel?.loginFlow?.collectAsState()&#10;    val isLoginFailed = authResource?.value is Resource.Failure&#10;    var isEmailFocused by remember { mutableStateOf(false) }&#10;    var isPasswordFocused by remember { mutableStateOf(false) }&#10;                .padding(horizontal = 32.dp)&#10;                .align(Alignment.Center),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Login&quot;,&#10;                style = MaterialTheme.typography.headlineMedium.copy(fontWeight = FontWeight.Bold, fontSize = MaterialTheme.typography.headlineLarge.fontSize),&#10;                modifier = Modifier.align(Alignment.CenterHorizontally)&#10;            )&#10;&#10;            OutlinedTextField(&#10;                value = email,&#10;                onValueChange = { email = it },&#10;                label = { Text(&quot;Email&quot;) },&#10;                singleLine = true,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .onFocusChanged { focusState -&gt;&#10;                        isEmailFocused = focusState.isFocused&#10;                    },&#10;                shape = RoundedCornerShape(12.dp),&#10;                colors = OutlinedTextFieldDefaults.colors(&#10;                    focusedBorderColor =  AppColors.Text_Pink,&#10;                    focusedLabelColor =  AppColors.Text_Pink,&#10;                    unfocusedBorderColor = if (isLoginFailed &amp;&amp; !isEmailFocused) Color.Red else Color.LightGray,&#10;                    unfocusedLabelColor = if (isLoginFailed &amp;&amp; !isEmailFocused) Color.Red else Color.Black&#10;                ),&#10;                keyboardOptions = KeyboardOptions(&#10;                    capitalization = KeyboardCapitalization.None,&#10;                    autoCorrectEnabled = false,&#10;                    keyboardType = KeyboardType.Email,&#10;                    imeAction = ImeAction.Next&#10;                )&#10;            )&#10;&#10;            OutlinedTextField(&#10;                value = password,&#10;                onValueChange = { password = it },&#10;                label = { Text(&quot;Password&quot;) },&#10;                singleLine = true,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .onFocusChanged { focusState -&gt;&#10;                        isPasswordFocused = focusState.isFocused&#10;                    },&#10;                shape = RoundedCornerShape(12.dp),&#10;                colors = OutlinedTextFieldDefaults.colors(&#10;                    focusedBorderColor = AppColors.Text_Pink,&#10;                    focusedLabelColor = AppColors.Text_Pink,&#10;                    unfocusedBorderColor = if (isLoginFailed &amp;&amp; !isPasswordFocused) Color.Red else Color.LightGray,&#10;                    unfocusedLabelColor = if (isLoginFailed &amp;&amp; !isPasswordFocused) Color.Red else Color.Black&#10;                ),&#10;                visualTransformation = PasswordVisualTransformation(),&#10;                keyboardOptions = KeyboardOptions(&#10;                    capitalization = KeyboardCapitalization.None,&#10;                    autoCorrectEnabled = false,&#10;                    keyboardType = KeyboardType.Password,&#10;                    imeAction = ImeAction.Next&#10;                )&#10;            )&#10;&#10;            Button(&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                Box(&#10;            authResource?.value?.let {&#10;                Box(&#10;            authResource?.value?.let {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;            authResource?.value?.let {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;            authResource?.value?.let {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;            authResource?.value?.let {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;            authResource?.value?.let {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;            authResource?.value?.let {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;            authResource?.value?.let {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;            authResource?.value?.let {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .align(Alignment.CenterHorizontally)&#10;                ) {&#10;                    when (it) {&#10;                        is Resource.Failure -&gt; {&#10;                            // Clear focus on failure&#10;                            LaunchedEffect(Unit) {&#10;                                isEmailFocused = false&#10;                                isPasswordFocused = false&#10;                                focusManager.clearFocus()&#10;                            }&#10;                            Text(&#10;                                text = it.exception.message ?: &quot;Login failed&quot;,&#10;                                color = MaterialTheme.colorScheme.error,&#10;                                modifier = Modifier&#10;                                    .padding(top = 16.dp)&#10;                                    .align(Alignment.Center)&#10;                            )&#10;                        }&#10;                        is Resource.Loading -&gt; {&#10;                            CircularProgressIndicator(&#10;                                modifier = Modifier.align(Alignment.Center)&#10;                            )&#10;                        }&#10;                        is Resource.Success -&gt; {&#10;                            LaunchedEffect(Unit) {&#10;                                navController.navigate(&quot;profile_details&quot;) {&#10;                                    //popUpTo(&quot;login&quot;) { inclusive = false }&#10;" />
              <option name="updatedContent" value="import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.text.font.FontWeight&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.*&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import com.example.dating.data.model.Resource&#10;import com.example.dating.ui.theme.AppColors&#10;import com.example.dating.viewmodel.AuthViewModel&#10;import com.example.dating.ui.theme.AppColors.Main_Secondary1&#10;import androidx.compose.ui.focus.onFocusChanged&#10;import androidx.compose.ui.platform.LocalFocusManager&#10;import androidx.compose.foundation.interaction.MutableInteractionSource&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun LoginScreen(viewModel: AuthViewModel?, navController: NavController) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    val authResource = viewModel?.loginFlow?.collectAsState()&#10;    val isLoginFailed = authResource?.value is Resource.Failure&#10;    var isEmailFocused by remember { mutableStateOf(false) }&#10;    var isPasswordFocused by remember { mutableStateOf(false) }&#10;    var loginClicked by remember { mutableStateOf(false) }&#10;    val focusManager = LocalFocusManager.current&#10;&#10;&#10;    Box(modifier = Modifier&#10;        .fillMaxSize()&#10;        .clickable(&#10;            indication = null,&#10;            interactionSource = remember { MutableInteractionSource() }&#10;        ) {&#10;            focusManager.clearFocus()&#10;        }&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 32.dp)&#10;                .align(Alignment.Center),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Login&quot;,&#10;                style = MaterialTheme.typography.headlineMedium.copy(fontWeight = FontWeight.Bold, fontSize = MaterialTheme.typography.headlineLarge.fontSize),&#10;                modifier = Modifier.align(Alignment.CenterHorizontally)&#10;            )&#10;&#10;            OutlinedTextField(&#10;                value = email,&#10;                onValueChange = { email = it },&#10;                label = { Text(&quot;Email&quot;) },&#10;                singleLine = true,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .onFocusChanged { focusState -&gt;&#10;                        isEmailFocused = focusState.isFocused&#10;                    },&#10;                shape = RoundedCornerShape(12.dp),&#10;                colors = OutlinedTextFieldDefaults.colors(&#10;                    focusedBorderColor =  AppColors.Text_Pink,&#10;                    focusedLabelColor =  AppColors.Text_Pink,&#10;                    unfocusedBorderColor = if (isLoginFailed &amp;&amp; !isEmailFocused) Color.Red else Color.LightGray,&#10;                    unfocusedLabelColor = if (isLoginFailed &amp;&amp; !isEmailFocused) Color.Red else Color.Black&#10;                ),&#10;                keyboardOptions = KeyboardOptions(&#10;                    capitalization = KeyboardCapitalization.None,&#10;                    autoCorrectEnabled = false,&#10;                    keyboardType = KeyboardType.Email,&#10;                    imeAction = ImeAction.Next&#10;                )&#10;            )&#10;&#10;            OutlinedTextField(&#10;                value = password,&#10;                onValueChange = { password = it },&#10;                label = { Text(&quot;Password&quot;) },&#10;                singleLine = true,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .onFocusChanged { focusState -&gt;&#10;                        isPasswordFocused = focusState.isFocused&#10;                    },&#10;                shape = RoundedCornerShape(12.dp),&#10;                colors = OutlinedTextFieldDefaults.colors(&#10;                    focusedBorderColor = AppColors.Text_Pink,&#10;                    focusedLabelColor = AppColors.Text_Pink,&#10;                    unfocusedBorderColor = if (isLoginFailed &amp;&amp; !isPasswordFocused) Color.Red else Color.LightGray,&#10;                    unfocusedLabelColor = if (isLoginFailed &amp;&amp; !isPasswordFocused) Color.Red else Color.Black&#10;                ),&#10;                visualTransformation = PasswordVisualTransformation(),&#10;                keyboardOptions = KeyboardOptions(&#10;                    capitalization = KeyboardCapitalization.None,&#10;                    autoCorrectEnabled = false,&#10;                    keyboardType = KeyboardType.Password,&#10;                    imeAction = ImeAction.Next&#10;                )&#10;            )&#10;&#10;            Button(&#10;                onClick = {&#10;                    loginClicked = true&#10;                    viewModel?.loginUser(email, password)&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = Main_Secondary1,&#10;                    contentColor = Color.Black,&#10;                )&#10;            ) {&#10;                Text(&quot;Login&quot;, style = MaterialTheme.typography.titleMedium)&#10;            }&#10;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clickable {&#10;                        navController.navigate(&quot;register&quot;) {&#10;                            popUpTo(&quot;login&quot;) { inclusive = true }&#10;                        }&#10;                    },&#10;                horizontalArrangement = Arrangement.Center&#10;            ) {&#10;                Text(&#10;                    text = &quot;Don't have an account? &quot;,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;                Text(&#10;                    text = &quot;Sign up&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge.copy(fontWeight = FontWeight.Bold),&#10;                    color = AppColors.Text_Pink&#10;                )&#10;            }&#10;&#10;            if (loginClicked) {&#10;                authResource?.value?.let {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .align(Alignment.CenterHorizontally)&#10;                    ) {&#10;                        when (it) {&#10;                            is Resource.Failure -&gt; {&#10;                                // Clear focus on failure&#10;                                LaunchedEffect(Unit) {&#10;                                    isEmailFocused = false&#10;                                    isPasswordFocused = false&#10;                                    focusManager.clearFocus()&#10;                                    loginClicked = false&#10;                                }&#10;                                Text(&#10;                                    text = it.exception.message ?: &quot;Login failed&quot;,&#10;                                    color = MaterialTheme.colorScheme.error,&#10;                                    modifier = Modifier&#10;                                        .padding(top = 16.dp)&#10;                                        .align(Alignment.Center)&#10;                                )&#10;                            }&#10;                            is Resource.Loading -&gt; {&#10;                                CircularProgressIndicator(&#10;                                    modifier = Modifier.align(Alignment.Center)&#10;                                )&#10;                            }&#10;                            is Resource.Success -&gt; {&#10;                                LaunchedEffect(Unit) {&#10;                                    navController.navigate(&quot;profile_details&quot;) {&#10;                                        //popUpTo(&quot;login&quot;) { inclusive = false }&#10;                                    }&#10;                                    loginClicked = false&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.gestures.detectDragGestures&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateListOf&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.IntOffset&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.dating.R&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.animation.core.Animatable&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.runtime.Applier&#10;import kotlinx.coroutines.tasks.await&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.compose.ui.zIndex&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import java.util.Calendar&#10;import androidx.compose.runtime.MutableState&#10;&#10;@Composable&#10;fun HomeScreen(navController: NavController) {&#10;    val currentUserId = FirebaseAuth.getInstance().currentUser?.uid&#10;    val profiles = remember { mutableStateListOf&lt;Map&lt;String, Any&gt;&gt;() }&#10;    val isLoading = remember { mutableStateOf(true) }&#10;    val errorMessage = remember { mutableStateOf&lt;String?&gt;(null) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    LaunchedEffect(Unit) {&#10;        coroutineScope.launch {&#10;            try {&#10;                val snapshot = FirebaseFirestore.getInstance().collection(&quot;users&quot;).get().await()&#10;                val allProfiles = snapshot.documents.mapNotNull { doc -&gt;&#10;                    val data = doc.data&#10;                    if (doc.id != currentUserId &amp;&amp; data != null) data + (&quot;uid&quot; to doc.id) else null&#10;                }&#10;                Log.d(&quot;ProfileDebug&quot;, &quot;Loaded profiles: $allProfiles&quot;)&#10;                profiles.clear()&#10;                profiles.addAll(allProfiles)&#10;&#10;                isLoading.value = false&#10;            } catch (e: Exception) {&#10;                errorMessage.value = e.message&#10;                isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    // Use Box to overlay BottomNavigationBar and keep it fixed at the bottom&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        val profileIndex = remember { mutableStateOf(0) } // Add this line to define profileIndex state before using it&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(AppColors.MainBackground)&#10;        ) {&#10;            HomeHeader(navController)&#10;            if (isLoading.value) {&#10;                Box(modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(300.dp), contentAlignment = Alignment.Center) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else if (errorMessage.value != null) {&#10;                Box(modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(300.dp), contentAlignment = Alignment.Center) {&#10;                    Text(&quot;Error: ${errorMessage.value}&quot;, color = Color.Red)&#10;                }&#10;            } else {&#10;                ProfileCard(profiles, profileIndex = profileIndex)&#10;                ActionButtons(&#10;                    profiles = profiles,&#10;                    profileIndex = profileIndex,&#10;                    onLike = { /* handle like if needed */ },&#10;                    onDislike = { /* handle dislike if needed */ }&#10;                )&#10;            }&#10;        }&#10;        // Fixed BottomNavigationBar&#10;        Box(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .fillMaxWidth()&#10;        ) {&#10;            BottomNavigationBar(navController)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HomeHeader(navController: NavController) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(start = 48.dp, end = 48.dp, top = 40.dp, bottom = 30.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        IconButton(onClick = { navController.popBackStack() }) {&#10;            Icon(&#10;                imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                contentDescription = &quot;Back&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;&#10;        Text(&#10;            text = &quot;Discover&quot;,&#10;            color = Color.Black,&#10;            fontWeight = FontWeight.Bold,&#10;            fontSize = 24.sp&#10;        )&#10;&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileCard(&#10;    profiles: List&lt;Map&lt;String, Any&gt;&gt;,&#10;    profileIndex: MutableState&lt;Int&gt;,&#10;    onLike: (Map&lt;String, Any&gt;) -&gt; Unit = {},&#10;    onDislike: (Map&lt;String, Any&gt;) -&gt; Unit = {}&#10;) {&#10;    val currentProfile = profiles.getOrNull(profileIndex.value)&#10;&#10;    if (currentProfile == null) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(900.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Text(&quot;No profiles available&quot;, color = Color.Gray)&#10;        }&#10;        return&#10;    }&#10;&#10;    val firstName = currentProfile[&quot;firstName&quot;] as? String ?: &quot;&quot;&#10;    val lastName = currentProfile[&quot;lastName&quot;] as? String ?: &quot;&quot;&#10;    val name = (firstName + &quot; &quot; + lastName).trim().ifEmpty { &quot;Unknown&quot; }&#10;    val birthday = currentProfile[&quot;birthday&quot;] as? String&#10;    Log.d(&quot;YearBug&quot;, &quot;Year: $birthday&quot;)&#10;&#10;    val age = birthday?.let {&#10;        try {&#10;            // Expecting format dd/MM/yyyy&#10;            val year = it.split(&quot;/&quot;).getOrNull(2)?.toInt() ?: throw Exception(&quot;Invalid date&quot;)&#10;            Log.d(&quot;YearBug&quot;, &quot;Year: $year&quot;)&#10;            val currentYear = Calendar.getInstance().get(Calendar.YEAR)&#10;            (currentYear - year).toString()&#10;        } catch (e: Exception) {&#10;            &quot;?&quot;&#10;        }&#10;    } ?: &quot;?&quot;&#10;    val description = currentProfile[&quot;description&quot;] as? String ?: &quot;No description&quot;&#10;    val distance = currentProfile[&quot;distance&quot;]?.toString() ?: &quot;1 km&quot;&#10;&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(550.dp)&#10;            .padding(horizontal = 30.dp)&#10;            .pointerInput(profileIndex.value) {&#10;                detectDragGestures(&#10;                    onDragEnd = {&#10;                        scope.launch {&#10;                            when {&#10;                                offsetX.value &gt; 200f -&gt; {&#10;                                    // Swiped right (like)&#10;                                    onLike(currentProfile)&#10;                                    offsetX.snapTo(0f)&#10;                                    profileIndex.value ++&#10;&#10;                                }&#10;                                offsetX.value &lt; -200f -&gt; {&#10;                                    // Swiped left (dislike)&#10;                                    onDislike(currentProfile)&#10;                                    offsetX.snapTo(0f)&#10;                                    profileIndex.value ++&#10;&#10;                                }&#10;                                else -&gt; {&#10;                                    // Snap back&#10;                                    offsetX.animateTo(0f, tween(300))&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onDrag = { change, dragAmount -&gt;&#10;                        scope.launch {&#10;                            offsetX.snapTo(offsetX.value + dragAmount.x)&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;            .offset { IntOffset(offsetX.value.toInt(), 0) },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(550.dp)&#10;                .clip(RoundedCornerShape(32.dp))&#10;                .background(Color(0xFF23222B))&#10;                .zIndex(1f)&#10;        ) {&#10;            // Portrait Image (placeholder)&#10;            Image(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile Image&quot;,&#10;                contentScale = ContentScale.Crop,&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .clip(RoundedCornerShape(32.dp))&#10;            )&#10;            // Distance Label&#10;            Box(&#10;                modifier = Modifier&#10;                    .padding(16.dp)&#10;                    .align(Alignment.TopStart)&#10;                    .background(Color.White.copy(alpha = 0.85f), RoundedCornerShape(50))&#10;                    .padding(horizontal = 16.dp, vertical = 6.dp)&#10;            ) {&#10;                Text(distance, color = Color.Black, fontWeight = FontWeight.Bold, fontSize = 14.sp)&#10;            }&#10;            // Gradient Overlay&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(120.dp)&#10;                    .align(Alignment.BottomCenter)&#10;                    .background(&#10;                        Brush.verticalGradient(&#10;                            colors = listOf(Color.Transparent, Color.Black),&#10;                            startY = 0f,&#10;                            endY = 300f&#10;                        ),&#10;                        shape = RoundedCornerShape(bottomStart = 32.dp, bottomEnd = 32.dp)&#10;                    )&#10;            )&#10;            // Name, Age, Description&#10;            Column(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.Center,&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;$name, $age&quot;,&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 28.sp,&#10;                    maxLines = 1,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;                Text(&#10;                    text = description,&#10;                    color = Color(0xFFCCCCCC),&#10;                    fontSize = 16.sp,&#10;                    maxLines = 1,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionButtons(&#10;    profiles: List&lt;Map&lt;String, Any&gt;&gt;,&#10;    profileIndex: MutableState&lt;Int&gt;,&#10;    onLike: (Map&lt;String, Any&gt;) -&gt; Unit = {},&#10;    onDislike: (Map&lt;String, Any&gt;) -&gt; Unit = {}&#10;) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 24.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(25.dp, Alignment.CenterHorizontally),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        // Dislike Button&#10;        ActionButton(&#10;            icon = Icons.Default.Close,&#10;            background = Color.White,&#10;            iconTint = Color.Black,&#10;            size = 75.dp,&#10;            shadow = 8.dp&#10;        ) {&#10;            val currentProfile = profiles.getOrNull(profileIndex.value)&#10;            if (currentProfile != null) {&#10;                onDislike(currentProfile)&#10;                    profileIndex.value++&#10;            }&#10;        }&#10;        // Like Button&#10;        ActionButton(&#10;            icon = Icons.Default.Favorite,&#10;            background = AppColors.Text_Pink,&#10;            iconTint = Color.White,&#10;            size = 95.dp,&#10;            shadow = 12.dp&#10;        ) {&#10;            val currentProfile = profiles.getOrNull(profileIndex.value)&#10;            if (currentProfile != null) {&#10;                onLike(currentProfile)&#10;                    profileIndex.value++&#10;            }&#10;        }&#10;        // Super Like Button&#10;        ActionButton(&#10;            icon = Icons.Default.Star,&#10;            background = Color(0xFF4A154B),&#10;            iconTint = Color.White,&#10;            size = 75.dp,&#10;            shadow = 8.dp&#10;        ) {}&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionButton(&#10;    icon: ImageVector,&#10;    background: Color,&#10;    iconTint: Color,&#10;    size: Dp,&#10;    shadow: Dp,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .size(size)&#10;            .shadow(shadow, CircleShape)&#10;            .clip(CircleShape)&#10;            .background(background)&#10;            .clickable { onClick() },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = iconTint,&#10;            modifier = Modifier.size(size * 0.5f)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BottomNavIcon(&#10;    icon: ImageVector,&#10;    isActive: Boolean,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    IconButton(onClick = onClick) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = if (isActive) AppColors.Text_Pink else Color(0xFFBDBDBD),&#10;            modifier = Modifier.size(32.dp)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BottomNavigationBar(navController: NavController) {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(103.dp)&#10;            .background(Color.White.copy(alpha = 1.0f)),&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 32.dp, vertical = 20.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            BottomNavIcon(&#10;                icon = Icons.Default.ViewModule,&#10;                isActive = true&#10;            ) { /* TODO: Handle navigation */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Favorite,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Chat,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Person,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.gestures.detectDragGestures&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateListOf&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.IntOffset&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.dating.R&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.animation.core.Animatable&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.runtime.Applier&#10;import kotlinx.coroutines.tasks.await&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.compose.ui.zIndex&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import java.util.Calendar&#10;import androidx.compose.runtime.MutableState&#10;&#10;@Composable&#10;fun HomeScreen(navController: NavController) {&#10;    val currentUserId = FirebaseAuth.getInstance().currentUser?.uid&#10;    val profiles = remember { mutableStateListOf&lt;Map&lt;String, Any&gt;&gt;() }&#10;    val isLoading = remember { mutableStateOf(true) }&#10;    val errorMessage = remember { mutableStateOf&lt;String?&gt;(null) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    LaunchedEffect(Unit) {&#10;        coroutineScope.launch {&#10;            try {&#10;                val snapshot = FirebaseFirestore.getInstance().collection(&quot;users&quot;).get().await()&#10;                val allProfiles = snapshot.documents.mapNotNull { doc -&gt;&#10;                    val data = doc.data&#10;                    if (doc.id != currentUserId &amp;&amp; data != null) data + (&quot;uid&quot; to doc.id) else null&#10;                }&#10;                Log.d(&quot;ProfileDebug&quot;, &quot;Loaded profiles: $allProfiles&quot;)&#10;                profiles.clear()&#10;                profiles.addAll(allProfiles)&#10;&#10;                isLoading.value = false&#10;            } catch (e: Exception) {&#10;                errorMessage.value = e.message&#10;                isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    // Use Box to overlay BottomNavigationBar and keep it fixed at the bottom&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        val profileIndex = remember { mutableStateOf(0) } // Add this line to define profileIndex state before using it&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(AppColors.MainBackground)&#10;        ) {&#10;            HomeHeader(navController)&#10;            if (isLoading.value) {&#10;                Box(modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(300.dp), contentAlignment = Alignment.Center) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else if (errorMessage.value != null) {&#10;                Box(modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(300.dp), contentAlignment = Alignment.Center) {&#10;                    Text(&quot;Error: ${errorMessage.value}&quot;, color = Color.Red)&#10;                }&#10;            } else {&#10;                ProfileCard(profiles, profileIndex = profileIndex)&#10;                ActionButtons(&#10;                    profiles = profiles,&#10;                    profileIndex = profileIndex,&#10;                    onLike = { /* handle like if needed */ },&#10;                    onDislike = { /* handle dislike if needed */ }&#10;                )&#10;            }&#10;        }&#10;        // Fixed BottomNavigationBar&#10;        Box(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .fillMaxWidth()&#10;        ) {&#10;            BottomNavigationBar(navController)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HomeHeader(navController: NavController) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(start = 48.dp, end = 48.dp, top = 40.dp, bottom = 30.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        IconButton(onClick = { navController.popBackStack() }) {&#10;            Icon(&#10;                imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                contentDescription = &quot;Back&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;&#10;        Text(&#10;            text = &quot;Discover&quot;,&#10;            color = Color.Black,&#10;            fontWeight = FontWeight.Bold,&#10;            fontSize = 24.sp&#10;        )&#10;&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileCard(&#10;    profiles: List&lt;Map&lt;String, Any&gt;&gt;,&#10;    profileIndex: MutableState&lt;Int&gt;,&#10;    onLike: (Map&lt;String, Any&gt;) -&gt; Unit = {},&#10;    onDislike: (Map&lt;String, Any&gt;) -&gt; Unit = {}&#10;) {&#10;    val currentProfile = profiles.getOrNull(profileIndex.value)&#10;&#10;    if (currentProfile == null) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(900.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Text(&quot;No profiles available&quot;, color = Color.Gray)&#10;        }&#10;        return&#10;    }&#10;&#10;    val firstName = currentProfile[&quot;firstName&quot;] as? String ?: &quot;&quot;&#10;    val lastName = currentProfile[&quot;lastName&quot;] as? String ?: &quot;&quot;&#10;    val name = (firstName + &quot; &quot; + lastName).trim().ifEmpty { &quot;Unknown&quot; }&#10;    val birthday = currentProfile[&quot;birthday&quot;] as? String&#10;    Log.d(&quot;YearBug&quot;, &quot;Year: $birthday&quot;)&#10;&#10;    val age = birthday?.let {&#10;        try {&#10;            // Expecting format dd/MM/yyyy&#10;            val year = it.split(&quot;/&quot;).getOrNull(2)?.toInt() ?: throw Exception(&quot;Invalid date&quot;)&#10;            Log.d(&quot;YearBug&quot;, &quot;Year: $year&quot;)&#10;            val currentYear = Calendar.getInstance().get(Calendar.YEAR)&#10;            (currentYear - year).toString()&#10;        } catch (e: Exception) {&#10;            &quot;?&quot;&#10;        }&#10;    } ?: &quot;?&quot;&#10;    val description = currentProfile[&quot;description&quot;] as? String ?: &quot;No description&quot;&#10;    val distance = currentProfile[&quot;distance&quot;]?.toString() ?: &quot;1 km&quot;&#10;&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(550.dp)&#10;            .padding(horizontal = 30.dp)&#10;            .pointerInput(profileIndex.value) {&#10;                detectDragGestures(&#10;                    onDragEnd = {&#10;                        scope.launch {&#10;                            when {&#10;                                offsetX.value &gt; 200f -&gt; {&#10;                                    // Swiped right (like)&#10;                                    onLike(currentProfile)&#10;                                    offsetX.snapTo(0f)&#10;                                    profileIndex.value ++&#10;&#10;                                }&#10;                                offsetX.value &lt; -200f -&gt; {&#10;                                    // Swiped left (dislike)&#10;                                    onDislike(currentProfile)&#10;                                    offsetX.snapTo(0f)&#10;                                    profileIndex.value ++&#10;&#10;                                }&#10;                                else -&gt; {&#10;                                    // Snap back&#10;                                    offsetX.animateTo(0f, tween(300))&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onDrag = { change, dragAmount -&gt;&#10;                        scope.launch {&#10;                            offsetX.snapTo(offsetX.value + dragAmount.x)&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;            .offset { IntOffset(offsetX.value.toInt(), 0) },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(550.dp)&#10;                .clip(RoundedCornerShape(32.dp))&#10;                .background(Color(0xFF23222B))&#10;                .zIndex(1f)&#10;        ) {&#10;            // Portrait Image (placeholder)&#10;            Image(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile Image&quot;,&#10;                contentScale = ContentScale.Crop,&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .clip(RoundedCornerShape(32.dp))&#10;            )&#10;            // Distance Label&#10;            Box(&#10;                modifier = Modifier&#10;                    .padding(16.dp)&#10;                    .align(Alignment.TopStart)&#10;                    .background(Color.White.copy(alpha = 0.85f), RoundedCornerShape(50))&#10;                    .padding(horizontal = 16.dp, vertical = 6.dp)&#10;            ) {&#10;                Text(distance, color = Color.Black, fontWeight = FontWeight.Bold, fontSize = 14.sp)&#10;            }&#10;            // Gradient Overlay&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(120.dp)&#10;                    .align(Alignment.BottomCenter)&#10;                    .background(&#10;                        Brush.verticalGradient(&#10;                            colors = listOf(Color.Transparent, Color.Black),&#10;                            startY = 0f,&#10;                            endY = 300f&#10;                        ),&#10;                        shape = RoundedCornerShape(bottomStart = 32.dp, bottomEnd = 32.dp)&#10;                    )&#10;            )&#10;            // Name, Age, Description&#10;            Column(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.Center,&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;$name, $age&quot;,&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 28.sp,&#10;                    maxLines = 1,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;                Text(&#10;                    text = description,&#10;                    color = Color(0xFFCCCCCC),&#10;                    fontSize = 16.sp,&#10;                    maxLines = 1,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionButtons(&#10;    profiles: List&lt;Map&lt;String, Any&gt;&gt;,&#10;    profileIndex: MutableState&lt;Int&gt;,&#10;    onLike: (Map&lt;String, Any&gt;) -&gt; Unit = {},&#10;    onDislike: (Map&lt;String, Any&gt;) -&gt; Unit = {}&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 24.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(25.dp, Alignment.CenterHorizontally),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        // Dislike Button&#10;        ActionButton(&#10;            icon = Icons.Default.Close,&#10;            background = Color.White,&#10;            iconTint = Color.Black,&#10;            size = 75.dp,&#10;            shadow = 8.dp&#10;        ) {&#10;            val currentProfile = profiles.getOrNull(profileIndex.value)&#10;            if (currentProfile != null) {&#10;                onDislike(currentProfile)&#10;                // Animate swipe left&#10;                scope.launch {&#10;                    offsetX.animateTo(-400f, tween(300))&#10;                    offsetX.snapTo(0f)&#10;                    if (profileIndex.value &lt; profiles.size - 1) {&#10;                        profileIndex.value++&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        // Like Button&#10;        ActionButton(&#10;            icon = Icons.Default.Favorite,&#10;            background = AppColors.Text_Pink,&#10;            iconTint = Color.White,&#10;            size = 95.dp,&#10;            shadow = 12.dp&#10;        ) {&#10;            val currentProfile = profiles.getOrNull(profileIndex.value)&#10;            if (currentProfile != null) {&#10;                onLike(currentProfile)&#10;                // Animate swipe right&#10;                scope.launch {&#10;                    offsetX.animateTo(400f, tween(300))&#10;                    offsetX.snapTo(0f)&#10;                    if (profileIndex.value &lt; profiles.size - 1) {&#10;                        profileIndex.value++&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        // Super Like Button&#10;        ActionButton(&#10;            icon = Icons.Default.Star,&#10;            background = Color(0xFF4A154B),&#10;            iconTint = Color.White,&#10;            size = 75.dp,&#10;            shadow = 8.dp&#10;        ) {}&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionButton(&#10;    icon: ImageVector,&#10;    background: Color,&#10;    iconTint: Color,&#10;    size: Dp,&#10;    shadow: Dp,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .size(size)&#10;            .shadow(shadow, CircleShape)&#10;            .clip(CircleShape)&#10;            .background(background)&#10;            .clickable { onClick() },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = iconTint,&#10;            modifier = Modifier.size(size * 0.5f)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BottomNavIcon(&#10;    icon: ImageVector,&#10;    isActive: Boolean,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    IconButton(onClick = onClick) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = if (isActive) AppColors.Text_Pink else Color(0xFFBDBDBD),&#10;            modifier = Modifier.size(32.dp)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BottomNavigationBar(navController: NavController) {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(103.dp)&#10;            .background(Color.White.copy(alpha = 1.0f)),&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 32.dp, vertical = 20.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            BottomNavIcon(&#10;                icon = Icons.Default.ViewModule,&#10;                isActive = true&#10;            ) { /* TODO: Handle navigation */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Favorite,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Chat,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Person,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/profile/ProfileDetailsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/profile/ProfileDetailsScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.profile&#10;&#10;import android.util.Log&#10;import androidx.annotation.DrawableRes&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.NavController&#10;import coil.compose.rememberAsyncImagePainter&#10;import com.example.dating.R&#10;import com.example.dating.ui.components.CustomCalendarDialog&#10;import com.example.dating.ui.theme.AppColors&#10;import com.example.dating.viewmodel.ProfileViewModel&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.layout.FlowRow&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.runtime.snapshots.SnapshotStateList&#10;&#10;// Assuming Interest data class structure&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ProfileDetailsScreen(&#10;    navController: NavController,&#10;    profileViewModel: ProfileViewModel = viewModel()&#10;) {&#10;    var isLoading by remember { mutableStateOf(true) }&#10;    var profile by remember { mutableStateOf&lt;Map&lt;String, Any&gt;?&gt;(null) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    LaunchedEffect(Unit) {&#10;        isLoading = true&#10;        val userId = FirebaseAuth.getInstance().currentUser?.uid&#10;        if (userId == null) {&#10;            errorMessage = &quot;User not logged in.&quot;&#10;            isLoading = false&#10;            return@LaunchedEffect&#10;        }&#10;        try {&#10;            val doc = FirebaseFirestore.getInstance().collection(&quot;users&quot;).document(userId).get().await()&#10;            if (doc.exists()) {&#10;                profile = doc.data&#10;            } else {&#10;                errorMessage = &quot;Profile not found.&quot;&#10;            }&#10;        } catch (e: Exception) {&#10;            errorMessage = &quot;Failed to load profile: ${e.message}&quot;&#10;        }&#10;        isLoading = false&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(AppColors.MainBackground)&#10;    ) {&#10;        when {&#10;            isLoading -&gt; {&#10;                CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))&#10;            }&#10;            errorMessage != null -&gt; {&#10;                Text(&#10;                    text = errorMessage ?: &quot;An unknown error occurred.&quot;,&#10;                    color = Color.Red,&#10;                    modifier = Modifier.align(Alignment.Center).padding(16.dp)&#10;                )&#10;            }&#10;            profile != null -&gt; {&#10;                ProfileContent(&#10;                    navController = navController,&#10;                    initialProfile = profile!!,&#10;                    profileViewModel = profileViewModel&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileContent(&#10;    navController: NavController,&#10;    initialProfile: Map&lt;String, Any&gt;,&#10;    profileViewModel: ProfileViewModel&#10;) {&#10;    var isEditMode by remember { mutableStateOf(false) }&#10;    var showCalendar by remember { mutableStateOf(false) }&#10;&#10;    var editableFirstName by remember { mutableStateOf(initialProfile[&quot;firstName&quot;]?.toString() ?: &quot;&quot;) }&#10;    var editableLastName by remember { mutableStateOf(initialProfile[&quot;lastName&quot;]?.toString() ?: &quot;&quot;) }&#10;    var editableBirthday by remember { mutableStateOf(initialProfile[&quot;birthday&quot;]?.toString() ?: &quot;&quot;) }&#10;    var editableGender by remember { mutableStateOf(initialProfile[&quot;gender&quot;]?.toString() ?: &quot;&quot;) }&#10;    var editableJob by remember { mutableStateOf(initialProfile[&quot;job&quot;]?.toString() ?: &quot;&quot;) }&#10;    var editableLocation by remember { mutableStateOf(initialProfile[&quot;location&quot;]?.toString() ?: &quot;&quot;) }&#10;    var editableDescription by remember { mutableStateOf(initialProfile[&quot;description&quot;]?.toString() ?: &quot;&quot;) }&#10;&#10;    val selectedInterests = remember {&#10;        ((initialProfile[&quot;interests&quot;] as? List&lt;*&gt;)?.map { it.toString() } ?: emptyList()).toMutableStateList()&#10;    }&#10;&#10;    var isSaving by remember { mutableStateOf(false) }&#10;    var saveError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    val allInterests = remember {&#10;        listOf(&#10;            Interest(&quot;Photography&quot;, R.drawable.ic_interest_photography),&#10;            Interest(&quot;Shopping&quot;, R.drawable.ic_interest_shopping),&#10;            Interest(&quot;Karaoke&quot;, R.drawable.ic_interest_karaoke),&#10;            Interest(&quot;Yoga&quot;, R.drawable.ic_interest_yoga),&#10;            Interest(&quot;Cooking&quot;, R.drawable.ic_interest_cooking),&#10;            Interest(&quot;Tennis&quot;, R.drawable.ic_interest_tennis),&#10;            Interest(&quot;Run&quot;, R.drawable.ic_interest_run),&#10;            Interest(&quot;Swimming&quot;, R.drawable.ic_interest_swimming),&#10;            Interest(&quot;Art&quot;, R.drawable.ic_interest_art),&#10;            Interest(&quot;Traveling&quot;, R.drawable.ic_interest_travelling),&#10;            Interest(&quot;Extreme&quot;, R.drawable.ic_interest_extreme),&#10;            Interest(&quot;Music&quot;, R.drawable.ic_interest_music),&#10;            Interest(&quot;Drink&quot;, R.drawable.ic_interest_drink),&#10;            Interest(&quot;Video games&quot;, R.drawable.ic_interest_game)&#10;        )&#10;    }&#10;&#10;    LazyColumn(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        // Top Bar: Back Button and Edit/Done Button&#10;        item {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth().padding(start = 32.dp, end = 32.dp, top = 16.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                IconButton(onClick = { navController.navigateUp() }) {&#10;                    Icon(imageVector = Icons.Filled.ArrowBack, contentDescription = &quot;Back&quot;, tint = AppColors.Text_Pink)&#10;                }&#10;                TextButton(onClick = {&#10;                    if (isEditMode) {&#10;                        isSaving = true&#10;                        saveError = null&#10;                        profileViewModel.saveProfile(&#10;                            editableFirstName, editableLastName, editableBirthday,&#10;                            initialProfile[&quot;imageUrl&quot;] as? String,&#10;                            onSuccess = {&#10;                                profileViewModel.updateGender(editableGender,&#10;                                    onSuccess = {&#10;                                        profileViewModel.updateInterests(selectedInterests,&#10;                                            onSuccess = {&#10;                                                profileViewModel.updateJobLocationDescription(&#10;                                                    editableJob, editableLocation, editableDescription,&#10;                                                    onSuccess = {&#10;                                                        isSaving = false&#10;                                                        isEditMode = false&#10;                                                    },&#10;                                                    onFailure = { e -&gt; isSaving = false; saveError = e.message }&#10;                                                )&#10;                                            },&#10;                                            onFailure = { e -&gt; isSaving = false; saveError = e.message }&#10;                                        )&#10;                                    },&#10;                                    onFailure = { e -&gt; isSaving = false; saveError = e.message }&#10;                                )&#10;                            },&#10;                            onFailure = { e -&gt; isSaving = false; saveError = e.message }&#10;                        )&#10;                    } else {&#10;                        isEditMode = true&#10;                    }&#10;                }) {&#10;                    Text(&#10;                        text = if (isEditMode) &quot;Done&quot; else &quot;Edit Profile&quot;,&#10;                        color = AppColors.Text_Pink,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;&#10;        // Saving Indicator and Error Message&#10;        item {&#10;            if (isSaving) {&#10;                CircularProgressIndicator(modifier = Modifier.padding(vertical = 8.dp))&#10;            }&#10;            if (saveError != null) {&#10;                Text(&#10;                    text = saveError ?: &quot;Unknown error while saving&quot;,&#10;                    color = Color.Red,&#10;                    modifier = Modifier.padding(vertical = 8.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        // Profile Image&#10;        item {&#10;            val imageUrl = initialProfile[&quot;imageUrl&quot;] as? String&#10;            val imageModifier = Modifier.size(170.dp).padding(vertical = 8.dp)&#10;            if (!imageUrl.isNullOrBlank()) {&#10;                Image(&#10;                    painter = rememberAsyncImagePainter(model = imageUrl, error = painterResource(R.drawable.ic_avatar)),&#10;                    contentDescription = &quot;Profile Image&quot;,&#10;                    modifier = imageModifier,&#10;                    contentScale = ContentScale.Crop&#10;                )&#10;            } else {&#10;                Image(&#10;                    painter = painterResource(R.drawable.ic_avatar),&#10;                    contentDescription = &quot;Default Avatar&quot;,&#10;                    modifier = imageModifier,&#10;                    contentScale = ContentScale.Crop&#10;                )&#10;            }&#10;        }&#10;&#10;        // Form Fields&#10;        item {&#10;            NameFields(firstName = editableFirstName, lastName = editableLastName, isEditMode = isEditMode,&#10;                onFirstNameChange = { editableFirstName = it },&#10;                onLastNameChange = { editableLastName = it }&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            BirthdayGenderFields(birthday = editableBirthday, gender = editableGender, isEditMode = isEditMode,&#10;                showCalendar = showCalendar,&#10;                onShowCalendar = { showCalendar = true },&#10;                onGenderChange = { editableGender = it }&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            JobDropdown(job = editableJob, isEditMode = isEditMode, onJobChange = { editableJob = it })&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            LocationField(location = editableLocation, isEditMode = isEditMode,&#10;                onLocationChange = { editableLocation = it }&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            DescriptionField(description = editableDescription, isEditMode = isEditMode,&#10;                onDescriptionChange = { editableDescription = it }&#10;            )&#10;        }&#10;&#10;        // Interests Section&#10;        item {&#10;            Text(&#10;                text = &quot;Interests:&quot;,&#10;                fontSize = 18.sp,&#10;                color = Color.DarkGray,&#10;                modifier = Modifier&#10;                    .padding(top = 24.dp, bottom = 16.dp)&#10;                    .fillMaxWidth(),&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;        item {&#10;            InterestsSection(&#10;                allInterests = allInterests,&#10;                selectedInterests = selectedInterests,&#10;                isEditMode = isEditMode&#10;            )&#10;        }&#10;    }&#10;&#10;    if (showCalendar) {&#10;        CustomCalendarDialog(&#10;            onDateSelected = { selectedDate -&gt;&#10;                editableBirthday = selectedDate.toString() // Ensure your date format is correct&#10;                showCalendar = false&#10;            },&#10;            onDismiss = { showCalendar = false }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun NameFields(&#10;    firstName: String,&#10;    lastName: String,&#10;    isEditMode: Boolean,&#10;    onFirstNameChange: (String) -&gt; Unit,&#10;    onLastNameChange: (String) -&gt; Unit&#10;) {&#10;    Row(modifier = Modifier.fillMaxWidth()) {&#10;        OutlinedTextField(&#10;            value = firstName,&#10;            onValueChange = { if (isEditMode) onFirstNameChange(it) },&#10;            label = { Text(&quot;First Name&quot;) },&#10;            modifier = Modifier.weight(1f).padding(end = 4.dp, bottom = 8.dp),&#10;            enabled = isEditMode,&#10;            readOnly = !isEditMode&#10;        )&#10;        OutlinedTextField(&#10;            value = lastName,&#10;            onValueChange = { if (isEditMode) onLastNameChange(it) },&#10;            label = { Text(&quot;Last Name&quot;) },&#10;            modifier = Modifier.weight(1f).padding(start = 4.dp, bottom = 8.dp),&#10;            enabled = isEditMode,&#10;            readOnly = !isEditMode&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BirthdayGenderFields(&#10;    birthday: String,&#10;    gender: String,&#10;    isEditMode: Boolean,&#10;    showCalendar: Boolean,&#10;    onShowCalendar: () -&gt; Unit,&#10;    onGenderChange: (String) -&gt; Unit&#10;) {&#10;    Row(modifier = Modifier.fillMaxWidth()) {&#10;        Box(&#10;            modifier = Modifier.weight(1f).padding(end = 4.dp, bottom = 8.dp)&#10;                .clickable(enabled = isEditMode) { if (isEditMode) onShowCalendar() }&#10;        ) {&#10;            OutlinedTextField(&#10;                value = birthday,&#10;                onValueChange = {},&#10;                label = { Text(&quot;Birthday&quot;) },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = isEditMode,&#10;                readOnly = true&#10;            )&#10;        }&#10;        var expanded by remember { mutableStateOf(false) }&#10;        val genderOptions = listOf(&quot;Man&quot;, &quot;Woman&quot;, &quot;Other&quot;)&#10;        Box(&#10;            modifier = Modifier.weight(1f)&#10;                .padding(start = 4.dp, bottom = 8.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = gender,&#10;                onValueChange = {},&#10;                label = { Text(&quot;Gender&quot;) },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .then(if (isEditMode) Modifier.clickable { expanded = true } else Modifier),&#10;                enabled = isEditMode,&#10;                readOnly = true,&#10;                trailingIcon = {&#10;                    IconButton(onClick = { if (isEditMode) expanded = true }) {&#10;                        Icon(&#10;                            painter = painterResource(R.drawable.ic_arrow_drop_down),&#10;                            contentDescription = &quot;Dropdown&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;            DropdownMenu(&#10;                expanded = expanded,&#10;                onDismissRequest = { expanded = false }&#10;            ) {&#10;                genderOptions.forEach { option -&gt;&#10;                    DropdownMenuItem(&#10;                        text = { Text(option) },&#10;                        onClick = {&#10;                            onGenderChange(option)&#10;                            expanded = false&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun JobDropdown(&#10;    job: String,&#10;    isEditMode: Boolean,&#10;    onJobChange: (String) -&gt; Unit&#10;) {&#10;    val jobOptions = listOf(&#10;        &quot;Software Engineer&quot;, &quot;Doctor&quot;, &quot;Teacher&quot;, &quot;Nurse&quot;, &quot;Accountant&quot;, &quot;Designer&quot;, &quot;Manager&quot;, &quot;Salesperson&quot;, &quot;Lawyer&quot;, &quot;Pharmacist&quot;,&#10;        &quot;Architect&quot;, &quot;Chef&quot;, &quot;Police Officer&quot;, &quot;Firefighter&quot;, &quot;Scientist&quot;, &quot;Dentist&quot;, &quot;Mechanic&quot;, &quot;Electrician&quot;, &quot;Plumber&quot;, &quot;Pilot&quot;,&#10;        &quot;Flight Attendant&quot;, &quot;Journalist&quot;, &quot;Photographer&quot;, &quot;Artist&quot;, &quot;Musician&quot;, &quot;Actor&quot;, &quot;Writer&quot;, &quot;Engineer&quot;, &quot;Consultant&quot;, &quot;Entrepreneur&quot;&#10;    )&#10;    var jobDropdownExpanded by remember { mutableStateOf(false) }&#10;    ExposedDropdownMenuBox(&#10;        expanded = jobDropdownExpanded,&#10;        onExpandedChange = { if (isEditMode) jobDropdownExpanded = !jobDropdownExpanded }&#10;    ) {&#10;        OutlinedTextField(&#10;            value = job,&#10;            onValueChange = { if (isEditMode) onJobChange(it) },&#10;            label = { Text(&quot;Job&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            enabled = isEditMode,&#10;            readOnly = false,&#10;            singleLine = true,&#10;            trailingIcon = {&#10;                ExposedDropdownMenuDefaults.TrailingIcon(expanded = jobDropdownExpanded)&#10;            }&#10;        )&#10;        ExposedDropdownMenu(&#10;            expanded = jobDropdownExpanded,&#10;            onDismissRequest = { jobDropdownExpanded = false }&#10;        ) {&#10;            jobOptions.filter { it.contains(job, ignoreCase = true) || job.isBlank() }&#10;                .forEach { option -&gt;&#10;                    DropdownMenuItem(&#10;                        text = { Text(option) },&#10;                        onClick = {&#10;                            onJobChange(option)&#10;                            jobDropdownExpanded = false&#10;                        }&#10;                    )&#10;                }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun LocationField(&#10;    location: String,&#10;    isEditMode: Boolean,&#10;    onLocationChange: (String) -&gt; Unit&#10;) {&#10;    OutlinedTextField(&#10;        value = location,&#10;        onValueChange = { if (isEditMode &amp;&amp; it.length &lt;= 70) onLocationChange(it) },&#10;        label = { Text(&quot;Location&quot;) },&#10;        modifier = Modifier.fillMaxWidth(),&#10;        enabled = isEditMode,&#10;        readOnly = !isEditMode,&#10;        singleLine = true&#10;    )&#10;}&#10;&#10;@Composable&#10;fun DescriptionField(&#10;    description: String,&#10;    isEditMode: Boolean,&#10;    onDescriptionChange: (String) -&gt; Unit&#10;) {&#10;    OutlinedTextField(&#10;        value = description,&#10;        onValueChange = { if (isEditMode &amp;&amp; it.length &lt;= 150) onDescriptionChange(it) },&#10;        label = { Text(&quot;Description&quot;) },&#10;        modifier = Modifier.fillMaxWidth(),&#10;        enabled = isEditMode,&#10;        readOnly = !isEditMode,&#10;        supportingText = { Text(&quot;Max 150 characters&quot;) },&#10;        maxLines = 3&#10;    )&#10;}&#10;&#10;@OptIn(ExperimentalLayoutApi::class)&#10;@Composable&#10;fun InterestsSection(&#10;    allInterests: List&lt;Interest&gt;,&#10;    selectedInterests: SnapshotStateList&lt;String&gt;,&#10;    isEditMode: Boolean&#10;) {&#10;    // Display interests in rows of two using chunked&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(bottom = 16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        allInterests.chunked(2).forEach { rowInterests -&gt;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.Center&#10;            ) {&#10;                rowInterests.forEach { interest -&gt;&#10;                    val isSelected = selectedInterests.contains(interest.name)&#10;                    Surface(&#10;                        shape = MaterialTheme.shapes.medium,&#10;                        color = if (isSelected) AppColors.Text_Pink.copy(alpha = 0.15f) else Color.LightGray.copy(alpha = 0.2f),&#10;                        border = if (isSelected) BorderStroke(2.dp, AppColors.Text_Pink) else null,&#10;                        modifier = Modifier&#10;                            .padding(4.dp)&#10;                            .weight(1f)&#10;                            .height(48.dp)&#10;                            .clickable(enabled = isEditMode) {&#10;                                if (isEditMode) {&#10;                                    if (isSelected) selectedInterests.remove(interest.name)&#10;                                    else selectedInterests.add(interest.name)&#10;                                }&#10;                            },&#10;                        tonalElevation = if (isSelected) 4.dp else 0.dp&#10;                    ) {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.Center,&#10;                            modifier = Modifier.fillMaxSize().padding(horizontal = 12.dp)&#10;                        ) {&#10;                            Icon(&#10;                                painter = painterResource(id = interest.icon),&#10;                                contentDescription = interest.name,&#10;                                tint = if (isSelected) AppColors.Text_Pink else Color.Gray,&#10;                                modifier = Modifier.size(24.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                            Text(&#10;                                text = interest.name,&#10;                                color = if (isSelected) AppColors.Text_Pink else Color.DarkGray,&#10;                                fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                // If the row has only one interest, add a Spacer to fill the second column&#10;                if (rowInterests.size == 1) {&#10;                    Spacer(modifier = Modifier.weight(1f))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.profile&#10;&#10;import android.util.Log&#10;import androidx.annotation.DrawableRes&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.NavController&#10;import coil.compose.rememberAsyncImagePainter&#10;import com.example.dating.R&#10;import com.example.dating.ui.components.CustomCalendarDialog&#10;import com.example.dating.ui.theme.AppColors&#10;import com.example.dating.viewmodel.ProfileViewModel&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.layout.FlowRow&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.runtime.snapshots.SnapshotStateList&#10;&#10;// Assuming Interest data class structure&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ProfileDetailsScreen(&#10;    navController: NavController,&#10;    profileViewModel: ProfileViewModel = viewModel()&#10;) {&#10;    var isLoading by remember { mutableStateOf(true) }&#10;    var profile by remember { mutableStateOf&lt;Map&lt;String, Any&gt;?&gt;(null) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    LaunchedEffect(Unit) {&#10;        isLoading = true&#10;        val userId = FirebaseAuth.getInstance().currentUser?.uid&#10;        if (userId == null) {&#10;            errorMessage = &quot;User not logged in.&quot;&#10;            isLoading = false&#10;            return@LaunchedEffect&#10;        }&#10;        try {&#10;            val doc = FirebaseFirestore.getInstance().collection(&quot;users&quot;).document(userId).get().await()&#10;            if (doc.exists()) {&#10;                profile = doc.data&#10;            } else {&#10;                errorMessage = &quot;Profile not found.&quot;&#10;            }&#10;        } catch (e: Exception) {&#10;            errorMessage = &quot;Failed to load profile: ${e.message}&quot;&#10;        }&#10;        isLoading = false&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(AppColors.MainBackground)&#10;    ) {&#10;        when {&#10;            isLoading -&gt; {&#10;                Surface(&#10;                    color = Color.White.copy(alpha = 0.9f),&#10;                    shape = MaterialTheme.shapes.medium,&#10;                    tonalElevation = 8.dp,&#10;                    modifier = Modifier.align(Alignment.Center)&#10;                ) {&#10;                    CircularProgressIndicator(modifier = Modifier.padding(32.dp))&#10;                }&#10;            }&#10;            errorMessage != null -&gt; {&#10;                Surface(&#10;                    color = Color.White.copy(alpha = 0.95f),&#10;                    shape = MaterialTheme.shapes.medium,&#10;                    tonalElevation = 8.dp,&#10;                    modifier = Modifier.align(Alignment.Center).padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = errorMessage ?: &quot;An unknown error occurred.&quot;,&#10;                        color = Color.Red,&#10;                        fontWeight = FontWeight.Bold,&#10;                        fontSize = 18.sp,&#10;                        modifier = Modifier.padding(24.dp)&#10;                    )&#10;                }&#10;            }&#10;            profile != null -&gt; {&#10;                ProfileContent(&#10;                    navController = navController,&#10;                    initialProfile = profile!!,&#10;                    profileViewModel = profileViewModel&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileContent(&#10;    navController: NavController,&#10;    initialProfile: Map&lt;String, Any&gt;,&#10;    profileViewModel: ProfileViewModel&#10;) {&#10;    var isEditMode by remember { mutableStateOf(false) }&#10;    var showCalendar by remember { mutableStateOf(false) }&#10;&#10;    var editableFirstName by remember { mutableStateOf(initialProfile[&quot;firstName&quot;]?.toString() ?: &quot;&quot;) }&#10;    var editableLastName by remember { mutableStateOf(initialProfile[&quot;lastName&quot;]?.toString() ?: &quot;&quot;) }&#10;    var editableBirthday by remember { mutableStateOf(initialProfile[&quot;birthday&quot;]?.toString() ?: &quot;&quot;) }&#10;    var editableGender by remember { mutableStateOf(initialProfile[&quot;gender&quot;]?.toString() ?: &quot;&quot;) }&#10;    var editableJob by remember { mutableStateOf(initialProfile[&quot;job&quot;]?.toString() ?: &quot;&quot;) }&#10;    var editableLocation by remember { mutableStateOf(initialProfile[&quot;location&quot;]?.toString() ?: &quot;&quot;) }&#10;    var editableDescription by remember { mutableStateOf(initialProfile[&quot;description&quot;]?.toString() ?: &quot;&quot;) }&#10;&#10;    val selectedInterests = remember {&#10;        ((initialProfile[&quot;interests&quot;] as? List&lt;*&gt;)?.map { it.toString() } ?: emptyList()).toMutableStateList()&#10;    }&#10;&#10;    var isSaving by remember { mutableStateOf(false) }&#10;    var saveError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    val allInterests = remember {&#10;        listOf(&#10;            Interest(&quot;Photography&quot;, R.drawable.ic_interest_photography),&#10;            Interest(&quot;Shopping&quot;, R.drawable.ic_interest_shopping),&#10;            Interest(&quot;Karaoke&quot;, R.drawable.ic_interest_karaoke),&#10;            Interest(&quot;Yoga&quot;, R.drawable.ic_interest_yoga),&#10;            Interest(&quot;Cooking&quot;, R.drawable.ic_interest_cooking),&#10;            Interest(&quot;Tennis&quot;, R.drawable.ic_interest_tennis),&#10;            Interest(&quot;Run&quot;, R.drawable.ic_interest_run),&#10;            Interest(&quot;Swimming&quot;, R.drawable.ic_interest_swimming),&#10;            Interest(&quot;Art&quot;, R.drawable.ic_interest_art),&#10;            Interest(&quot;Traveling&quot;, R.drawable.ic_interest_travelling),&#10;            Interest(&quot;Extreme&quot;, R.drawable.ic_interest_extreme),&#10;            Interest(&quot;Music&quot;, R.drawable.ic_interest_music),&#10;            Interest(&quot;Drink&quot;, R.drawable.ic_interest_drink),&#10;            Interest(&quot;Video games&quot;, R.drawable.ic_interest_game)&#10;        )&#10;    }&#10;&#10;    LazyColumn(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        // Top Bar: Back Button and Edit/Done Button&#10;        item {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth().padding(start = 32.dp, end = 32.dp, top = 16.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                IconButton(onClick = { navController.navigateUp() }) {&#10;                    Icon(imageVector = Icons.Filled.ArrowBack, contentDescription = &quot;Back&quot;, tint = AppColors.Text_Pink)&#10;                }&#10;                TextButton(onClick = {&#10;                    if (isEditMode) {&#10;                        isSaving = true&#10;                        saveError = null&#10;                        profileViewModel.saveProfile(&#10;                            editableFirstName, editableLastName, editableBirthday,&#10;                            initialProfile[&quot;imageUrl&quot;] as? String,&#10;                            onSuccess = {&#10;                                profileViewModel.updateGender(editableGender,&#10;                                    onSuccess = {&#10;                                        profileViewModel.updateInterests(selectedInterests,&#10;                                            onSuccess = {&#10;                                                profileViewModel.updateJobLocationDescription(&#10;                                                    editableJob, editableLocation, editableDescription,&#10;                                                    onSuccess = {&#10;                                                        isSaving = false&#10;                                                        isEditMode = false&#10;                                                    },&#10;                                                    onFailure = { e -&gt; isSaving = false; saveError = e.message }&#10;                                                )&#10;                                            },&#10;                                            onFailure = { e -&gt; isSaving = false; saveError = e.message }&#10;                                        )&#10;                                    },&#10;                                    onFailure = { e -&gt; isSaving = false; saveError = e.message }&#10;                                )&#10;                            },&#10;                            onFailure = { e -&gt; isSaving = false; saveError = e.message }&#10;                        )&#10;                    } else {&#10;                        isEditMode = true&#10;                    }&#10;                }) {&#10;                    Text(&#10;                        text = if (isEditMode) &quot;Done&quot; else &quot;Edit Profile&quot;,&#10;                        color = AppColors.Text_Pink,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;&#10;        // Saving Indicator and Error Message&#10;        item {&#10;            if (isSaving) {&#10;                CircularProgressIndicator(modifier = Modifier.padding(vertical = 8.dp))&#10;            }&#10;            if (saveError != null) {&#10;                Text(&#10;                    text = saveError ?: &quot;Unknown error while saving&quot;,&#10;                    color = Color.Red,&#10;                    modifier = Modifier.padding(vertical = 8.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        // Profile Image&#10;        item {&#10;            val imageUrl = initialProfile[&quot;imageUrl&quot;] as? String&#10;            val imageModifier = Modifier.size(170.dp).padding(vertical = 8.dp)&#10;            if (!imageUrl.isNullOrBlank()) {&#10;                Image(&#10;                    painter = rememberAsyncImagePainter(model = imageUrl, error = painterResource(R.drawable.ic_avatar)),&#10;                    contentDescription = &quot;Profile Image&quot;,&#10;                    modifier = imageModifier,&#10;                    contentScale = ContentScale.Crop&#10;                )&#10;            } else {&#10;                Image(&#10;                    painter = painterResource(R.drawable.ic_avatar),&#10;                    contentDescription = &quot;Default Avatar&quot;,&#10;                    modifier = imageModifier,&#10;                    contentScale = ContentScale.Crop&#10;                )&#10;            }&#10;        }&#10;&#10;        // Form Fields&#10;        item {&#10;            NameFields(firstName = editableFirstName, lastName = editableLastName, isEditMode = isEditMode,&#10;                onFirstNameChange = { editableFirstName = it },&#10;                onLastNameChange = { editableLastName = it }&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            BirthdayGenderFields(birthday = editableBirthday, gender = editableGender, isEditMode = isEditMode,&#10;                showCalendar = showCalendar,&#10;                onShowCalendar = { showCalendar = true },&#10;                onGenderChange = { editableGender = it }&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            JobDropdown(job = editableJob, isEditMode = isEditMode, onJobChange = { editableJob = it })&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            LocationField(location = editableLocation, isEditMode = isEditMode,&#10;                onLocationChange = { editableLocation = it }&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            DescriptionField(description = editableDescription, isEditMode = isEditMode,&#10;                onDescriptionChange = { editableDescription = it }&#10;            )&#10;        }&#10;&#10;        // Interests Section&#10;        item {&#10;            Text(&#10;                text = &quot;Interests:&quot;,&#10;                fontSize = 18.sp,&#10;                color = Color.DarkGray,&#10;                modifier = Modifier&#10;                    .padding(top = 24.dp, bottom = 16.dp)&#10;                    .fillMaxWidth(),&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;        item {&#10;            InterestsSection(&#10;                allInterests = allInterests,&#10;                selectedInterests = selectedInterests,&#10;                isEditMode = isEditMode&#10;            )&#10;        }&#10;    }&#10;&#10;    if (showCalendar) {&#10;        CustomCalendarDialog(&#10;            onDateSelected = { selectedDate -&gt;&#10;                editableBirthday = selectedDate.toString() // Ensure your date format is correct&#10;                showCalendar = false&#10;            },&#10;            onDismiss = { showCalendar = false }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun NameFields(&#10;    firstName: String,&#10;    lastName: String,&#10;    isEditMode: Boolean,&#10;    onFirstNameChange: (String) -&gt; Unit,&#10;    onLastNameChange: (String) -&gt; Unit&#10;) {&#10;    Row(modifier = Modifier.fillMaxWidth()) {&#10;        OutlinedTextField(&#10;            value = firstName,&#10;            onValueChange = { if (isEditMode) onFirstNameChange(it) },&#10;            label = { Text(&quot;First Name&quot;) },&#10;            modifier = Modifier.weight(1f).padding(end = 4.dp, bottom = 8.dp),&#10;            enabled = isEditMode,&#10;            readOnly = !isEditMode&#10;        )&#10;        OutlinedTextField(&#10;            value = lastName,&#10;            onValueChange = { if (isEditMode) onLastNameChange(it) },&#10;            label = { Text(&quot;Last Name&quot;) },&#10;            modifier = Modifier.weight(1f).padding(start = 4.dp, bottom = 8.dp),&#10;            enabled = isEditMode,&#10;            readOnly = !isEditMode&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BirthdayGenderFields(&#10;    birthday: String,&#10;    gender: String,&#10;    isEditMode: Boolean,&#10;    showCalendar: Boolean,&#10;    onShowCalendar: () -&gt; Unit,&#10;    onGenderChange: (String) -&gt; Unit&#10;) {&#10;    Row(modifier = Modifier.fillMaxWidth()) {&#10;        Box(&#10;            modifier = Modifier.weight(1f).padding(end = 4.dp, bottom = 8.dp)&#10;                .clickable(enabled = isEditMode) { if (isEditMode) onShowCalendar() }&#10;        ) {&#10;            OutlinedTextField(&#10;                value = birthday,&#10;                onValueChange = {},&#10;                label = { Text(&quot;Birthday&quot;) },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = isEditMode,&#10;                readOnly = true&#10;            )&#10;        }&#10;        var expanded by remember { mutableStateOf(false) }&#10;        val genderOptions = listOf(&quot;Man&quot;, &quot;Woman&quot;, &quot;Other&quot;)&#10;        Box(&#10;            modifier = Modifier.weight(1f)&#10;                .padding(start = 4.dp, bottom = 8.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = gender,&#10;                onValueChange = {},&#10;                label = { Text(&quot;Gender&quot;) },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .then(if (isEditMode) Modifier.clickable { expanded = true } else Modifier),&#10;                enabled = isEditMode,&#10;                readOnly = true,&#10;                trailingIcon = {&#10;                    IconButton(onClick = { if (isEditMode) expanded = true }) {&#10;                        Icon(&#10;                            painter = painterResource(R.drawable.ic_arrow_drop_down),&#10;                            contentDescription = &quot;Dropdown&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;            DropdownMenu(&#10;                expanded = expanded,&#10;                onDismissRequest = { expanded = false }&#10;            ) {&#10;                genderOptions.forEach { option -&gt;&#10;                    DropdownMenuItem(&#10;                        text = { Text(option) },&#10;                        onClick = {&#10;                            onGenderChange(option)&#10;                            expanded = false&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun JobDropdown(&#10;    job: String,&#10;    isEditMode: Boolean,&#10;    onJobChange: (String) -&gt; Unit&#10;) {&#10;    val jobOptions = listOf(&#10;        &quot;Software Engineer&quot;, &quot;Doctor&quot;, &quot;Teacher&quot;, &quot;Nurse&quot;, &quot;Accountant&quot;, &quot;Designer&quot;, &quot;Manager&quot;, &quot;Salesperson&quot;, &quot;Lawyer&quot;, &quot;Pharmacist&quot;,&#10;        &quot;Architect&quot;, &quot;Chef&quot;, &quot;Police Officer&quot;, &quot;Firefighter&quot;, &quot;Scientist&quot;, &quot;Dentist&quot;, &quot;Mechanic&quot;, &quot;Electrician&quot;, &quot;Plumber&quot;, &quot;Pilot&quot;,&#10;        &quot;Flight Attendant&quot;, &quot;Journalist&quot;, &quot;Photographer&quot;, &quot;Artist&quot;, &quot;Musician&quot;, &quot;Actor&quot;, &quot;Writer&quot;, &quot;Engineer&quot;, &quot;Consultant&quot;, &quot;Entrepreneur&quot;&#10;    )&#10;    var jobDropdownExpanded by remember { mutableStateOf(false) }&#10;    ExposedDropdownMenuBox(&#10;        expanded = jobDropdownExpanded,&#10;        onExpandedChange = { if (isEditMode) jobDropdownExpanded = !jobDropdownExpanded }&#10;    ) {&#10;        OutlinedTextField(&#10;            value = job,&#10;            onValueChange = { if (isEditMode) onJobChange(it) },&#10;            label = { Text(&quot;Job&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            enabled = isEditMode,&#10;            readOnly = false,&#10;            singleLine = true,&#10;            trailingIcon = {&#10;                ExposedDropdownMenuDefaults.TrailingIcon(expanded = jobDropdownExpanded)&#10;            }&#10;        )&#10;        ExposedDropdownMenu(&#10;            expanded = jobDropdownExpanded,&#10;            onDismissRequest = { jobDropdownExpanded = false }&#10;        ) {&#10;            jobOptions.filter { it.contains(job, ignoreCase = true) || job.isBlank() }&#10;                .forEach { option -&gt;&#10;                    DropdownMenuItem(&#10;                        text = { Text(option) },&#10;                        onClick = {&#10;                            onJobChange(option)&#10;                            jobDropdownExpanded = false&#10;                        }&#10;                    )&#10;                }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun LocationField(&#10;    location: String,&#10;    isEditMode: Boolean,&#10;    onLocationChange: (String) -&gt; Unit&#10;) {&#10;    OutlinedTextField(&#10;        value = location,&#10;        onValueChange = { if (isEditMode &amp;&amp; it.length &lt;= 70) onLocationChange(it) },&#10;        label = { Text(&quot;Location&quot;) },&#10;        modifier = Modifier.fillMaxWidth(),&#10;        enabled = isEditMode,&#10;        readOnly = !isEditMode,&#10;        singleLine = true&#10;    )&#10;}&#10;&#10;@Composable&#10;fun DescriptionField(&#10;    description: String,&#10;    isEditMode: Boolean,&#10;    onDescriptionChange: (String) -&gt; Unit&#10;) {&#10;    OutlinedTextField(&#10;        value = description,&#10;        onValueChange = { if (isEditMode &amp;&amp; it.length &lt;= 150) onDescriptionChange(it) },&#10;        label = { Text(&quot;Description&quot;) },&#10;        modifier = Modifier.fillMaxWidth(),&#10;        enabled = isEditMode,&#10;        readOnly = !isEditMode,&#10;        supportingText = { Text(&quot;Max 150 characters&quot;) },&#10;        maxLines = 3&#10;    )&#10;}&#10;&#10;@OptIn(ExperimentalLayoutApi::class)&#10;@Composable&#10;fun InterestsSection(&#10;    allInterests: List&lt;Interest&gt;,&#10;    selectedInterests: SnapshotStateList&lt;String&gt;,&#10;    isEditMode: Boolean&#10;) {&#10;    // Display interests in rows of two using chunked&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(bottom = 16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        allInterests.chunked(2).forEach { rowInterests -&gt;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.Center&#10;            ) {&#10;                rowInterests.forEach { interest -&gt;&#10;                    val isSelected = selectedInterests.contains(interest.name)&#10;                    Surface(&#10;                        shape = MaterialTheme.shapes.medium,&#10;                        color = if (isSelected) AppColors.Text_Pink.copy(alpha = 0.15f) else Color.LightGray.copy(alpha = 0.2f),&#10;                        border = if (isSelected) BorderStroke(2.dp, AppColors.Text_Pink) else null,&#10;                        modifier = Modifier&#10;                            .padding(4.dp)&#10;                            .weight(1f)&#10;                            .height(48.dp)&#10;                            .clickable(enabled = isEditMode) {&#10;                                if (isEditMode) {&#10;                                    if (isSelected) selectedInterests.remove(interest.name)&#10;                                    else selectedInterests.add(interest.name)&#10;                                }&#10;                            },&#10;                        tonalElevation = if (isSelected) 4.dp else 0.dp&#10;                    ) {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.Center,&#10;                            modifier = Modifier.fillMaxSize().padding(horizontal = 12.dp)&#10;                        ) {&#10;                            Icon(&#10;                                painter = painterResource(id = interest.icon),&#10;                                contentDescription = interest.name,&#10;                                tint = if (isSelected) AppColors.Text_Pink else Color.Gray,&#10;                                modifier = Modifier.size(24.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                            Text(&#10;                                text = interest.name,&#10;                                color = if (isSelected) AppColors.Text_Pink else Color.DarkGray,&#10;                                fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                // If the row has only one interest, add a Spacer to fill the second column&#10;                if (rowInterests.size == 1) {&#10;                    Spacer(modifier = Modifier.weight(1f))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/ProfileViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/ProfileViewModel.kt" />
              <option name="originalContent" value="package com.example.dating.viewmodel&#10;&#10;import android.net.Uri&#10;import android.net.Uri&#10;import android.net.Uri&#10;import android.net.Uri&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.launch&#10;&#10;class ProfileViewModel : ViewModel() {&#10;    private val firestore = FirebaseFirestore.getInstance()&#10;    private val auth = FirebaseAuth.getInstance()&#10;&#10;    fun saveProfile(&#10;        firstName: String,&#10;        lastName: String,&#10;        birthday: String?,&#10;        imageUrl: String?,&#10;        onSuccess: () -&gt; Unit,&#10;        onFailure: (Exception) -&gt; Unit&#10;    ) {&#10;        val userId = auth.currentUser?.uid ?: return&#10;        val userMap = hashMapOf(&#10;            &quot;firstName&quot; to firstName,&#10;            &quot;lastName&quot; to lastName,&#10;            &quot;birthday&quot; to birthday,&#10;            &quot;imageUrl&quot; to imageUrl&#10;        )&#10;        viewModelScope.launch {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .set(userMap)&#10;                .addOnSuccessListener { onSuccess() }&#10;                .addOnFailureListener { e -&gt; onFailure(e) }&#10;        }&#10;    }&#10;&#10;    fun updateGender(&#10;        gender: String,&#10;        onSuccess: () -&gt; Unit,&#10;        onFailure: (Exception) -&gt; Unit&#10;    ) {&#10;        val userId = auth.currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;gender&quot;, gender)&#10;                .addOnSuccessListener { onSuccess() }&#10;                .addOnFailureListener { e -&gt; onFailure(e) }&#10;        }&#10;    }&#10;&#10;    fun updateInterests(&#10;        interests: List&lt;String&gt;,&#10;        onSuccess: () -&gt; Unit,&#10;        onFailure: (Exception) -&gt; Unit&#10;    ) {&#10;        val userId = auth.currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;interests&quot;, interests)&#10;                .addOnSuccessListener { onSuccess() }&#10;&#10;" />
              <option name="updatedContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.launch&#10;&#10;class ProfileViewModel : ViewModel() {&#10;    private val firestore = FirebaseFirestore.getInstance()&#10;    private val auth = FirebaseAuth.getInstance()&#10;&#10;    fun saveProfile(&#10;        firstName: String,&#10;        lastName: String,&#10;        birthday: String?,&#10;        imageUrl: String?,&#10;        onSuccess: () -&gt; Unit,&#10;        onFailure: (Exception) -&gt; Unit&#10;    ) {&#10;        val userId = auth.currentUser?.uid ?: return&#10;        val userMap = hashMapOf(&#10;            &quot;firstName&quot; to firstName,&#10;            &quot;lastName&quot; to lastName,&#10;            &quot;birthday&quot; to birthday,&#10;            &quot;imageUrl&quot; to imageUrl&#10;        )&#10;        viewModelScope.launch {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .set(userMap)&#10;                .addOnSuccessListener { onSuccess() }&#10;                .addOnFailureListener { e -&gt; onFailure(e) }&#10;        }&#10;    }&#10;&#10;    fun updateGender(&#10;        gender: String,&#10;        onSuccess: () -&gt; Unit,&#10;        onFailure: (Exception) -&gt; Unit&#10;    ) {&#10;        val userId = auth.currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;gender&quot;, gender)&#10;                .addOnSuccessListener { onSuccess() }&#10;                .addOnFailureListener { e -&gt; onFailure(e) }&#10;        }&#10;    }&#10;&#10;    fun updateInterests(&#10;        interests: List&lt;String&gt;,&#10;        onSuccess: () -&gt; Unit,&#10;        onFailure: (Exception) -&gt; Unit&#10;    ) {&#10;        val userId = auth.currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;interests&quot;, interests)&#10;                .addOnSuccessListener { onSuccess() }&#10;                .addOnFailureListener { e -&gt; onFailure(e) }&#10;        }&#10;    }&#10;&#10;    fun updateJobLocationDescription(&#10;        job: String?,&#10;        location: String?,&#10;        description: String?,&#10;        onSuccess: () -&gt; Unit,&#10;        onFailure: (Exception) -&gt; Unit&#10;    ) {&#10;        val userId = auth.currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(mapOf(&#10;                    &quot;job&quot; to job,&#10;                    &quot;location&quot; to location,&#10;                    &quot;description&quot; to description&#10;                ))&#10;                .addOnSuccessListener { onSuccess() }&#10;                .addOnFailureListener { e -&gt; onFailure(e) }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_arrow_drop_down.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_arrow_drop_down.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#757575&quot;&#10;        android:pathData=&quot;M7,10l5,5 5,-5z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_avatar.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_avatar.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;120dp&quot;&#10;    android:height=&quot;120dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#CCCCCC&quot;&#10;        android:pathData=&quot;M12,12c2.67,0 8,1.34 8,4v2H4v-2c0-2.66 5.33-4 8-4zm0-2a4,4 0 1,0 0,-8 4,4 0 0,0 0,8z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>