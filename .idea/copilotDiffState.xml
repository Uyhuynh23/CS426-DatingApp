<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/CustomCalendarDialog.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/CustomCalendarDialog.kt" />
              <option name="originalContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.animation.*&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.KeyboardArrowLeft&#10;import androidx.compose.material.icons.filled.KeyboardArrowRight&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.window.Dialog&#10;import androidx.compose.ui.window.DialogProperties&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;import com.example.dating.ui.theme.AppColors&#10;&#10;@OptIn(ExperimentalAnimationApi::class)&#10;@Composable&#10;fun CustomCalendarDialog(&#10;    onDateSelected: (Date) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    var currentDate by remember { mutableStateOf(Calendar.getInstance()) }&#10;    var visibleMonth by remember { mutableStateOf(currentDate.timeInMillis) }&#10;    var selectedDate by remember { mutableStateOf&lt;Int?&gt;(null) }&#10;    var showYearPicker by remember { mutableStateOf(false) }&#10;    var showMonthPicker by remember { mutableStateOf(false) }&#10;    var animationDirection by remember { mutableStateOf(0) }&#10;&#10;    Dialog(&#10;        onDismissRequest = onDismiss,&#10;        properties = DialogProperties(usePlatformDefaultWidth = false)&#10;    ) {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            shape = RoundedCornerShape(20.dp),&#10;            colors = CardDefaults.cardColors(containerColor = Color.White)&#10;        ) {&#10;            Column(modifier = Modifier.padding(20.dp)) {&#10;&#10;                // Header&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&quot;Calendar&quot;, fontSize = 18.sp, fontWeight = FontWeight.Bold)&#10;                    TextButton(onClick = onDismiss) {&#10;                        Text(&quot;Skip&quot;, color = AppColors.Text_Pink, fontSize = 16.sp)&#10;                    }&#10;                }&#10;&#10;                Spacer(Modifier.height(20.dp))&#10;&#10;                Text(&#10;                    &quot;Birthday&quot;,&#10;                    fontSize = 16.sp,&#10;                    color = Color.Gray,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;&#10;                Spacer(Modifier.height(8.dp))&#10;&#10;                // Year &amp; Month with arrows&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    IconButton(onClick = {&#10;                        animationDirection = -1&#10;                        currentDate.add(Calendar.MONTH, -1)&#10;                        currentDate = currentDate.clone() as Calendar&#10;                        visibleMonth = currentDate.timeInMillis&#10;                        selectedDate = null&#10;                    }) {&#10;                        Icon(Icons.Default.KeyboardArrowLeft, contentDescription = null)&#10;                    }&#10;&#10;                    Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                        Text(&#10;                            &quot;${currentDate.get(Calendar.YEAR)}&quot;,&#10;                            fontSize = 24.sp,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = AppColors.Text_Pink,&#10;                            modifier = Modifier.clickable {&#10;                                showYearPicker = !showYearPicker&#10;                                showMonthPicker = false&#10;                            }&#10;                        )&#10;                        Text(&#10;                            SimpleDateFormat(&quot;MMMM&quot;, Locale.getDefault()).format(currentDate.time),&#10;                            fontSize = 16.sp,&#10;                            color = AppColors.Text_Pink,&#10;                            modifier = Modifier.clickable {&#10;                                showMonthPicker = !showMonthPicker&#10;                                showYearPicker = false&#10;                            }&#10;                        )&#10;                    }&#10;&#10;                    IconButton(onClick = {&#10;                        animationDirection = 1&#10;                        currentDate.add(Calendar.MONTH, 1)&#10;                        currentDate = currentDate.clone() as Calendar&#10;                        visibleMonth = currentDate.timeInMillis&#10;                        selectedDate = null&#10;                    }) {&#10;                        Icon(Icons.Default.KeyboardArrowRight, contentDescription = null)&#10;                    }&#10;                }&#10;&#10;                Spacer(Modifier.height(20.dp))&#10;&#10;                // Content&#10;                Box(Modifier.height(260.dp)) {&#10;                    when {&#10;                        showYearPicker -&gt; YearPicker(&#10;                            currentYear = currentDate.get(Calendar.YEAR),&#10;                            onYearSelected = { year -&gt;&#10;                                currentDate.set(Calendar.YEAR, year)&#10;                                currentDate = currentDate.clone() as Calendar&#10;                                visibleMonth = currentDate.timeInMillis&#10;                                showYearPicker = false&#10;                                selectedDate = null&#10;                            }&#10;                        )&#10;                        showMonthPicker -&gt; MonthPicker(&#10;                            currentMonth = currentDate.get(Calendar.MONTH),&#10;                            onMonthSelected = { month -&gt;&#10;                                currentDate.set(Calendar.MONTH, month)&#10;                                currentDate = currentDate.clone() as Calendar&#10;                                visibleMonth = currentDate.timeInMillis&#10;                                showMonthPicker = false&#10;                                selectedDate = null&#10;                            }&#10;                        )&#10;                        else -&gt; AnimatedContent(&#10;                            targetState = visibleMonth,&#10;                            transitionSpec = {&#10;                                if (animationDirection &gt;= 0) {&#10;                                    slideInHorizontally(initialOffsetX = { fullWidth -&gt; fullWidth }) + fadeIn() with&#10;                                            fadeOut(animationSpec = tween(150))&#10;                                } else {&#10;                                    slideInHorizontally(initialOffsetX = { fullWidth -&gt; -fullWidth }) + fadeIn() with&#10;                                            fadeOut(animationSpec = tween(150))&#10;                                }&#10;                            },&#10;                            label = &quot;CalendarSlide&quot;&#10;                        ) { targetTime -&gt;&#10;                            val monthCalendar = Calendar.getInstance().apply { timeInMillis = targetTime }&#10;                            CalendarGrid(&#10;                                currentDate = monthCalendar,&#10;                                selectedDate = selectedDate,&#10;                                onDateSelected = { selectedDate = it }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(Modifier.height(24.dp))&#10;&#10;                Button(&#10;                    onClick = {&#10;                        selectedDate?.let { day -&gt;&#10;                            val calendar = currentDate.clone() as Calendar&#10;                            calendar.set(Calendar.DAY_OF_MONTH, day)&#10;                            onDateSelected(calendar.time)&#10;                        }&#10;                    },&#10;                    enabled = selectedDate != null &amp;&amp; !showYearPicker &amp;&amp; !showMonthPicker,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(50.dp),&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = AppColors.Main_Secondary1,&#10;                        disabledContainerColor = Color.LightGray&#10;                    )&#10;                ) {&#10;                    Text(&quot;Save&quot;, color = AppColors.Main_Primary, fontSize = 16.sp, fontWeight = FontWeight.Medium)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CalendarGrid(&#10;    currentDate: Calendar,&#10;    selectedDate: Int?,&#10;    onDateSelected: (Int) -&gt; Unit&#10;) {&#10;    val calendar = currentDate.clone() as Calendar&#10;    calendar.set(Calendar.DAY_OF_MONTH, 1)&#10;    val firstDayOfWeek = calendar.get(Calendar.DAY_OF_WEEK) - 1&#10;    val daysInMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH)&#10;&#10;    // Luôn 42 ô để mượt&#10;    val totalCells = 42&#10;    val days = (0 until totalCells).map { index -&gt;&#10;        val dayNumber = index - firstDayOfWeek + 1&#10;        if (dayNumber in 1..daysInMonth) dayNumber else null&#10;    }&#10;&#10;    LazyVerticalGrid(&#10;        columns = GridCells.Fixed(7),&#10;        horizontalArrangement = Arrangement.spacedBy(4.dp),&#10;        verticalArrangement = Arrangement.spacedBy(4.dp),&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(264.dp),&#10;        userScrollEnabled = false&#10;    ) {&#10;        items(days.size) { index -&gt;&#10;            val day = days[index]&#10;            if (day == null) {&#10;                Box(modifier = Modifier.size(40.dp))&#10;            } else {&#10;                CalendarDay(&#10;                    day = day,&#10;                    isSelected = day == selectedDate,&#10;                    onClick = { onDateSelected(day) }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CalendarDay(day: Int, isSelected: Boolean, onClick: () -&gt; Unit) {&#10;    Box(&#10;        modifier = Modifier&#10;            .size(40.dp)&#10;            .clip(CircleShape)&#10;            .background(if (isSelected) AppColors.Main_Secondary1 else Color.Transparent)&#10;            .clickable { onClick() },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = day.toString(),&#10;            fontSize = 16.sp,&#10;            color = if (isSelected) AppColors.Main_Primary else Color.Black,&#10;            fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun YearPicker(currentYear: Int, onYearSelected: (Int) -&gt; Unit) {&#10;    val years = (1950..2010).toList()&#10;    var expanded by remember { mutableStateOf(false) }&#10;    ExposedDropdownMenuBox(&#10;        expanded = expanded,&#10;        onExpandedChange = { expanded = !expanded }&#10;    ) {&#10;        TextField(&#10;            value = currentYear.toString(),&#10;            onValueChange = {},&#10;            readOnly = true,&#10;            label = { Text(&quot;Year&quot;) },&#10;            trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) },&#10;            modifier = Modifier.menuAnchor().fillMaxWidth()&#10;        )&#10;        ExposedDropdownMenu(&#10;            expanded = expanded,&#10;            onDismissRequest = { expanded = false }&#10;        ) {&#10;            years.forEach { year -&gt;&#10;                DropdownMenuItem(&#10;                    text = { Text(year.toString()) },&#10;                    onClick = {&#10;                        onYearSelected(year)&#10;                        expanded = false&#10;                    },&#10;                    contentPadding = ExposedDropdownMenuDefaults.ItemContentPadding&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MonthPicker(currentMonth: Int, onMonthSelected: (Int) -&gt; Unit) {&#10;    val months = listOf(&#10;        &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;,&#10;        &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;&#10;    )&#10;    LazyVerticalGrid(&#10;        columns = GridCells.Fixed(3),&#10;        horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;        verticalArrangement = Arrangement.spacedBy(8.dp),&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        items(months.size) { index -&gt;&#10;            Box(&#10;                modifier = Modifier&#10;                    .height(40.dp)&#10;                    .clip(RoundedCornerShape(8.dp))&#10;                    .background(if (index == currentMonth) AppColors.Main_Secondary1 else Color(0xFFF5F5F5))&#10;                    .clickable { onMonthSelected(index) },&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = months[index].take(3),&#10;                    fontSize = 14.sp,&#10;                    color = if (index == currentMonth) AppColors.Main_Primary else Color.Black,&#10;                    fontWeight = if (index == currentMonth) FontWeight.Bold else FontWeight.Normal&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.animation.*&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.KeyboardArrowLeft&#10;import androidx.compose.material.icons.filled.KeyboardArrowRight&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.window.Dialog&#10;import androidx.compose.ui.window.DialogProperties&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;import com.example.dating.ui.theme.AppColors&#10;&#10;@OptIn(ExperimentalAnimationApi::class)&#10;@Composable&#10;fun CustomCalendarDialog(&#10;    onDateSelected: (Date) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    var currentDate by remember { mutableStateOf(Calendar.getInstance()) }&#10;    var visibleMonth by remember { mutableStateOf(currentDate.timeInMillis) }&#10;    var selectedDate by remember { mutableStateOf&lt;Int?&gt;(null) }&#10;    var showYearPicker by remember { mutableStateOf(false) }&#10;    var showMonthPicker by remember { mutableStateOf(false) }&#10;    var animationDirection by remember { mutableStateOf(0) }&#10;&#10;    Dialog(&#10;        onDismissRequest = onDismiss,&#10;        properties = DialogProperties(usePlatformDefaultWidth = false)&#10;    ) {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            shape = RoundedCornerShape(20.dp),&#10;            colors = CardDefaults.cardColors(containerColor = Color.White)&#10;        ) {&#10;            Column(modifier = Modifier.padding(20.dp)) {&#10;&#10;                // Header&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&quot;Calendar&quot;, fontSize = 18.sp, fontWeight = FontWeight.Bold)&#10;                    TextButton(onClick = onDismiss) {&#10;                        Text(&quot;Skip&quot;, color = AppColors.Text_Pink, fontSize = 16.sp)&#10;                    }&#10;                }&#10;&#10;                Spacer(Modifier.height(20.dp))&#10;&#10;                Text(&#10;                    &quot;Birthday&quot;,&#10;                    fontSize = 16.sp,&#10;                    color = Color.Gray,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;&#10;                Spacer(Modifier.height(8.dp))&#10;&#10;                // Year &amp; Month with arrows&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    IconButton(onClick = {&#10;                        animationDirection = -1&#10;                        currentDate.add(Calendar.MONTH, -1)&#10;                        currentDate = currentDate.clone() as Calendar&#10;                        visibleMonth = currentDate.timeInMillis&#10;                        selectedDate = null&#10;                    }) {&#10;                        Icon(Icons.Default.KeyboardArrowLeft, contentDescription = null)&#10;                    }&#10;&#10;                    Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                        Text(&#10;                            &quot;${currentDate.get(Calendar.YEAR)}&quot;,&#10;                            fontSize = 24.sp,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = AppColors.Text_Pink,&#10;                            modifier = Modifier.clickable {&#10;                                showYearPicker = !showYearPicker&#10;                                showMonthPicker = false&#10;                            }&#10;                        )&#10;                        Text(&#10;                            SimpleDateFormat(&quot;MMMM&quot;, Locale.getDefault()).format(currentDate.time),&#10;                            fontSize = 16.sp,&#10;                            color = AppColors.Text_Pink,&#10;                            modifier = Modifier.clickable {&#10;                                showMonthPicker = !showMonthPicker&#10;                                showYearPicker = false&#10;                            }&#10;                        )&#10;                    }&#10;&#10;                    IconButton(onClick = {&#10;                        animationDirection = 1&#10;                        currentDate.add(Calendar.MONTH, 1)&#10;                        currentDate = currentDate.clone() as Calendar&#10;                        visibleMonth = currentDate.timeInMillis&#10;                        selectedDate = null&#10;                    }) {&#10;                        Icon(Icons.Default.KeyboardArrowRight, contentDescription = null)&#10;                    }&#10;                }&#10;&#10;                Spacer(Modifier.height(20.dp))&#10;&#10;                // Content&#10;                Box(Modifier.height(260.dp)) {&#10;                    when {&#10;                        showYearPicker -&gt; YearPicker(&#10;                            currentYear = currentDate.get(Calendar.YEAR),&#10;                            onYearSelected = { year -&gt;&#10;                                currentDate.set(Calendar.YEAR, year)&#10;                                currentDate = currentDate.clone() as Calendar&#10;                                visibleMonth = currentDate.timeInMillis&#10;                                showYearPicker = false&#10;                                selectedDate = null&#10;                            }&#10;                        )&#10;                        showMonthPicker -&gt; MonthPicker(&#10;                            currentMonth = currentDate.get(Calendar.MONTH),&#10;                            onMonthSelected = { month -&gt;&#10;                                currentDate.set(Calendar.MONTH, month)&#10;                                currentDate = currentDate.clone() as Calendar&#10;                                visibleMonth = currentDate.timeInMillis&#10;                                showMonthPicker = false&#10;                                selectedDate = null&#10;                            }&#10;                        )&#10;                        else -&gt; AnimatedContent(&#10;                            targetState = visibleMonth,&#10;                            transitionSpec = {&#10;                                if (animationDirection &gt;= 0) {&#10;                                    slideInHorizontally(initialOffsetX = { fullWidth -&gt; fullWidth }) + fadeIn() with&#10;                                            fadeOut(animationSpec = tween(150))&#10;                                } else {&#10;                                    slideInHorizontally(initialOffsetX = { fullWidth -&gt; -fullWidth }) + fadeIn() with&#10;                                            fadeOut(animationSpec = tween(150))&#10;                                }&#10;                            },&#10;                            label = &quot;CalendarSlide&quot;&#10;                        ) { targetTime -&gt;&#10;                            val monthCalendar = Calendar.getInstance().apply { timeInMillis = targetTime }&#10;                            CalendarGrid(&#10;                                currentDate = monthCalendar,&#10;                                selectedDate = selectedDate,&#10;                                onDateSelected = { selectedDate = it }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(Modifier.height(24.dp))&#10;&#10;                Button(&#10;                    onClick = {&#10;                        selectedDate?.let { day -&gt;&#10;                            val calendar = currentDate.clone() as Calendar&#10;                            calendar.set(Calendar.DAY_OF_MONTH, day)&#10;                            onDateSelected(calendar.time)&#10;                        }&#10;                    },&#10;                    enabled = selectedDate != null &amp;&amp; !showYearPicker &amp;&amp; !showMonthPicker,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(50.dp),&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = AppColors.Main_Secondary1,&#10;                        disabledContainerColor = Color.LightGray&#10;                    )&#10;                ) {&#10;                    Text(&quot;Save&quot;, color = AppColors.Main_Primary, fontSize = 16.sp, fontWeight = FontWeight.Medium)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CalendarGrid(&#10;    currentDate: Calendar,&#10;    selectedDate: Int?,&#10;    onDateSelected: (Int) -&gt; Unit&#10;) {&#10;    val calendar = currentDate.clone() as Calendar&#10;    calendar.set(Calendar.DAY_OF_MONTH, 1)&#10;    val firstDayOfWeek = calendar.get(Calendar.DAY_OF_WEEK) - 1&#10;    val daysInMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH)&#10;&#10;    // Luôn 42 ô để mượt&#10;    val totalCells = 42&#10;    val days = (0 until totalCells).map { index -&gt;&#10;        val dayNumber = index - firstDayOfWeek + 1&#10;        if (dayNumber in 1..daysInMonth) dayNumber else null&#10;    }&#10;&#10;    LazyVerticalGrid(&#10;        columns = GridCells.Fixed(7),&#10;        horizontalArrangement = Arrangement.spacedBy(4.dp),&#10;        verticalArrangement = Arrangement.spacedBy(4.dp),&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(264.dp),&#10;        userScrollEnabled = false&#10;    ) {&#10;        items(days.size) { index -&gt;&#10;            val day = days[index]&#10;            if (day == null) {&#10;                Box(modifier = Modifier.size(40.dp))&#10;            } else {&#10;                CalendarDay(&#10;                    day = day,&#10;                    isSelected = day == selectedDate,&#10;                    onClick = { onDateSelected(day) }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CalendarDay(day: Int, isSelected: Boolean, onClick: () -&gt; Unit) {&#10;    Box(&#10;        modifier = Modifier&#10;            .size(40.dp)&#10;            .clip(CircleShape)&#10;            .background(if (isSelected) AppColors.Main_Secondary1 else Color.Transparent)&#10;            .clickable { onClick() },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = day.toString(),&#10;            fontSize = 16.sp,&#10;            color = if (isSelected) AppColors.Main_Primary else Color.Black,&#10;            fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun YearPicker(currentYear: Int, onYearSelected: (Int) -&gt; Unit) {&#10;    val years = (1950..2010).toList()&#10;    var expanded by remember { mutableStateOf(false) }&#10;    ExposedDropdownMenuBox(&#10;        expanded = expanded,&#10;        onExpandedChange = { expanded = !expanded }&#10;    ) {&#10;        TextField(&#10;            value = currentYear.toString(),&#10;            onValueChange = {},&#10;            readOnly = true,&#10;            label = { Text(&quot;Year&quot;) },&#10;            trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) },&#10;            modifier = Modifier.menuAnchor().fillMaxWidth()&#10;        )&#10;        ExposedDropdownMenu(&#10;            expanded = expanded,&#10;            onDismissRequest = { expanded = false }&#10;        ) {&#10;            years.forEach { year -&gt;&#10;                DropdownMenuItem(&#10;                    text = { Text(year.toString()) },&#10;                    onClick = {&#10;                        onYearSelected(year)&#10;                        expanded = false&#10;                    },&#10;                    contentPadding = ExposedDropdownMenuDefaults.ItemContentPadding&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MonthPicker(currentMonth: Int, onMonthSelected: (Int) -&gt; Unit) {&#10;    val months = listOf(&#10;        &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;,&#10;        &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;&#10;    )&#10;    LazyVerticalGrid(&#10;        columns = GridCells.Fixed(3),&#10;        horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;        verticalArrangement = Arrangement.spacedBy(8.dp),&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        items(months.size) { index -&gt;&#10;            Box(&#10;                modifier = Modifier&#10;                    .height(40.dp)&#10;                    .clip(RoundedCornerShape(8.dp))&#10;                    .background(if (index == currentMonth) AppColors.Main_Secondary1 else Color(0xFFF5F5F5))&#10;                    .clickable { onMonthSelected(index) },&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = months[index].take(3),&#10;                    fontSize = 14.sp,&#10;                    color = if (index == currentMonth) AppColors.Main_Primary else Color.Black,&#10;                    fontWeight = if (index == currentMonth) FontWeight.Bold else FontWeight.Normal&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/profile/ProfileDetailsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/profile/ProfileDetailsScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.profile&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import coil.compose.rememberAsyncImagePainter&#10;import com.example.dating.R&#10;import com.example.dating.ui.theme.AppColors&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.ui.draw.clip&#10;import com.example.dating.ui.components.CustomCalendarDialog&#10;import androidx.compose.foundation.gestures.detectTapGestures&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import androidx.compose.ui.input.pointer.pointerInteropFilter&#10;&#10;@Composable&#10;fun ProfileDetailsScreen(&#10;    navController: NavController&#10;) {&#10;    var isLoading by remember { mutableStateOf(true) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var profile by remember { mutableStateOf&lt;Map&lt;String, Any&gt;?&gt;(null) }&#10;    var isEditMode by remember { mutableStateOf(false) }&#10;    var showCalendar by remember { mutableStateOf(false) }&#10;&#10;    // All possible interests (same as InterestSelectionScreen)&#10;    val allInterests = listOf(&#10;        Interest(&quot;Photography&quot;, R.drawable.ic_interest_photography),&#10;        Interest(&quot;Shopping&quot;, R.drawable.ic_interest_shopping),&#10;        Interest(&quot;Karaoke&quot;, R.drawable.ic_interest_karaoke),&#10;        Interest(&quot;Yoga&quot;, R.drawable.ic_interest_yoga),&#10;        Interest(&quot;Cooking&quot;, R.drawable.ic_interest_cooking),&#10;        Interest(&quot;Tennis&quot;, R.drawable.ic_interest_tennis),&#10;        Interest(&quot;Run&quot;, R.drawable.ic_interest_run),&#10;        Interest(&quot;Swimming&quot;, R.drawable.ic_interest_swimming),&#10;        Interest(&quot;Art&quot;, R.drawable.ic_interest_art),&#10;        Interest(&quot;Traveling&quot;, R.drawable.ic_interest_travelling),&#10;        Interest(&quot;Extreme&quot;, R.drawable.ic_interest_extreme),&#10;        Interest(&quot;Music&quot;, R.drawable.ic_interest_music),&#10;        Interest(&quot;Drink&quot;, R.drawable.ic_interest_drink),&#10;        Interest(&quot;Video games&quot;, R.drawable.ic_interest_game)&#10;    )&#10;&#10;    LaunchedEffect(Unit) {&#10;        val userId = FirebaseAuth.getInstance().currentUser?.uid&#10;        if (userId == null) {&#10;            errorMessage = &quot;User not logged in.&quot;&#10;            isLoading = false&#10;            return@LaunchedEffect&#10;        }&#10;        try {&#10;            val doc = FirebaseFirestore.getInstance().collection(&quot;users&quot;).document(userId).get().await()&#10;            if (doc.exists()) {&#10;                profile = doc.data&#10;            } else {&#10;                errorMessage = &quot;Profile not found.&quot;&#10;            }&#10;        } catch (e: Exception) {&#10;            errorMessage = e.message&#10;        }&#10;        isLoading = false&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;    ) {&#10;        when {&#10;            isLoading -&gt; {&#10;                CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))&#10;            }&#10;            errorMessage != null -&gt; {&#10;                Text(&#10;                    text = errorMessage ?: &quot;Unknown error&quot;,&#10;                    color = Color.Red,&#10;                    modifier = Modifier.align(Alignment.Center)&#10;                )&#10;            }&#10;            profile != null -&gt; {&#10;                var editableFirstName by remember { mutableStateOf(profile!![&quot;firstName&quot;]?.toString() ?: &quot;&quot;) }&#10;                var editableLastName by remember { mutableStateOf(profile!![&quot;lastName&quot;]?.toString() ?: &quot;&quot;) }&#10;                var editableBirthday by remember { mutableStateOf(profile!![&quot;birthday&quot;]?.toString() ?: &quot;&quot;) }&#10;                var editableGender by remember { mutableStateOf(profile!![&quot;gender&quot;]?.toString() ?: &quot;&quot;) }&#10;                var selectedInterests = remember { ((profile!![&quot;interests&quot;] as? List&lt;*&gt;)?.map { it.toString() } ?: emptyList()).toMutableStateList() }&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .align(Alignment.TopCenter)&#10;                        .padding(48.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.End&#10;                    ) {&#10;                        TextButton(onClick = { isEditMode = !isEditMode }) {&#10;                            Text(&#10;                                text = if (isEditMode) &quot;Done&quot; else &quot;Edit Profile&quot;,&#10;                                color = AppColors.Text_Pink,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                        }&#10;                    }&#10;                    val imageUrl = profile!![&quot;imageUrl&quot;] as? String&#10;                    if (!imageUrl.isNullOrBlank()) {&#10;                        Image(&#10;                            painter = rememberAsyncImagePainter(&#10;                                model = imageUrl,&#10;                                error = painterResource(R.drawable.ic_avatar),&#10;                                placeholder = painterResource(R.drawable.ic_avatar)&#10;                            ),&#10;                            contentDescription = &quot;Profile Image&quot;,&#10;                            modifier = Modifier&#10;                                .size(120.dp)&#10;                                .padding(top = 16.dp, bottom = 16.dp),&#10;                            contentScale = ContentScale.Crop&#10;                        )&#10;                    } else {&#10;                        Image(&#10;                            painter = painterResource(R.drawable.ic_avatar),&#10;                            contentDescription = &quot;Default Avatar&quot;,&#10;                            modifier = Modifier&#10;                                .size(120.dp)&#10;                                .padding(bottom = 16.dp),&#10;                            contentScale = ContentScale.Crop&#10;                        )&#10;                    }&#10;                    Row(modifier = Modifier.fillMaxWidth()) {&#10;                        OutlinedTextField(&#10;                            value = editableFirstName,&#10;                            onValueChange = { if (isEditMode) editableFirstName = it },&#10;                            label = { Text(&quot;First Name&quot;) },&#10;                            modifier = Modifier&#10;                                .weight(1f)&#10;                                .padding(end = 4.dp, bottom = 8.dp),&#10;                            enabled = isEditMode,&#10;                            readOnly = !isEditMode&#10;                        )&#10;                        OutlinedTextField(&#10;                            value = editableLastName,&#10;                            onValueChange = { if (isEditMode) editableLastName = it },&#10;                            label = { Text(&quot;Last Name&quot;) },&#10;                            modifier = Modifier&#10;                                .weight(1f)&#10;                                .padding(start = 4.dp, bottom = 8.dp),&#10;                            enabled = isEditMode,&#10;                            readOnly = !isEditMode&#10;                        )&#10;                    }&#10;                    Row(modifier = Modifier.fillMaxWidth()) {&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .weight(1f)&#10;                                .padding(end = 4.dp, bottom = 8.dp)&#10;                                .clickable(enabled = isEditMode) { if (isEditMode) showCalendar = true }&#10;                        ) {&#10;                            OutlinedTextField(&#10;                                value = editableBirthday,&#10;                                onValueChange = {},&#10;                                label = { Text(&quot;Birthday&quot;) },&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                enabled = isEditMode, // Always enabled for proper color&#10;                                readOnly = true&#10;                            )&#10;                        }&#10;                        if (isEditMode) {&#10;                            var expanded by remember { mutableStateOf(false) }&#10;                            val genderOptions = listOf(&quot;Man&quot;, &quot;Woman&quot;, &quot;Other&quot;)&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .weight(1f)&#10;                                    .padding(start = 4.dp, bottom = 8.dp)&#10;                            ) {&#10;                                OutlinedTextField(&#10;                                    value = editableGender,&#10;                                    onValueChange = {},&#10;                                    label = { Text(&quot;Gender&quot;) },&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .then(if (isEditMode) Modifier.clickable { expanded = true } else Modifier),&#10;                                    enabled = isEditMode, // Always enabled for proper color&#10;                                    readOnly = true,&#10;                                    trailingIcon = {&#10;                                        IconButton(onClick = { if (isEditMode) expanded = true }) {&#10;                                            Icon(&#10;                                                painter = painterResource(id = com.example.dating.R.drawable.ic_arrow_drop_down),&#10;                                                contentDescription = &quot;Dropdown&quot;&#10;                                            )&#10;                                        }&#10;                                    }&#10;                                )&#10;                                DropdownMenu(&#10;                                    expanded = expanded,&#10;                                    onDismissRequest = { expanded = false }&#10;                                ) {&#10;                                    genderOptions.forEach { option -&gt;&#10;                                        DropdownMenuItem(&#10;                                            text = { Text(option) },&#10;                                            onClick = {&#10;                                                editableGender = option&#10;                                                expanded = false&#10;                                            }&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        } else {&#10;                            OutlinedTextField(&#10;                                value = editableGender,&#10;                                onValueChange = {},&#10;                                label = { Text(&quot;Gender&quot;) },&#10;                                modifier = Modifier&#10;                                    .weight(1f)&#10;                                    .padding(start = 4.dp, bottom = 8.dp),&#10;                                enabled = false,&#10;                                readOnly = true,&#10;                                colors = OutlinedTextFieldDefaults.colors(&#10;                                    disabledTextColor = Color.LightGray,&#10;                                    disabledLabelColor = Color.LightGray,&#10;                                    disabledBorderColor = Color.LightGray&#10;                                )&#10;                            )&#10;                        }&#10;                    }&#10;                    if (allInterests.isNotEmpty()) {&#10;                        Text(&#10;                            text = &quot;Interests:&quot;,&#10;                            fontSize = 18.sp,&#10;                            color = Color.DarkGray,&#10;                            modifier = Modifier.padding(bottom = 4.dp)&#10;                        )&#10;                        LazyVerticalGrid(&#10;                            columns = GridCells.Fixed(2),&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .weight(1f), // Take available vertical space&#10;                            verticalArrangement = Arrangement.spacedBy(16.dp),&#10;                            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                        ) {&#10;                            items(allInterests) { interest -&gt;&#10;                                val isSelected = selectedInterests.contains(interest.name)&#10;                                InterestItem(&#10;                                    interest = interest,&#10;                                    isSelected = isSelected,&#10;                                    onClick = {&#10;                                        if (isEditMode) {&#10;                                            if (isSelected) selectedInterests.remove(interest.name)&#10;                                            else selectedInterests.add(interest.name)&#10;                                        }&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;                if (showCalendar) {&#10;                    CustomCalendarDialog(&#10;                        onDateSelected = { selectedDate -&gt;&#10;                            editableBirthday = selectedDate.toString() // or format as needed&#10;                            showCalendar = false&#10;                        },&#10;                        onDismiss = { showCalendar = false }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.profile&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import coil.compose.rememberAsyncImagePainter&#10;import com.example.dating.R&#10;import com.example.dating.ui.theme.AppColors&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.ui.draw.clip&#10;import com.example.dating.ui.components.CustomCalendarDialog&#10;import androidx.compose.foundation.gestures.detectTapGestures&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import androidx.compose.ui.input.pointer.pointerInteropFilter&#10;import com.example.dating.viewmodel.ProfileViewModel&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;&#10;@Composable&#10;fun ProfileDetailsScreen(&#10;    navController: NavController&#10;) {&#10;    var isLoading by remember { mutableStateOf(true) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var profile by remember { mutableStateOf&lt;Map&lt;String, Any&gt;?&gt;(null) }&#10;    var isEditMode by remember { mutableStateOf(false) }&#10;    var showCalendar by remember { mutableStateOf(false) }&#10;    val profileViewModel: ProfileViewModel = viewModel()&#10;&#10;    // All possible interests (same as InterestSelectionScreen)&#10;    val allInterests = listOf(&#10;        Interest(&quot;Photography&quot;, R.drawable.ic_interest_photography),&#10;        Interest(&quot;Shopping&quot;, R.drawable.ic_interest_shopping),&#10;        Interest(&quot;Karaoke&quot;, R.drawable.ic_interest_karaoke),&#10;        Interest(&quot;Yoga&quot;, R.drawable.ic_interest_yoga),&#10;        Interest(&quot;Cooking&quot;, R.drawable.ic_interest_cooking),&#10;        Interest(&quot;Tennis&quot;, R.drawable.ic_interest_tennis),&#10;        Interest(&quot;Run&quot;, R.drawable.ic_interest_run),&#10;        Interest(&quot;Swimming&quot;, R.drawable.ic_interest_swimming),&#10;        Interest(&quot;Art&quot;, R.drawable.ic_interest_art),&#10;        Interest(&quot;Traveling&quot;, R.drawable.ic_interest_travelling),&#10;        Interest(&quot;Extreme&quot;, R.drawable.ic_interest_extreme),&#10;        Interest(&quot;Music&quot;, R.drawable.ic_interest_music),&#10;        Interest(&quot;Drink&quot;, R.drawable.ic_interest_drink),&#10;        Interest(&quot;Video games&quot;, R.drawable.ic_interest_game)&#10;    )&#10;&#10;    LaunchedEffect(Unit) {&#10;        val userId = FirebaseAuth.getInstance().currentUser?.uid&#10;        if (userId == null) {&#10;            errorMessage = &quot;User not logged in.&quot;&#10;            isLoading = false&#10;            return@LaunchedEffect&#10;        }&#10;        try {&#10;            val doc = FirebaseFirestore.getInstance().collection(&quot;users&quot;).document(userId).get().await()&#10;            if (doc.exists()) {&#10;                profile = doc.data&#10;            } else {&#10;                errorMessage = &quot;Profile not found.&quot;&#10;            }&#10;        } catch (e: Exception) {&#10;            errorMessage = e.message&#10;        }&#10;        isLoading = false&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;    ) {&#10;        when {&#10;            isLoading -&gt; {&#10;                CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))&#10;            }&#10;            errorMessage != null -&gt; {&#10;                Text(&#10;                    text = errorMessage ?: &quot;Unknown error&quot;,&#10;                    color = Color.Red,&#10;                    modifier = Modifier.align(Alignment.Center)&#10;                )&#10;            }&#10;            profile != null -&gt; {&#10;                var editableFirstName by remember { mutableStateOf(profile!![&quot;firstName&quot;]?.toString() ?: &quot;&quot;) }&#10;                var editableLastName by remember { mutableStateOf(profile!![&quot;lastName&quot;]?.toString() ?: &quot;&quot;) }&#10;                var editableBirthday by remember { mutableStateOf(profile!![&quot;birthday&quot;]?.toString() ?: &quot;&quot;) }&#10;                var editableGender by remember { mutableStateOf(profile!![&quot;gender&quot;]?.toString() ?: &quot;&quot;) }&#10;                var selectedInterests = remember { ((profile!![&quot;interests&quot;] as? List&lt;*&gt;)?.map { it.toString() } ?: emptyList()).toMutableStateList() }&#10;                var isSaving by remember { mutableStateOf(false) }&#10;                var saveError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .align(Alignment.TopCenter)&#10;                        .padding(48.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.End&#10;                    ) {&#10;                        TextButton(onClick = {&#10;                            if (isEditMode) {&#10;                                isSaving = true&#10;                                saveError = null&#10;                                profileViewModel.saveProfile(&#10;                                    editableFirstName,&#10;                                    editableLastName,&#10;                                    editableBirthday,&#10;                                    profile?.get(&quot;imageUrl&quot;) as? String,&#10;                                    onSuccess = {&#10;                                        profileViewModel.updateGender(&#10;                                            editableGender,&#10;                                            onSuccess = {&#10;                                                profileViewModel.updateInterests(&#10;                                                    selectedInterests,&#10;                                                    onSuccess = {&#10;                                                        isSaving = false&#10;                                                        isEditMode = false&#10;                                                    },&#10;                                                    onFailure = { e -&gt;&#10;                                                        isSaving = false&#10;                                                        saveError = e.message&#10;                                                    }&#10;                                                )&#10;                                            },&#10;                                            onFailure = { e -&gt;&#10;                                                isSaving = false&#10;                                                saveError = e.message&#10;                                            }&#10;                                        )&#10;                                    },&#10;                                    onFailure = { e -&gt;&#10;                                        isSaving = false&#10;                                        saveError = e.message&#10;                                    }&#10;                                )&#10;                            } else {&#10;                                isEditMode = true&#10;                            }&#10;                        }) {&#10;                            Text(&#10;                                text = if (isEditMode) &quot;Done&quot; else &quot;Edit Profile&quot;,&#10;                                color = AppColors.Text_Pink,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                        }&#10;                    }&#10;                    if (isSaving) {&#10;                        CircularProgressIndicator(modifier = Modifier.align(Alignment.CenterHorizontally))&#10;                    }&#10;                    if (saveError != null) {&#10;                        Text(&#10;                            text = saveError ?: &quot;Unknown error&quot;,&#10;                            color = Color.Red,&#10;                            modifier = Modifier.align(Alignment.CenterHorizontally)&#10;                        )&#10;                    }&#10;                    val imageUrl = profile!![&quot;imageUrl&quot;] as? String&#10;                    if (!imageUrl.isNullOrBlank()) {&#10;                        Image(&#10;                            painter = rememberAsyncImagePainter(&#10;                                model = imageUrl,&#10;                                error = painterResource(R.drawable.ic_avatar),&#10;                                placeholder = painterResource(R.drawable.ic_avatar)&#10;                            ),&#10;                            contentDescription = &quot;Profile Image&quot;,&#10;                            modifier = Modifier&#10;                                .size(120.dp)&#10;                                .padding(top = 16.dp, bottom = 16.dp),&#10;                            contentScale = ContentScale.Crop&#10;                        )&#10;                    } else {&#10;                        Image(&#10;                            painter = painterResource(R.drawable.ic_avatar),&#10;                            contentDescription = &quot;Default Avatar&quot;,&#10;                            modifier = Modifier&#10;                                .size(120.dp)&#10;                                .padding(bottom = 16.dp),&#10;                            contentScale = ContentScale.Crop&#10;                        )&#10;                    }&#10;                    Row(modifier = Modifier.fillMaxWidth()) {&#10;                        OutlinedTextField(&#10;                            value = editableFirstName,&#10;                            onValueChange = { if (isEditMode) editableFirstName = it },&#10;                            label = { Text(&quot;First Name&quot;) },&#10;                            modifier = Modifier&#10;                                .weight(1f)&#10;                                .padding(end = 4.dp, bottom = 8.dp),&#10;                            enabled = isEditMode,&#10;                            readOnly = !isEditMode&#10;                        )&#10;                        OutlinedTextField(&#10;                            value = editableLastName,&#10;                            onValueChange = { if (isEditMode) editableLastName = it },&#10;                            label = { Text(&quot;Last Name&quot;) },&#10;                            modifier = Modifier&#10;                                .weight(1f)&#10;                                .padding(start = 4.dp, bottom = 8.dp),&#10;                            enabled = isEditMode,&#10;                            readOnly = !isEditMode&#10;                        )&#10;                    }&#10;                    Row(modifier = Modifier.fillMaxWidth()) {&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .weight(1f)&#10;                                .padding(end = 4.dp, bottom = 8.dp)&#10;                                .clickable(enabled = isEditMode) { if (isEditMode) showCalendar = true }&#10;                        ) {&#10;                            OutlinedTextField(&#10;                                value = editableBirthday,&#10;                                onValueChange = {},&#10;                                label = { Text(&quot;Birthday&quot;) },&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                enabled = isEditMode, // Always enabled for proper color&#10;                                readOnly = true&#10;                            )&#10;                        }&#10;                        if (isEditMode) {&#10;                            var expanded by remember { mutableStateOf(false) }&#10;                            val genderOptions = listOf(&quot;Man&quot;, &quot;Woman&quot;, &quot;Other&quot;)&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .weight(1f)&#10;                                    .padding(start = 4.dp, bottom = 8.dp)&#10;                            ) {&#10;                                OutlinedTextField(&#10;                                    value = editableGender,&#10;                                    onValueChange = {},&#10;                                    label = { Text(&quot;Gender&quot;) },&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .then(if (isEditMode) Modifier.clickable { expanded = true } else Modifier),&#10;                                    enabled = isEditMode, // Always enabled for proper color&#10;                                    readOnly = true,&#10;                                    trailingIcon = {&#10;                                        IconButton(onClick = { if (isEditMode) expanded = true }) {&#10;                                            Icon(&#10;                                                painter = painterResource(id = com.example.dating.R.drawable.ic_arrow_drop_down),&#10;                                                contentDescription = &quot;Dropdown&quot;&#10;                                            )&#10;                                        }&#10;                                    }&#10;                                )&#10;                                DropdownMenu(&#10;                                    expanded = expanded,&#10;                                    onDismissRequest = { expanded = false }&#10;                                ) {&#10;                                    genderOptions.forEach { option -&gt;&#10;                                        DropdownMenuItem(&#10;                                            text = { Text(option) },&#10;                                            onClick = {&#10;                                                editableGender = option&#10;                                                expanded = false&#10;                                            }&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        } else {&#10;                            OutlinedTextField(&#10;                                value = editableGender,&#10;                                onValueChange = {},&#10;                                label = { Text(&quot;Gender&quot;) },&#10;                                modifier = Modifier&#10;                                    .weight(1f)&#10;                                    .padding(start = 4.dp, bottom = 8.dp),&#10;                                enabled = false,&#10;                                readOnly = true,&#10;                                colors = OutlinedTextFieldDefaults.colors(&#10;                                    disabledTextColor = Color.LightGray,&#10;                                    disabledLabelColor = Color.LightGray,&#10;                                    disabledBorderColor = Color.LightGray&#10;                                )&#10;                            )&#10;                        }&#10;                    }&#10;                    if (allInterests.isNotEmpty()) {&#10;                        Text(&#10;                            text = &quot;Interests:&quot;,&#10;                            fontSize = 18.sp,&#10;                            color = Color.DarkGray,&#10;                            modifier = Modifier.padding(bottom = 4.dp)&#10;                        )&#10;                        LazyVerticalGrid(&#10;                            columns = GridCells.Fixed(2),&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .weight(1f), // Take available vertical space&#10;                            verticalArrangement = Arrangement.spacedBy(16.dp),&#10;                            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                        ) {&#10;                            items(allInterests) { interest -&gt;&#10;                                val isSelected = selectedInterests.contains(interest.name)&#10;                                InterestItem(&#10;                                    interest = interest,&#10;                                    isSelected = isSelected,&#10;                                    onClick = {&#10;                                        if (isEditMode) {&#10;                                            if (isSelected) selectedInterests.remove(interest.name)&#10;                                            else selectedInterests.add(interest.name)&#10;                                        }&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;                if (showCalendar) {&#10;                    CustomCalendarDialog(&#10;                        onDateSelected = { selectedDate -&gt;&#10;                            editableBirthday = selectedDate.toString() // or format as needed&#10;                            showCalendar = false&#10;                        },&#10;                        onDismiss = { showCalendar = false }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_arrow_drop_down.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_arrow_drop_down.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#757575&quot;&#10;        android:pathData=&quot;M7,10l5,5 5,-5z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_avatar.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_avatar.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;120dp&quot;&#10;    android:height=&quot;120dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#CCCCCC&quot;&#10;        android:pathData=&quot;M12,12c2.67,0 8,1.34 8,4v2H4v-2c0-2.66 5.33-4 8-4zm0-2a4,4 0 1,0 0,-8 4,4 0 0,0 0,8z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>