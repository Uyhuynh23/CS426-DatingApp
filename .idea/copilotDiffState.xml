<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/MatchRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/MatchRepository.kt" />
              <option name="updatedContent" value="package com.example.dating.data&#10;&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class MatchRepository {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    suspend fun saveMatch(userId1: String, userId2: String, status: Boolean) {&#10;        // Ensure userId1 &lt; userId2 alphabetically&#10;        val (firstId, secondId) = if (userId1 &lt; userId2) userId1 to userId2 else userId2 to userId1&#10;        val matchData = hashMapOf(&#10;            &quot;userId1&quot; to firstId,&#10;            &quot;userId2&quot; to secondId,&#10;            &quot;timestamp&quot; to Timestamp.now(),&#10;            &quot;status&quot; to status&#10;        )&#10;        // Check for duplicate (userId1/userId2 only)&#10;        val query = db.collection(&quot;match&quot;)&#10;            .whereEqualTo(&quot;userId1&quot;, firstId)&#10;            .whereEqualTo(&quot;userId2&quot;, secondId)&#10;            .get().await()&#10;        android.util.Log.d(&quot;MatchRepository&quot;, &quot;MatchQuery: userId1=$firstId, userId2=$secondId, resultCount=${query.size()}&quot;)&#10;        if (query.isEmpty) {&#10;            db.collection(&quot;match&quot;).add(matchData)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/Interest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/Interest.kt" />
              <option name="originalContent" value="package com.example.dating.data.model&#10;&#10;class Interest {&#10;}" />
              <option name="updatedContent" value="package com.example.dating.data.model&#10;&#10;data class Interest(&#10;    val name: String,&#10;    val icon: Int&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/User.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/User.kt" />
              <option name="originalContent" value="package com.example.dating.data.model&#10;&#10;data class User(&#10;    val uid: String = &quot;&quot;,&#10;    val firstName: String = &quot;&quot;,&#10;    val lastName: String = &quot;&quot;,&#10;    val birthday: String? = null,&#10;    val imageUrl: List&lt;String&gt; = emptyList(),&#10;    val avatarUrl: String? = null,&#10;    val gender: String? = null,&#10;    val job: String? = null,&#10;    val location: String? = null,&#10;    val description: String? = null,&#10;    val interests: List&lt;String&gt; = emptyList()&#10;)" />
              <option name="updatedContent" value="package com.example.dating.data.model&#10;&#10;data class User(&#10;    val uid: String = &quot;&quot;,&#10;    val firstName: String = &quot;&quot;,&#10;    val lastName: String = &quot;&quot;,&#10;    val birthday: String? = null,&#10;    val imageUrl: List&lt;String&gt; = emptyList(),&#10;    val avatarUrl: String? = null,&#10;    val gender: String? = null,&#10;    val job: String? = null,&#10;    val location: String? = null,&#10;    val description: String? = null,&#10;    val interests: List&lt;String&gt; = emptyList(),&#10;    val distance: Int? = null&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/FavoriteRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/FavoriteRepository.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class FavoriteRepository {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    suspend fun addFavorite(likerId: String, likedId: String): Boolean {&#10;        val favorite = hashMapOf(&#10;            &quot;likerId&quot; to likerId,&#10;            &quot;likedId&quot; to likedId,&#10;            &quot;timestamp&quot; to Timestamp.now()&#10;        )&#10;        val query = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likerId&quot;, likerId)&#10;            .whereEqualTo(&quot;likedId&quot;, likedId)&#10;            .get().await()&#10;        return if (query.isEmpty) {&#10;            db.collection(&quot;favorites&quot;).add(favorite)&#10;            true&#10;        } else {&#10;            false&#10;        }&#10;    }&#10;&#10;    suspend fun isMatch(likerId: String, likedId: String): Boolean {&#10;        val matchQuery = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likerId&quot;, likedId)&#10;            .whereEqualTo(&quot;likedId&quot;, likerId)&#10;            .get().await()&#10;        return !matchQuery.isEmpty&#10;    }&#10;&#10;    suspend fun deleteFavorite(likerId: String, likedId: String) {&#10;        val query = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likerId&quot;, likerId)&#10;            .whereEqualTo(&quot;likedId&quot;, likedId)&#10;            .get().await()&#10;        for (doc in query.documents) {&#10;            db.collection(&quot;favorites&quot;).document(doc.id).delete().await()&#10;        }&#10;    }&#10;&#10;    suspend fun getFavoritesByLikedId(likedId: String): List&lt;Map&lt;String, Any&gt;&gt; {&#10;        val query = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likedId&quot;, likedId)&#10;            .get().await()&#10;        return query.documents.mapNotNull { it.data }&#10;    }&#10;&#10;    suspend fun getUserProfilesByIds(userIds: List&lt;String&gt;): List&lt;Map&lt;String, Any&gt;&gt; {&#10;        if (userIds.isEmpty()) return emptyList()&#10;        val snapshot = db.collection(&quot;users&quot;)&#10;            .whereIn(com.google.firebase.firestore.FieldPath.documentId(), userIds.take(9))&#10;            .get().await()&#10;        return snapshot.documents.mapNotNull { it.data?.plus(&quot;uid&quot; to it.id) }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class FavoriteRepository {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    suspend fun addFavorite(likerId: String, likedId: String): Boolean {&#10;        val favorite = hashMapOf(&#10;            &quot;likerId&quot; to likerId,&#10;            &quot;likedId&quot; to likedId,&#10;            &quot;timestamp&quot; to Timestamp.now()&#10;        )&#10;        val query = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likerId&quot;, likerId)&#10;            .whereEqualTo(&quot;likedId&quot;, likedId)&#10;            .get().await()&#10;        return if (query.isEmpty) {&#10;            db.collection(&quot;favorites&quot;).add(favorite)&#10;            true&#10;        } else {&#10;            false&#10;        }&#10;    }&#10;&#10;    suspend fun isMatch(likerId: String, likedId: String): Boolean {&#10;        val matchQuery = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likerId&quot;, likedId)&#10;            .whereEqualTo(&quot;likedId&quot;, likerId)&#10;            .get().await()&#10;        return !matchQuery.isEmpty&#10;    }&#10;&#10;    suspend fun deleteFavorite(likerId: String, likedId: String) {&#10;        val query = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likerId&quot;, likerId)&#10;            .whereEqualTo(&quot;likedId&quot;, likedId)&#10;            .get().await()&#10;        for (doc in query.documents) {&#10;            db.collection(&quot;favorites&quot;).document(doc.id).delete().await()&#10;        }&#10;    }&#10;&#10;    suspend fun getFavoritesByLikedId(likedId: String): List&lt;Map&lt;String, Any&gt;&gt; {&#10;        val query = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likedId&quot;, likedId)&#10;            .get().await()&#10;        return query.documents.mapNotNull { it.data }&#10;    }&#10;&#10;    suspend fun getUserProfilesByIds(userIds: List&lt;String&gt;): List&lt;User&gt; {&#10;        if (userIds.isEmpty()) return emptyList()&#10;        val snapshot = db.collection(&quot;users&quot;)&#10;            .whereIn(com.google.firebase.firestore.FieldPath.documentId(), userIds.take(9))&#10;            .get().await()&#10;        return snapshot.documents.mapNotNull { doc -&gt;&#10;            val data = doc.data ?: return@mapNotNull null&#10;            User(&#10;                uid = doc.id,&#10;                firstName = data[&quot;firstName&quot;] as? String ?: &quot;&quot;,&#10;                lastName = data[&quot;lastName&quot;] as? String ?: &quot;&quot;,&#10;                birthday = data[&quot;birthday&quot;] as? String,&#10;                imageUrl = (data[&quot;imageUrl&quot;] as? List&lt;String&gt;) ?: emptyList(),&#10;                avatarUrl = data[&quot;avatarUrl&quot;] as? String,&#10;                gender = data[&quot;gender&quot;] as? String,&#10;                job = data[&quot;job&quot;] as? String,&#10;                location = data[&quot;location&quot;] as? String,&#10;                description = data[&quot;description&quot;] as? String,&#10;                interests = (data[&quot;interests&quot;] as? List&lt;String&gt;) ?: emptyList(),&#10;                distance = (data[&quot;distance&quot;] as? Long)?.toInt()&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepositoryImpl.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;) : UserRepository {&#10;&#10;    fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            offer(snapshot?.toObject(User::class.java))&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    override suspend fun updateUser(user: User) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun saveProfile(&#10;        userId: String,&#10;        firstName: String,&#10;        lastName: String,&#10;        birthday: String?,&#10;        imageUrl: String?&#10;    ): Resource&lt;Unit&gt; {&#10;        return try {&#10;            val userMap = hashMapOf(&#10;                &quot;firstName&quot; to firstName,&#10;                &quot;lastName&quot; to lastName,&#10;                &quot;birthday&quot; to birthday,&#10;                &quot;imageUrl&quot; to imageUrl&#10;            )&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .set(userMap)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateGender(userId: String, gender: String): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;gender&quot;, gender)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateInterests(userId: String, interests: List&lt;String&gt;): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;interests&quot;, interests)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateJobLocationDescription(&#10;        userId: String,&#10;        job: String?,&#10;        location: String?,&#10;        description: String?&#10;    ): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(mapOf(&#10;                    &quot;job&quot; to job,&#10;                    &quot;location&quot; to location,&#10;                    &quot;description&quot; to description&#10;                ))&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;) : UserRepository {&#10;&#10;    override fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            trySend(snapshot?.toObject(User::class.java))&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    override suspend fun updateUser(user: User) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun saveProfile(&#10;        user: User&#10;    ) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun updateGender(uid: String, gender: String) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&quot;gender&quot;, gender).await()&#10;    }&#10;&#10;    override suspend fun updateInterests(uid: String, interests: List&lt;String&gt;) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&quot;interests&quot;, interests).await()&#10;    }&#10;&#10;    override suspend fun updateJobLocationDescription(uid: String, job: String?, location: String?, description: String?) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&#10;            mapOf(&#10;                &quot;job&quot; to job,&#10;                &quot;location&quot; to location,&#10;                &quot;description&quot; to description&#10;            )&#10;        ).await()&#10;    }&#10;&#10;    override suspend fun uploadAvatar(uid: String, uri: android.net.Uri): String {&#10;        // TODO: Implement Firebase Storage upload and return the URL&#10;        return &quot;&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/FilterDialog.kt.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/FilterDialog.kt.kt" />
              <option name="originalContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FilterScreen(navController: NavController) {&#10;    // State variables&#10;    var selectedInterest by remember { mutableStateOf(&quot;Girls&quot;) }&#10;    var location by remember { mutableStateOf(&quot;Chicago, USA&quot;) }&#10;    var distance by remember { mutableFloatStateOf(40f) }&#10;    var ageRange by remember { mutableStateOf(20f..28f) }&#10;&#10;    // Bottom sheet or dialog content&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .wrapContentHeight()&#10;            .clip(RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp))&#10;            .background(Color.White)&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        // Notch&#10;        Box(&#10;            modifier = Modifier&#10;                .width(40.dp)&#10;                .height(4.dp)&#10;                .background(Color.Gray.copy(alpha = 0.5f), CircleShape)&#10;                .align(Alignment.CenterHorizontally)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Title and Clear&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Filters&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.Black&#10;            )&#10;            TextButton(onClick = { /* TODO: Clear filters */ }) {&#10;                Text(&#10;                    text = &quot;Clear&quot;,&#10;                    color = Color(0xFFFF69B4), // Pink&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Interested in&#10;        Text(&#10;            text = &quot;Interested in&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        SegmentedButtonRow(modifier = Modifier.fillMaxWidth()) {&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Girls&quot;,&#10;                onClick = { selectedInterest = &quot;Girls&quot; },&#10;                shape = RoundedCornerShape(topStart = 8.dp, bottomStart = 8.dp)&#10;            ) {&#10;                Text(&quot;Girls&quot;)&#10;            }&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Boys&quot;,&#10;                onClick = { selectedInterest = &quot;Boys&quot; },&#10;                shape = RoundedCornerShape(0.dp)&#10;            ) {&#10;                Text(&quot;Boys&quot;)&#10;            }&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Both&quot;,&#10;                onClick = { selectedInterest = &quot;Both&quot; },&#10;                shape = RoundedCornerShape(topEnd = 8.dp, bottomEnd = 8.dp)&#10;            ) {&#10;                Text(&quot;Both&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Location&#10;        Text(&#10;            text = &quot;Location&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        OutlinedTextField(&#10;            value = location,&#10;            onValueChange = { /* Read-only, tap to select */ },&#10;            readOnly = true,&#10;            modifier = Modifier.fillMaxWidth(),&#10;            trailingIcon = {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowForward,&#10;                    contentDescription = &quot;Select location&quot;,&#10;                    tint = Color(0xFFFF0000) // Red&#10;                )&#10;            },&#10;            singleLine = true,&#10;            interactionSource = remember { MutableInteractionSource() }.also { interactionSource -&gt;&#10;                // TODO: Handle click to open location selector&#10;            }&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Distance&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;Distance&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;            Text(&#10;                text = &quot;${distance.toInt()}km&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;        Slider(&#10;            value = distance,&#10;            onValueChange = { distance = it },&#10;            valueRange = 0f..100f, // Assuming max 100km&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = SliderDefaults.colors(&#10;                thumbColor = Color(0xFFBB86FC), // Purple&#10;                activeTrackColor = Color(0xFFBB86FC),&#10;                inactiveTrackColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Age&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;Age&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;            Text(&#10;                text = &quot;${ageRange.start.toInt()}-${ageRange.endInclusive.toInt()}&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;        RangeSlider(&#10;            value = ageRange,&#10;            onValueChange = { ageRange = it },&#10;            valueRange = 18f..100f, // Assuming age range&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = SliderDefaults.colors(&#10;                thumbColor = Color(0xFFBB86FC), // Purple&#10;                activeTrackColor = Color(0xFFBB86FC),&#10;                inactiveTrackColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // Continue button&#10;        Button(&#10;            onClick = { /* TODO: Apply filters and navigate */ },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(48.dp),&#10;            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFBB86FC).copy(alpha = 0.2f)), // Light purple&#10;            shape = RoundedCornerShape(24.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Continue&quot;,&#10;                color = Color.Black,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FilterDialog(&#10;    show: Boolean,&#10;    onDismiss: () -&gt; Unit,&#10;    onApply: (selectedInterest: String, location: String, distance: Float, ageRange: ClosedFloatingPointRange&lt;Float&gt;) -&gt; Unit&#10;) {&#10;    if (!show) return&#10;    var selectedInterest by remember { mutableStateOf(&quot;Girls&quot;) }&#10;    var location by remember { mutableStateOf(&quot;Chicago, USA&quot;) }&#10;    var distance by remember { mutableStateOf(40f) }&#10;    var ageRange by remember { mutableStateOf(20f..28f) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    onApply(selectedInterest, location, distance, ageRange)&#10;                    onDismiss()&#10;                },&#10;                modifier = Modifier.fillMaxWidth().height(48.dp),&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFBB86FC).copy(alpha = 0.2f)),&#10;                shape = RoundedCornerShape(24.dp)&#10;            ) {&#10;                Text(&quot;Continue&quot;, color = Color.Black, fontSize = 16.sp, fontWeight = FontWeight.Bold)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;, color = Color.Gray)&#10;            }&#10;        },&#10;        title = {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&quot;Filters&quot;, fontSize = 20.sp, fontWeight = FontWeight.Bold, color = Color.Black)&#10;                TextButton(onClick = {&#10;                    selectedInterest = &quot;Girls&quot;&#10;                    location = &quot;Chicago, USA&quot;&#10;                    distance = 40f&#10;                    ageRange = 20f..28f&#10;                }) {&#10;                    Text(&quot;Clear&quot;, color = Color(0xFFFF69B4), fontSize = 16.sp)&#10;                }&#10;            }&#10;        },&#10;        text = {&#10;            Column(modifier = Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {&#10;                // Interested in&#10;                Text(&quot;Interested in&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.Center) {&#10;                    FilterSegmentButton(&quot;Girls&quot;, selectedInterest == &quot;Girls&quot;) { selectedInterest = &quot;Girls&quot; }&#10;                    FilterSegmentButton(&quot;Boys&quot;, selectedInterest == &quot;Boys&quot;) { selectedInterest = &quot;Boys&quot; }&#10;                    FilterSegmentButton(&quot;Both&quot;, selectedInterest == &quot;Both&quot;) { selectedInterest = &quot;Both&quot; }&#10;                }&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Location&#10;                Text(&quot;Location&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                OutlinedTextField(&#10;                    value = location,&#10;                    onValueChange = { location = it },&#10;                    readOnly = false,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    trailingIcon = {&#10;                        Icon(imageVector = Icons.Default.ArrowForward, contentDescription = &quot;Select location&quot;, tint = Color(0xFFFF0000))&#10;                    },&#10;                    singleLine = true&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Distance&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Distance&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${distance.toInt()}km&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                Slider(&#10;                    value = distance,&#10;                    onValueChange = { distance = it },&#10;                    valueRange = 0f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = Color(0xFFBB86FC),&#10;                        activeTrackColor = Color(0xFFBB86FC),&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Age&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Age&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${ageRange.start.toInt()}-${ageRange.endInclusive.toInt()}&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                RangeSlider(&#10;                    value = ageRange,&#10;                    onValueChange = { ageRange = it },&#10;                    valueRange = 18f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = Color(0xFFBB86FC),&#10;                        activeTrackColor = Color(0xFFBB86FC),&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;            }&#10;        },&#10;        shape = RoundedCornerShape(24.dp),&#10;        containerColor = Color.White&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun FilterSegmentButton(text: String, selected: Boolean, onClick: () -&gt; Unit) {&#10;    Button(&#10;        onClick = onClick,&#10;        colors = ButtonDefaults.buttonColors(&#10;            containerColor = if (selected) Color(0xFFBB86FC) else Color.LightGray,&#10;            contentColor = if (selected) Color.White else Color.Black&#10;        ),&#10;        modifier = Modifier&#10;            .weight(1f)&#10;            .height(36.dp)&#10;            .padding(horizontal = 2.dp),&#10;        shape = RoundedCornerShape(8.dp)&#10;    ) {&#10;        Text(text)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/FavoriteScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/FavoriteScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material.icons.filled.ViewModule&#10;import androidx.compose.material.icons.filled.Chat&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.viewmodel.FavoriteViewModel&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.navigation.NavController&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;&#10;@Composable&#10;fun FavoriteScreen(navController: NavController) {&#10;    val favoriteViewModel: FavoriteViewModel = viewModel()&#10;    val likedMeProfilesResource by favoriteViewModel.likedMeProfiles.collectAsState()&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(AppColors.MainBackground)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .verticalScroll(rememberScrollState())&#10;        ) {&#10;            FavoriteHeader(navController)&#10;            when (likedMeProfilesResource) {&#10;                is Resource.Loading -&gt; {&#10;                    Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                        CircularProgressIndicator()&#10;                    }&#10;                }&#10;                is Resource.Failure -&gt; {&#10;                    val error = (likedMeProfilesResource as Resource.Failure).exception.message ?: &quot;Unknown error&quot;&#10;                    Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                        Text(&quot;Error: $error&quot;, color = Color.Red)&#10;                    }&#10;                }&#10;                is Resource.Success -&gt; {&#10;                    val users = (likedMeProfilesResource as Resource.Success&lt;List&lt;User&gt;&gt;).result&#10;                    if (users.isEmpty()) {&#10;                        Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                            Text(&quot;No users found&quot;, color = Color.Gray)&#10;                        }&#10;                    } else {&#10;                        Text(&quot;This is a list of people who have liked you.&quot;, fontSize = 16.sp, modifier = Modifier.padding(start = 32.dp, top = 8.dp, bottom = 8.dp, end = 16.dp), color = Color.Black)&#10;                        ProfileGrid(&#10;                            profiles = users.map { user -&gt; mapOf(&quot;uid&quot; to user.uid, &quot;firstName&quot; to user.firstName, &quot;lastName&quot; to user.lastName, &quot;birthday&quot; to user.birthday) },&#10;                            navController = navController,&#10;                            showDelete = false,&#10;                            moreAvailable = users.size &gt;= 9,&#10;                            onMoreClick = { /* TODO: Show all likedMeProfiles */ }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        Box(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .fillMaxWidth()&#10;        ) {&#10;            FavoriteBottomNavigationBar(navController)&#10;        }&#10;    }&#10;&#10;}&#10;&#10;@Composable&#10;fun FavoriteHeader(navController: NavController) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(start = 48.dp, end = 48.dp, top = 40.dp, bottom = 30.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;&#10;        Text(&#10;            text = &quot;Matches&quot;,&#10;            color = Color.Black,&#10;            fontWeight = FontWeight.Bold,&#10;            fontSize = 30.sp&#10;        )&#10;&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileGrid(&#10;    profiles: List&lt;Map&lt;String, Any&gt;&gt;,&#10;    navController: NavController,&#10;    showDelete: Boolean,&#10;    moreAvailable: Boolean,&#10;    onDelete: ((Map&lt;String, Any&gt;) -&gt; Unit)? = null,&#10;    onMoreClick: () -&gt; Unit&#10;) {&#10;    var showAll by remember { mutableStateOf(false) }&#10;    val profilesToShow = if (showAll) profiles else profiles.take(6)&#10;    val rowCount = if (showAll) (profilesToShow.size + 1) / 2 else 3&#10;    Column(modifier = Modifier.fillMaxWidth().padding(16.dp)) {&#10;        for (row in 0 until rowCount) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp),&#10;            ) {&#10;                for (col in 0 until 2) {&#10;                    val idx = row * 2 + col&#10;                    val profile = profilesToShow.getOrNull(idx)&#10;                    if (profile != null) {&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .padding(8.dp)&#10;                                .weight(1f)&#10;                                .height(220.dp)&#10;                                .clip(RoundedCornerShape(24.dp))&#10;                                .background(Color(0xFF23222B))&#10;                                .clickable {&#10;                                    navController.navigate(&quot;profile_display/${profile[&quot;uid&quot;]}&quot;)&#10;                                }&#10;                        ) {&#10;                            // Profile image placeholder&#10;                            Image(&#10;                                imageVector = Icons.Default.Person,&#10;                                contentDescription = &quot;Profile&quot;,&#10;                                modifier = Modifier&#10;                                    .size(80.dp)&#10;                                    .align(Alignment.TopCenter)&#10;                                    .clip(CircleShape)&#10;                                    .background(Color.Gray)&#10;                            )&#10;                            // Name, Age, Description&#10;                            val firstName = profile[&quot;firstName&quot;] as? String ?: &quot;&quot;&#10;                            val lastName = profile[&quot;lastName&quot;] as? String ?: &quot;&quot;&#10;                            val name = (firstName + &quot; &quot; + lastName).trim().ifEmpty { &quot;Unknown&quot; }&#10;                            val birthday = profile[&quot;birthday&quot;] as? String&#10;                            val age = birthday?.let {&#10;                                try {&#10;                                    val year = it.split(&quot;/&quot;).getOrNull(2)?.toInt() ?: throw Exception(&quot;Invalid date&quot;)&#10;                                    val currentYear = java.util.Calendar.getInstance().get(java.util.Calendar.YEAR)&#10;                                    (currentYear - year).toString()&#10;                                } catch (e: Exception) { &quot;?&quot; }&#10;                            } ?: &quot;?&quot;&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .align(Alignment.BottomCenter)&#10;                                    .fillMaxWidth()&#10;                                    .background(Color.White.copy(alpha = 0.85f), RoundedCornerShape(bottomStart = 24.dp, bottomEnd = 24.dp))&#10;                                    .padding(8.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                Text(&quot;$name, $age&quot;, fontWeight = FontWeight.Bold, fontSize = 16.sp, color = Color.Black, maxLines = 1)&#10;                            }&#10;                            if (showDelete &amp;&amp; onDelete != null) {&#10;                                IconButton(onClick = { onDelete(profile) }, modifier = Modifier.align(Alignment.TopEnd)) {&#10;                                    Icon(Icons.Default.Close, contentDescription = &quot;Delete&quot;, tint = Color.Red)&#10;                                }&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Spacer(modifier = Modifier.weight(1f))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        if (!showAll &amp;&amp; moreAvailable) {&#10;            Button(onClick = { showAll = true }, modifier = Modifier.align(Alignment.CenterHorizontally).padding(8.dp)) {&#10;                Text(&quot;More&quot;)&#10;            }&#10;        }&#10;        if (showAll &amp;&amp; profiles.size &gt; 6) {&#10;            Button(onClick = { showAll = false }, modifier = Modifier.align(Alignment.CenterHorizontally).padding(8.dp)) {&#10;                Text(&quot;Show Less&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FavoriteBottomNavigationBar(navController: NavController) {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(103.dp)&#10;            .background(Color.White.copy(alpha = 1.0f)),&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 32.dp, vertical = 20.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            BottomNavIcon(&#10;                icon = Icons.Default.ViewModule,&#10;                isActive = false&#10;            ) { navController.popBackStack()  }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Favorite,&#10;                isActive = true&#10;            ) { /* Already on favorite */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Chat,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Person,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material.icons.filled.ViewModule&#10;import androidx.compose.material.icons.filled.Chat&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.viewmodel.FavoriteViewModel&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.navigation.NavController&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;&#10;@Composable&#10;fun FavoriteScreen(navController: NavController) {&#10;    val favoriteViewModel: FavoriteViewModel = viewModel()&#10;    val likedMeProfilesResource by favoriteViewModel.likedMeProfiles.collectAsState()&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(AppColors.MainBackground)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .verticalScroll(rememberScrollState())&#10;        ) {&#10;            FavoriteHeader(navController)&#10;            when (likedMeProfilesResource) {&#10;                is Resource.Loading -&gt; {&#10;                    Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                        CircularProgressIndicator()&#10;                    }&#10;                }&#10;                is Resource.Failure -&gt; {&#10;                    val error = (likedMeProfilesResource as Resource.Failure).exception.message ?: &quot;Unknown error&quot;&#10;                    Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                        Text(&quot;Error: $error&quot;, color = Color.Red)&#10;                    }&#10;                }&#10;                is Resource.Success -&gt; {&#10;                    val users = (likedMeProfilesResource as Resource.Success&lt;List&lt;User&gt;&gt;).result&#10;                    if (users.isEmpty()) {&#10;                        Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                            Text(&quot;No users found&quot;, color = Color.Gray)&#10;                        }&#10;                    } else {&#10;                        Text(&quot;This is a list of people who have liked you.&quot;, fontSize = 16.sp, modifier = Modifier.padding(start = 32.dp, top = 8.dp, bottom = 8.dp, end = 16.dp), color = Color.Black)&#10;                        ProfileGrid(&#10;                            profiles = users,&#10;                            navController = navController,&#10;                            showDelete = false,&#10;                            moreAvailable = users.size &gt;= 9,&#10;                            onMoreClick = { /* TODO: Show all likedMeProfiles */ }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        Box(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .fillMaxWidth()&#10;        ) {&#10;            FavoriteBottomNavigationBar(navController)&#10;        }&#10;    }&#10;&#10;}&#10;&#10;@Composable&#10;fun FavoriteHeader(navController: NavController) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(start = 48.dp, end = 48.dp, top = 40.dp, bottom = 30.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;&#10;        Text(&#10;            text = &quot;Matches&quot;,&#10;            color = Color.Black,&#10;            fontWeight = FontWeight.Bold,&#10;            fontSize = 30.sp&#10;        )&#10;&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileGrid(&#10;    profiles: List&lt;User&gt;,&#10;    navController: NavController,&#10;    showDelete: Boolean,&#10;    moreAvailable: Boolean,&#10;    onDelete: ((User) -&gt; Unit)? = null,&#10;    onMoreClick: () -&gt; Unit&#10;) {&#10;    var showAll by remember { mutableStateOf(false) }&#10;    val profilesToShow = if (showAll) profiles else profiles.take(6)&#10;    val rowCount = if (showAll) (profilesToShow.size + 1) / 2 else 3&#10;    Column(modifier = Modifier.fillMaxWidth().padding(16.dp)) {&#10;        for (row in 0 until rowCount) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp),&#10;            ) {&#10;                for (col in 0 until 2) {&#10;                    val idx = row * 2 + col&#10;                    val profile = profilesToShow.getOrNull(idx)&#10;                    if (profile != null) {&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .padding(8.dp)&#10;                                .weight(1f)&#10;                                .height(220.dp)&#10;                                .clip(RoundedCornerShape(24.dp))&#10;                                .background(Color(0xFF23222B))&#10;                                .clickable {&#10;                                    navController.navigate(&quot;profile_display/${profile.uid}&quot;)&#10;                                }&#10;                        ) {&#10;                            // Profile image placeholder&#10;                            Image(&#10;                                imageVector = Icons.Default.Person,&#10;                                contentDescription = &quot;Profile&quot;,&#10;                                modifier = Modifier&#10;                                    .size(80.dp)&#10;                                    .align(Alignment.TopCenter)&#10;                                    .clip(CircleShape)&#10;                                    .background(Color.Gray)&#10;                            )&#10;                            // Name, Age, Description&#10;                            val name = (profile.firstName + &quot; &quot; + profile.lastName).trim().ifEmpty { &quot;Unknown&quot; }&#10;                            val birthday = profile.birthday&#10;                            val age = birthday?.let {&#10;                                try {&#10;                                    val year = it.split(&quot;/&quot;).getOrNull(2)?.toInt() ?: throw Exception(&quot;Invalid date&quot;)&#10;                                    val currentYear = java.util.Calendar.getInstance().get(java.util.Calendar.YEAR)&#10;                                    (currentYear - year).toString()&#10;                                } catch (e: Exception) { &quot;?&quot; }&#10;                            } ?: &quot;?&quot;&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .align(Alignment.BottomCenter)&#10;                                    .fillMaxWidth()&#10;                                    .background(Color.White.copy(alpha = 0.85f), RoundedCornerShape(bottomStart = 24.dp, bottomEnd = 24.dp))&#10;                                    .padding(8.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                Text(&quot;$name, $age&quot;, fontWeight = FontWeight.Bold, fontSize = 16.sp, color = Color.Black, maxLines = 1)&#10;                            }&#10;                            if (showDelete &amp;&amp; onDelete != null) {&#10;                                IconButton(onClick = { onDelete(profile) }, modifier = Modifier.align(Alignment.TopEnd)) {&#10;                                    Icon(Icons.Default.Close, contentDescription = &quot;Delete&quot;, tint = Color.Red)&#10;                                }&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Spacer(modifier = Modifier.weight(1f))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        if (!showAll &amp;&amp; moreAvailable) {&#10;            Button(onClick = { showAll = true }, modifier = Modifier.align(Alignment.CenterHorizontally).padding(8.dp)) {&#10;                Text(&quot;More&quot;)&#10;            }&#10;        }&#10;        if (showAll &amp;&amp; profiles.size &gt; 6) {&#10;            Button(onClick = { showAll = false }, modifier = Modifier.align(Alignment.CenterHorizontally).padding(8.dp)) {&#10;                Text(&quot;Show Less&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FavoriteBottomNavigationBar(navController: NavController) {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(103.dp)&#10;            .background(Color.White.copy(alpha = 1.0f)),&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 32.dp, vertical = 20.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            BottomNavIcon(&#10;                icon = Icons.Default.ViewModule,&#10;                isActive = false&#10;            ) { navController.popBackStack()  }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Favorite,&#10;                isActive = true&#10;            ) { /* Already on favorite */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Chat,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Person,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.gestures.detectDragGestures&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateListOf&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.IntOffset&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.animation.core.Animatable&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import java.util.Calendar&#10;import androidx.compose.runtime.MutableState&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.util.lerp&#10;import androidx.compose.animation.core.Spring&#10;import androidx.compose.animation.core.spring&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.viewmodel.HomeViewModel&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.data.model.Resource&#10;import com.example.dating.data.model.User&#10;&#10;@Composable&#10;fun HomeScreen(navController: NavController, homeViewModel: HomeViewModel = hiltViewModel()) {&#10;    val profilesResource by homeViewModel.profilesState.collectAsState()&#10;    val profileIndex = rememberSaveable { mutableStateOf(0) }&#10;&#10;    // Helper functions&#10;    suspend fun handleProfileAction(isLike: Boolean, profileIndex: MutableState&lt;Int&gt;, profiles: List&lt;Map&lt;String, Any&gt;&gt;, homeViewModel: HomeViewModel, navController: NavController) {&#10;        val currentProfile = profiles.getOrNull(profileIndex.value)&#10;        if (currentProfile != null) {&#10;            if (isLike) {&#10;                val likedUserId = currentProfile[&quot;uid&quot;] as? String&#10;                if (likedUserId != null) {&#10;                    homeViewModel.likeProfile(likedUserId)&#10;                    // Check for match and navigate if found&#10;                    val matchId = homeViewModel.matchFoundUserId.value&#10;                    if (matchId != null) {&#10;                        navController.navigate(&quot;match&quot;)&#10;                    }&#10;                }&#10;            }&#10;            profileIndex.value++&#10;        }&#10;    }&#10;    suspend fun animateSwipe(offsetX: Animatable&lt;Float, *&gt;, direction: Float) {&#10;        offsetX.animateTo(direction * 400f, tween(300))&#10;        offsetX.snapTo(0f)&#10;    }&#10;&#10;    // Only fetch profiles once when the composable is first composed&#10;    LaunchedEffect(Unit) {&#10;        if (profilesResource is Resource.Success &amp;&amp; (profilesResource as Resource.Success&lt;List&lt;User&gt;&gt;).result.isEmpty()) {&#10;            homeViewModel.fetchHome()&#10;        }&#10;    }&#10;&#10;    // Observe matchFoundUserId and navigate if a match is found&#10;    val matchFoundUserId by homeViewModel.matchFoundUserId.collectAsState()&#10;    LaunchedEffect(matchFoundUserId) {&#10;        if (matchFoundUserId != null) {&#10;            navController.navigate(&quot;match/${matchFoundUserId}&quot;)&#10;            homeViewModel.resetMatchFoundUserId()&#10;        }&#10;    }&#10;&#10;    // Use Box to overlay BottomNavigationBar and keep it fixed at the bottom&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(AppColors.MainBackground)&#10;        ) {&#10;            HomeHeader(navController)&#10;            when (profilesResource) {&#10;                is Resource.Loading -&gt; {&#10;                    Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                        CircularProgressIndicator()&#10;                    }&#10;                }&#10;                is Resource.Failure -&gt; {&#10;                    val error = (profilesResource as Resource.Failure).exception?.message ?: &quot;Unknown error&quot;&#10;                    Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                        Text(&quot;Error: $error&quot;, color = Color.Red)&#10;                    }&#10;                }&#10;                is Resource.Success -&gt; {&#10;                    val profiles = (profilesResource as Resource.Success&lt;List&lt;User&gt;&gt;).result&#10;                    ProfileCard(&#10;                        profiles = profiles,&#10;                        profileIndex = profileIndex,&#10;                        handleProfileAction = { isLike, profileIndex, profiles, homeViewModel -&gt;&#10;                            handleProfileAction(isLike, profileIndex, profiles, homeViewModel, navController)&#10;                        },&#10;                        animateSwipe = ::animateSwipe&#10;                    )&#10;                    ActionButtons(&#10;                        profiles = profiles,&#10;                        profileIndex = profileIndex,&#10;                        handleProfileAction = { isLike, profileIndex, profiles, homeViewModel -&gt;&#10;                            handleProfileAction(isLike, profileIndex, profiles, homeViewModel, navController)&#10;                        },&#10;                        animateSwipe = ::animateSwipe&#10;                    )&#10;                }&#10;            }&#10;        }&#10;        // Fixed BottomNavigationBar&#10;        Box(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .fillMaxWidth()&#10;        ) {&#10;            BottomNavigationBar(navController)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HomeHeader(navController: NavController) {&#10;    val showFilterDialog = remember { mutableStateOf(false) }&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(start = 48.dp, end = 48.dp, top = 40.dp, bottom = 30.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;&#10;        Text(&#10;            text = &quot;Discover&quot;,&#10;            color = Color.Black,&#10;            fontWeight = FontWeight.Bold,&#10;            fontSize = 30.sp&#10;        )&#10;&#10;        IconButton(onClick = { showFilterDialog.value = true }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = &quot;Filter&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;    }&#10;    if (showFilterDialog.value) {&#10;        com.example.dating.ui.components.FilterDialog(&#10;            show = showFilterDialog.value,&#10;            onDismiss = { showFilterDialog.value = false },&#10;            onApply = { selectedInterest, location, distance, ageRange -&gt;&#10;                // TODO: Apply filter logic here&#10;                showFilterDialog.value = false&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileCard(&#10;    profiles: List&lt;Map&lt;String, Any&gt;&gt;,&#10;    profileIndex: MutableState&lt;Int&gt;,&#10;    handleProfileAction: suspend (Boolean, MutableState&lt;Int&gt;, List&lt;Map&lt;String, Any&gt;&gt;, HomeViewModel) -&gt; Unit,&#10;    animateSwipe: suspend (Animatable&lt;Float, *&gt;, Float) -&gt; Unit,&#10;    homeViewModel: HomeViewModel = viewModel()&#10;) {&#10;    val currentProfile = profiles.getOrNull(profileIndex.value)&#10;&#10;    if (currentProfile == null) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(900.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Text(&quot;No profiles available&quot;, color = Color.Gray)&#10;        }&#10;        return&#10;    }&#10;&#10;    val firstName = currentProfile[&quot;firstName&quot;] as? String ?: &quot;&quot;&#10;    val lastName = currentProfile[&quot;lastName&quot;] as? String ?: &quot;&quot;&#10;    val name = (firstName + &quot; &quot; + lastName).trim().ifEmpty { &quot;Unknown&quot; }&#10;    val birthday = currentProfile[&quot;birthday&quot;] as? String&#10;    Log.d(&quot;YearBug&quot;, &quot;Year: $birthday&quot;)&#10;&#10;    val age = birthday?.let {&#10;        try {&#10;            // Expecting format dd/MM/yyyy&#10;            val year = it.split(&quot;/&quot;).getOrNull(2)?.toInt() ?: throw Exception(&quot;Invalid date&quot;)&#10;            Log.d(&quot;YearBug&quot;, &quot;Year: $year&quot;)&#10;            val currentYear = Calendar.getInstance().get(Calendar.YEAR)&#10;            (currentYear - year).toString()&#10;        } catch (e: Exception) {&#10;            &quot;?&quot;&#10;        }&#10;    } ?: &quot;?&quot;&#10;    val description = currentProfile[&quot;description&quot;] as? String ?: &quot;No description&quot;&#10;    val distance = currentProfile[&quot;distance&quot;]?.toString() ?: &quot;1 km&quot;&#10;&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;    val offsetY = remember { Animatable(0f) }&#10;    val isDragging = remember { mutableStateOf(false) }&#10;    val likeProgress = (offsetX.value / 200f).coerceIn(0f, 1f)&#10;    val dislikeProgress = (-offsetX.value / 200f).coerceIn(0f, 1f)&#10;    val iconAlpha = maxOf(likeProgress, dislikeProgress)&#10;    val iconScale = 1f + 0.3f * iconAlpha&#10;    val cardRotation = (offsetX.value / 15).coerceIn(-25f, 25f)&#10;    val threshold = 200f&#10;    val nextProfile = profiles.getOrNull(profileIndex.value + 1)&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(550.dp)&#10;            .padding(horizontal = 30.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Next card (subtle scale/alpha)&#10;        if (nextProfile != null) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(550.dp)&#10;                    .clip(RoundedCornerShape(32.dp))&#10;                    .background(Color(0xFF23222B))&#10;                    .graphicsLayer(&#10;                        scaleX = lerp(0.95f, 1f, iconAlpha),&#10;                        scaleY = lerp(0.95f, 1f, iconAlpha),&#10;                        alpha = lerp(0.7f, 1f, iconAlpha)&#10;                    )&#10;            ) {}&#10;        }&#10;        // Top card (draggable)&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(550.dp)&#10;                .offset { IntOffset(offsetX.value.toInt(), offsetY.value.toInt()) }&#10;                .rotate(cardRotation)&#10;                .clip(RoundedCornerShape(32.dp))&#10;                .background(Color(0xFF23222B))&#10;                .pointerInput(profileIndex.value) {&#10;                    detectDragGestures(&#10;                        onDragStart = { isDragging.value = true },&#10;                        onDragEnd = {&#10;                            isDragging.value = false&#10;                            scope.launch {&#10;                                when {&#10;                                    offsetX.value &gt; threshold -&gt; {&#10;                                        handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                                        animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;                                        offsetY.snapTo(0f)&#10;                                    }&#10;                                    offsetX.value &lt; -threshold -&gt; {&#10;                                        handleProfileAction(false, profileIndex, profiles, homeViewModel)&#10;                                        animateSwipe(offsetX, -1f) // Pass direction explicitly&#10;                                        offsetY.snapTo(0f)&#10;                                    }&#10;                                    else -&gt; {&#10;                                        offsetX.animateTo(0f, spring(stiffness = Spring.StiffnessMedium))&#10;                                        offsetY.animateTo(0f, spring(stiffness = Spring.StiffnessMedium))&#10;                                    }&#10;                                }&#10;                            }&#10;                        },&#10;                        onDrag = { change, dragAmount -&gt;&#10;                            scope.launch {&#10;                                offsetX.snapTo(offsetX.value + dragAmount.x)&#10;                                offsetY.snapTo(offsetY.value + dragAmount.y)&#10;                            }&#10;                        }&#10;                    )&#10;                },&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            // Portrait Image (placeholder)&#10;            Image(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile Image&quot;,&#10;                contentScale = ContentScale.Crop,&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .clip(RoundedCornerShape(32.dp))&#10;            )&#10;            // Distance Label&#10;            Box(&#10;                modifier = Modifier&#10;                    .padding(16.dp)&#10;                    .align(Alignment.TopStart)&#10;                    .background(Color.White.copy(alpha = 0.85f), RoundedCornerShape(50))&#10;                    .padding(horizontal = 16.dp, vertical = 6.dp)&#10;            ) {&#10;                Text(distance, color = Color.Black, fontWeight = FontWeight.Bold, fontSize = 14.sp)&#10;            }&#10;            // Gradient Overlay&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(120.dp)&#10;                    .align(Alignment.BottomCenter)&#10;                    .background(&#10;                        Brush.verticalGradient(&#10;                            colors = listOf(Color.Transparent, Color.Black),&#10;                            startY = 0f,&#10;                            endY = 300f&#10;                        ),&#10;                        shape = RoundedCornerShape(bottomStart = 32.dp, bottomEnd = 32.dp)&#10;                    )&#10;            )&#10;            // Name, Age, Description&#10;            Column(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.Center,&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;$name, $age&quot;,&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 28.sp,&#10;                    maxLines = 1,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;                Text(&#10;                    text = description,&#10;                    color = Color(0xFFCCCCCC),&#10;                    fontSize = 16.sp,&#10;                    maxLines = 1,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;            // Like/Dislike Icon Overlay&#10;            if (likeProgress &gt; 0.05f) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Favorite,&#10;                    contentDescription = &quot;Like&quot;,&#10;                    tint = Color.Red.copy(alpha = iconAlpha),&#10;                    modifier = Modifier&#10;                        .size((96f * iconScale).dp)&#10;                        .align(Alignment.Center)&#10;                )&#10;            } else if (dislikeProgress &gt; 0.05f) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Close,&#10;                    contentDescription = &quot;Dislike&quot;,&#10;                    tint = Color.White.copy(alpha = iconAlpha),&#10;                    modifier = Modifier&#10;                        .size((96f * iconScale).dp)&#10;                        .align(Alignment.Center)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionButtons(&#10;    profiles: List&lt;Map&lt;String, Any&gt;&gt;,&#10;    profileIndex: MutableState&lt;Int&gt;,&#10;    handleProfileAction: suspend (Boolean, MutableState&lt;Int&gt;, List&lt;Map&lt;String, Any&gt;&gt;, HomeViewModel) -&gt; Unit,&#10;    animateSwipe: suspend (Animatable&lt;Float, *&gt;, Float) -&gt; Unit,&#10;    homeViewModel: HomeViewModel = viewModel()&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 24.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(25.dp, Alignment.CenterHorizontally),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        // Dislike Button&#10;        ActionButton(&#10;            icon = Icons.Default.Close,&#10;            background = Color.White,&#10;            iconTint = Color.Black,&#10;            size = 75.dp,&#10;            shadow = 8.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(false, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, -1f) // Pass direction explicitly&#10;            }&#10;        }&#10;        // Super Like Button&#10;        ActionButton(&#10;            icon = Icons.Default.Favorite,&#10;            background = AppColors.Text_Pink,&#10;            iconTint = Color.White,&#10;            size = 95.dp,&#10;            shadow = 12.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;            }&#10;        }&#10;        // Like Button (calls a different method for clarity)&#10;        ActionButton(&#10;            icon = Icons.Default.Star,&#10;            background = Color(0xFF4A154B),&#10;            iconTint = Color.White,&#10;            size = 75.dp,&#10;            shadow = 8.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionButton(&#10;    icon: ImageVector,&#10;    background: Color,&#10;    iconTint: Color,&#10;    size: Dp,&#10;    shadow: Dp,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .size(size)&#10;            .shadow(shadow, CircleShape)&#10;            .clip(CircleShape)&#10;            .background(background)&#10;            .clickable { onClick() },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = iconTint,&#10;            modifier = Modifier.size(size * 0.5f)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BottomNavIcon(&#10;    icon: ImageVector,&#10;    isActive: Boolean,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    IconButton(onClick = onClick) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = if (isActive) AppColors.Text_Pink else Color(0xFFBDBDBD),&#10;            modifier = Modifier.size(32.dp)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BottomNavigationBar(navController: NavController) {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(103.dp)&#10;            .background(Color.White.copy(alpha = 1.0f)),&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 32.dp, vertical = 20.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            BottomNavIcon(&#10;                icon = Icons.Default.ViewModule,&#10;                isActive = true&#10;            ) { /* TODO: Handle navigation */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Favorite,&#10;                isActive = false&#10;            ) { navController.navigate(&quot;favorite&quot;) }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Chat,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Person,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.gestures.detectDragGestures&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateListOf&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.IntOffset&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.animation.core.Animatable&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import java.util.Calendar&#10;import androidx.compose.runtime.MutableState&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.util.lerp&#10;import androidx.compose.animation.core.Spring&#10;import androidx.compose.animation.core.spring&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.viewmodel.HomeViewModel&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.data.model.Resource&#10;import com.example.dating.data.model.User&#10;&#10;@Composable&#10;fun HomeScreen(navController: NavController, homeViewModel: HomeViewModel = hiltViewModel()) {&#10;    val profilesResource by homeViewModel.profilesState.collectAsState()&#10;    val profileIndex = rememberSaveable { mutableStateOf(0) }&#10;&#10;    // Helper functions&#10;    suspend fun handleProfileAction(isLike: Boolean, profileIndex: MutableState&lt;Int&gt;, profiles: List&lt;User&gt;, homeViewModel: HomeViewModel, navController: NavController) {&#10;        val currentProfile = profiles.getOrNull(profileIndex.value)&#10;        if (currentProfile != null) {&#10;            if (isLike) {&#10;                val likedUserId = currentProfile.uid&#10;                if (likedUserId != null) {&#10;                    homeViewModel.likeProfile(likedUserId)&#10;                    // Check for match and navigate if found&#10;                    val matchId = homeViewModel.matchFoundUserId.value&#10;                    if (matchId != null) {&#10;                        navController.navigate(&quot;match&quot;)&#10;                    }&#10;                }&#10;            }&#10;            profileIndex.value++&#10;        }&#10;    }&#10;    suspend fun animateSwipe(offsetX: Animatable&lt;Float, *&gt;, direction: Float) {&#10;        offsetX.animateTo(direction * 400f, tween(300))&#10;        offsetX.snapTo(0f)&#10;    }&#10;&#10;    // Only fetch profiles once when the composable is first composed&#10;    LaunchedEffect(Unit) {&#10;        if (profilesResource is Resource.Success &amp;&amp; (profilesResource as Resource.Success&lt;List&lt;User&gt;&gt;).result.isEmpty()) {&#10;            homeViewModel.fetchHome()&#10;        }&#10;    }&#10;&#10;    // Observe matchFoundUserId and navigate if a match is found&#10;    val matchFoundUserId by homeViewModel.matchFoundUserId.collectAsState()&#10;    LaunchedEffect(matchFoundUserId) {&#10;        if (matchFoundUserId != null) {&#10;            navController.navigate(&quot;match/${matchFoundUserId}&quot;)&#10;            homeViewModel.resetMatchFoundUserId()&#10;        }&#10;    }&#10;&#10;    // Use Box to overlay BottomNavigationBar and keep it fixed at the bottom&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(AppColors.MainBackground)&#10;        ) {&#10;            HomeHeader(navController)&#10;            when (profilesResource) {&#10;                is Resource.Loading -&gt; {&#10;                    Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                        CircularProgressIndicator()&#10;                    }&#10;                }&#10;                is Resource.Failure -&gt; {&#10;                    val error = (profilesResource as Resource.Failure).exception?.message ?: &quot;Unknown error&quot;&#10;                    Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                        Text(&quot;Error: $error&quot;, color = Color.Red)&#10;                    }&#10;                }&#10;                is Resource.Success -&gt; {&#10;                    val profiles = (profilesResource as Resource.Success&lt;List&lt;User&gt;&gt;).result&#10;                    ProfileCard(&#10;                        profiles = profiles,&#10;                        profileIndex = profileIndex,&#10;                        handleProfileAction = { isLike, profileIndex, profiles, homeViewModel -&gt;&#10;                            handleProfileAction(isLike, profileIndex, profiles, homeViewModel, navController)&#10;                        },&#10;                        animateSwipe = ::animateSwipe&#10;                    )&#10;                    ActionButtons(&#10;                        profiles = profiles,&#10;                        profileIndex = profileIndex,&#10;                        handleProfileAction = { isLike, profileIndex, profiles, homeViewModel -&gt;&#10;                            handleProfileAction(isLike, profileIndex, profiles, homeViewModel, navController)&#10;                        },&#10;                        animateSwipe = ::animateSwipe&#10;                    )&#10;                }&#10;            }&#10;        }&#10;        // Fixed BottomNavigationBar&#10;        Box(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .fillMaxWidth()&#10;        ) {&#10;            BottomNavigationBar(navController)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HomeHeader(navController: NavController) {&#10;    val showFilterDialog = remember { mutableStateOf(false) }&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(start = 48.dp, end = 48.dp, top = 40.dp, bottom = 30.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;&#10;        Text(&#10;            text = &quot;Discover&quot;,&#10;            color = Color.Black,&#10;            fontWeight = FontWeight.Bold,&#10;            fontSize = 30.sp&#10;        )&#10;&#10;        IconButton(onClick = { showFilterDialog.value = true }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = &quot;Filter&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;    }&#10;    if (showFilterDialog.value) {&#10;        com.example.dating.ui.components.FilterDialog(&#10;            show = showFilterDialog.value,&#10;            onDismiss = { showFilterDialog.value = false },&#10;            onApply = { selectedInterest, location, distance, ageRange -&gt;&#10;                // TODO: Apply filter logic here&#10;                showFilterDialog.value = false&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileCard(&#10;    profiles: List&lt;User&gt;,&#10;    profileIndex: MutableState&lt;Int&gt;,&#10;    handleProfileAction: suspend (Boolean, MutableState&lt;Int&gt;, List&lt;User&gt;, HomeViewModel) -&gt; Unit,&#10;    animateSwipe: suspend (Animatable&lt;Float, *&gt;, Float) -&gt; Unit,&#10;    homeViewModel: HomeViewModel = viewModel()&#10;) {&#10;    val currentProfile = profiles.getOrNull(profileIndex.value)&#10;&#10;    if (currentProfile == null) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(900.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Text(&quot;No profiles available&quot;, color = Color.Gray)&#10;        }&#10;        return&#10;    }&#10;&#10;    val firstName = currentProfile.firstName ?: &quot;&quot;&#10;    val lastName = currentProfile.lastName ?: &quot;&quot;&#10;    val name = (firstName + &quot; &quot; + lastName).trim().ifEmpty { &quot;Unknown&quot; }&#10;    val birthday = currentProfile.birthday&#10;    Log.d(&quot;YearBug&quot;, &quot;Year: $birthday&quot;)&#10;&#10;    val age = birthday?.let {&#10;        try {&#10;            // Expecting format dd/MM/yyyy&#10;            val year = it.split(&quot;/&quot;).getOrNull(2)?.toInt() ?: throw Exception(&quot;Invalid date&quot;)&#10;            Log.d(&quot;YearBug&quot;, &quot;Year: $year&quot;)&#10;            val currentYear = Calendar.getInstance().get(Calendar.YEAR)&#10;            (currentYear - year).toString()&#10;        } catch (e: Exception) {&#10;            &quot;?&quot;&#10;        }&#10;    } ?: &quot;?&quot;&#10;    val description = currentProfile.description ?: &quot;No description&quot;&#10;    val distance = currentProfile.distance?.toString() ?: &quot;1 km&quot;&#10;&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;    val offsetY = remember { Animatable(0f) }&#10;    val isDragging = remember { mutableStateOf(false) }&#10;    val likeProgress = (offsetX.value / 200f).coerceIn(0f, 1f)&#10;    val dislikeProgress = (-offsetX.value / 200f).coerceIn(0f, 1f)&#10;    val iconAlpha = maxOf(likeProgress, dislikeProgress)&#10;    val iconScale = 1f + 0.3f * iconAlpha&#10;    val cardRotation = (offsetX.value / 15).coerceIn(-25f, 25f)&#10;    val threshold = 200f&#10;    val nextProfile = profiles.getOrNull(profileIndex.value + 1)&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(550.dp)&#10;            .padding(horizontal = 30.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Next card (subtle scale/alpha)&#10;        if (nextProfile != null) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(550.dp)&#10;                    .clip(RoundedCornerShape(32.dp))&#10;                    .background(Color(0xFF23222B))&#10;                    .graphicsLayer(&#10;                        scaleX = lerp(0.95f, 1f, iconAlpha),&#10;                        scaleY = lerp(0.95f, 1f, iconAlpha),&#10;                        alpha = lerp(0.7f, 1f, iconAlpha)&#10;                    )&#10;            ) {}&#10;        }&#10;        // Top card (draggable)&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(550.dp)&#10;                .offset { IntOffset(offsetX.value.toInt(), offsetY.value.toInt()) }&#10;                .rotate(cardRotation)&#10;                .clip(RoundedCornerShape(32.dp))&#10;                .background(Color(0xFF23222B))&#10;                .pointerInput(profileIndex.value) {&#10;                    detectDragGestures(&#10;                        onDragStart = { isDragging.value = true },&#10;                        onDragEnd = {&#10;                            isDragging.value = false&#10;                            scope.launch {&#10;                                when {&#10;                                    offsetX.value &gt; threshold -&gt; {&#10;                                        handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                                        animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;                                        offsetY.snapTo(0f)&#10;                                    }&#10;                                    offsetX.value &lt; -threshold -&gt; {&#10;                                        handleProfileAction(false, profileIndex, profiles, homeViewModel)&#10;                                        animateSwipe(offsetX, -1f) // Pass direction explicitly&#10;                                        offsetY.snapTo(0f)&#10;                                    }&#10;                                    else -&gt; {&#10;                                        offsetX.animateTo(0f, spring(stiffness = Spring.StiffnessMedium))&#10;                                        offsetY.animateTo(0f, spring(stiffness = Spring.StiffnessMedium))&#10;                                    }&#10;                                }&#10;                            }&#10;                        },&#10;                        onDrag = { change, dragAmount -&gt;&#10;                            scope.launch {&#10;                                offsetX.snapTo(offsetX.value + dragAmount.x)&#10;                                offsetY.snapTo(offsetY.value + dragAmount.y)&#10;                            }&#10;                        }&#10;                    )&#10;                },&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            // Portrait Image (placeholder)&#10;            Image(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile Image&quot;,&#10;                contentScale = ContentScale.Crop,&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .clip(RoundedCornerShape(32.dp))&#10;            )&#10;            // Distance Label&#10;            Box(&#10;                modifier = Modifier&#10;                    .padding(16.dp)&#10;                    .align(Alignment.TopStart)&#10;                    .background(Color.White.copy(alpha = 0.85f), RoundedCornerShape(50))&#10;                    .padding(horizontal = 16.dp, vertical = 6.dp)&#10;            ) {&#10;                Text(distance, color = Color.Black, fontWeight = FontWeight.Bold, fontSize = 14.sp)&#10;            }&#10;            // Gradient Overlay&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(120.dp)&#10;                    .align(Alignment.BottomCenter)&#10;                    .background(&#10;                        Brush.verticalGradient(&#10;                            colors = listOf(Color.Transparent, Color.Black),&#10;                            startY = 0f,&#10;                            endY = 300f&#10;                        ),&#10;                        shape = RoundedCornerShape(bottomStart = 32.dp, bottomEnd = 32.dp)&#10;                    )&#10;            )&#10;            // Name, Age, Description&#10;            Column(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.Center,&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;$name, $age&quot;,&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 28.sp,&#10;                    maxLines = 1,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;                Text(&#10;                    text = description,&#10;                    color = Color(0xFFCCCCCC),&#10;                    fontSize = 16.sp,&#10;                    maxLines = 1,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;            // Like/Dislike Icon Overlay&#10;            if (likeProgress &gt; 0.05f) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Favorite,&#10;                    contentDescription = &quot;Like&quot;,&#10;                    tint = Color.Red.copy(alpha = iconAlpha),&#10;                    modifier = Modifier&#10;                        .size((96f * iconScale).dp)&#10;                        .align(Alignment.Center)&#10;                )&#10;            } else if (dislikeProgress &gt; 0.05f) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Close,&#10;                    contentDescription = &quot;Dislike&quot;,&#10;                    tint = Color.White.copy(alpha = iconAlpha),&#10;                    modifier = Modifier&#10;                        .size((96f * iconScale).dp)&#10;                        .align(Alignment.Center)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionButtons(&#10;    profiles: List&lt;User&gt;,&#10;    profileIndex: MutableState&lt;Int&gt;,&#10;    handleProfileAction: suspend (Boolean, MutableState&lt;Int&gt;, List&lt;User&gt;, HomeViewModel) -&gt; Unit,&#10;    animateSwipe: suspend (Animatable&lt;Float, *&gt;, Float) -&gt; Unit,&#10;    homeViewModel: HomeViewModel = viewModel()&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 24.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(25.dp, Alignment.CenterHorizontally),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        // Dislike Button&#10;        ActionButton(&#10;            icon = Icons.Default.Close,&#10;            background = Color.White,&#10;            iconTint = Color.Black,&#10;            size = 75.dp,&#10;            shadow = 8.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(false, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, -1f) // Pass direction explicitly&#10;            }&#10;        }&#10;        // Super Like Button&#10;        ActionButton(&#10;            icon = Icons.Default.Favorite,&#10;            background = AppColors.Text_Pink,&#10;            iconTint = Color.White,&#10;            size = 95.dp,&#10;            shadow = 12.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;            }&#10;        }&#10;        // Like Button (calls a different method for clarity)&#10;        ActionButton(&#10;            icon = Icons.Default.Star,&#10;            background = Color(0xFF4A154B),&#10;            iconTint = Color.White,&#10;            size = 75.dp,&#10;            shadow = 8.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionButton(&#10;    icon: ImageVector,&#10;    background: Color,&#10;    iconTint: Color,&#10;    size: Dp,&#10;    shadow: Dp,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .size(size)&#10;            .shadow(shadow, CircleShape)&#10;            .clip(CircleShape)&#10;            .background(background)&#10;            .clickable { onClick() },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = iconTint,&#10;            modifier = Modifier.size(size * 0.5f)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BottomNavIcon(&#10;    icon: ImageVector,&#10;    isActive: Boolean,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    IconButton(onClick = onClick) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = if (isActive) AppColors.Text_Pink else Color(0xFFBDBDBD),&#10;            modifier = Modifier.size(32.dp)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BottomNavigationBar(navController: NavController) {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(103.dp)&#10;            .background(Color.White.copy(alpha = 1.0f)),&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 32.dp, vertical = 20.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            BottomNavIcon(&#10;                icon = Icons.Default.ViewModule,&#10;                isActive = true&#10;            ) { /* TODO: Handle navigation */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Favorite,&#10;                isActive = false&#10;            ) { navController.navigate(&quot;favorite&quot;) }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Chat,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Person,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class HomeViewModel : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val _addFavoriteState = MutableStateFlow&lt;Result&lt;Unit&gt;?&gt;(null)&#10;    val addFavoriteState: StateFlow&lt;Result&lt;Unit&gt;?&gt; = _addFavoriteState&#10;&#10;    fun addFavorite(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        val favorite = hashMapOf(&#10;            &quot;likerId&quot; to likerId,&#10;            &quot;likedId&quot; to likedId,&#10;            &quot;timestamp&quot; to Timestamp.now()&#10;        )&#10;        viewModelScope.launch {&#10;            try {&#10;                db.collection(&quot;favorites&quot;).add(favorite)&#10;                _addFavoriteState.value = Result.success(Unit)&#10;            } catch (e: Exception) {&#10;                _addFavoriteState.value = Result.failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearAddFavoriteState() {&#10;        _addFavoriteState.value = null&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/FavoriteViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/FavoriteViewModel.kt" />
              <option name="originalContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.FavoriteRepository&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;&#10;@HiltViewModel&#10;class FavoriteViewModel @Inject constructor(&#10;    private val favoriteRepository: FavoriteRepository&#10;) : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val _likedMeProfiles = MutableStateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt;(Resource.Loading)&#10;    val likedMeProfiles: StateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt; = _likedMeProfiles&#10;&#10;    fun fetchFavorites() {&#10;        val currentUserId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            try {&#10;                _likedMeProfiles.value = Resource.Loading&#10;                val likedMeSnapshot = favoriteRepository.getFavoritesByLikedId(currentUserId)&#10;                val likedMeIds = likedMeSnapshot.mapNotNull { it[&quot;likerId&quot;] as? String }&#10;                android.util.Log.d(&quot;FavoriteViewModel&quot;, &quot;likedMeIds: $likedMeIds&quot;)&#10;                val likedMeProfilesList = favoriteRepository.getUserProfilesByIds(likedMeIds)&#10;                _likedMeProfiles.value = Resource.Success(likedMeProfilesList)&#10;            } catch (e: Exception) {&#10;                _likedMeProfiles.value = Resource.Failure(e as? Exception ?: Exception(e.message))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteFavorite(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            try {&#10;                favoriteRepository.deleteFavorite(likerId, likedId)&#10;                fetchFavorites() // Refresh after delete&#10;            } catch (_: Exception) {}&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.FavoriteRepository&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;&#10;@HiltViewModel&#10;class FavoriteViewModel @Inject constructor(&#10;    private val favoriteRepository: FavoriteRepository&#10;) : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val _likedMeProfiles = MutableStateFlow&lt;Resource&lt;List&lt;String&gt;&gt;&gt;(Resource.Loading)&#10;    val likedMeProfiles: StateFlow&lt;Resource&lt;List&lt;String&gt;&gt;&gt; = _likedMeProfiles&#10;&#10;    fun fetchFavorites() {&#10;        val currentUserId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            try {&#10;                _likedMeProfiles.value = Resource.Loading&#10;                val likedMeSnapshot = favoriteRepository.getFavoritesByLikedId(currentUserId)&#10;                val likedMeIds = likedMeSnapshot.mapNotNull { it[&quot;likerId&quot;] as? String }&#10;                android.util.Log.d(&quot;FavoriteViewModel&quot;, &quot;likedMeIds: $likedMeIds&quot;)&#10;                _likedMeProfiles.value = Resource.Success(likedMeIds)&#10;            } catch (e: Exception) {&#10;                _likedMeProfiles.value = Resource.Failure(e as? Exception ?: Exception(e.message))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteFavorite(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            try {&#10;                favoriteRepository.deleteFavorite(likerId, likedId)&#10;                fetchFavorites() // Refresh after delete&#10;            } catch (_: Exception) {}&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/HomeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/HomeViewModel.kt" />
              <option name="originalContent" value="package com.example.dating.viewmodel&#10;&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.FavoriteRepository&#10;import com.example.dating.data.model.repository.MatchRepository&#10;import com.example.dating.data.model.repository.HomeRepository&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;&#10;@HiltViewModel&#10;class HomeViewModel @Inject constructor(&#10;    private val matchRepository: MatchRepository,&#10;    private val favoriteRepository: FavoriteRepository,&#10;    private val homeRepository: HomeRepository&#10;) : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    private val _profilesState = MutableStateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt;(Resource.Loading)&#10;    val profilesState: StateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt; = _profilesState&#10;&#10;  &#10;    private val _matchFoundUserId = MutableStateFlow&lt;String?&gt;(null)&#10;    val matchFoundUserId: StateFlow&lt;String?&gt; = _matchFoundUserId&#10;&#10;    fun fetchHome() {&#10;        viewModelScope.launch {&#10;            _profilesState.value = Resource.Loading&#10;            try {&#10;                val result = homeRepository.fetchProfiles()&#10;                _profilesState.value = Resource.Success(result)&#10;            } catch (e: Exception) {&#10;                _profilesState.value = Resource.Failure(e as? Exception ?: Exception(e.message))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun likeProfile(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            try {&#10;                // Add favorite using repository&#10;                favoriteRepository.addFavorite(likerId, likedId)&#10;                // Check for match using repository&#10;                val isMatch = favoriteRepository.isMatch(likerId, likedId)&#10;                if (isMatch) {&#10;                    _matchFoundUserId.value = likedId&#10;                    android.util.Log.d(&quot;HomeViewModel&quot;, &quot;Calling MatchRepository.saveMatch with $likerId and $likedId&quot;)&#10;                    matchRepository.saveMatch(likerId, likedId, true)&#10;                } else {&#10;                    _matchFoundUserId.value = null&#10;                    android.util.Log.d(&quot;HomeViewModel&quot;, &quot;Calling MatchRepository.saveMatch with $likerId and $likedId, status=false&quot;)&#10;                    matchRepository.saveMatch(likerId, likedId, false)&#10;                }&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun resetMatchFoundUserId() {&#10;        _matchFoundUserId.value = null&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.viewmodel&#10;&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.FavoriteRepository&#10;import com.example.dating.data.model.repository.MatchRepository&#10;import com.example.dating.data.model.repository.HomeRepository&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;&#10;@HiltViewModel&#10;class HomeViewModel @Inject constructor(&#10;    private val matchRepository: MatchRepository,&#10;    private val favoriteRepository: FavoriteRepository,&#10;    private val homeRepository: HomeRepository&#10;) : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    private val _profilesState = MutableStateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt;(Resource.Loading)&#10;    val profilesState: StateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt; = _profilesState&#10;&#10;  &#10;    private val _matchFoundUserId = MutableStateFlow&lt;String?&gt;(null)&#10;    val matchFoundUserId: StateFlow&lt;String?&gt; = _matchFoundUserId&#10;&#10;    fun fetchHome() {&#10;        viewModelScope.launch {&#10;            _profilesState.value = Resource.Loading&#10;            try {&#10;                val result = homeRepository.fetchProfiles()&#10;                _profilesState.value = Resource.Success(result)&#10;            } catch (e: Exception) {&#10;                _profilesState.value = Resource.Failure(e as? Exception ?: Exception(e.message))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun likeProfile(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            try {&#10;                // Add favorite using repository&#10;                favoriteRepository.addFavorite(likerId, likedId)&#10;                // Check for match using repository&#10;                val isMatch = favoriteRepository.isMatch(likerId, likedId)&#10;                if (isMatch) {&#10;                    _matchFoundUserId.value = likedId&#10;                    android.util.Log.d(&quot;HomeViewModel&quot;, &quot;Calling MatchRepository.saveMatch with $likerId and $likedId&quot;)&#10;                    matchRepository.saveMatch(likerId, likedId, true)&#10;                } else {&#10;                    _matchFoundUserId.value = null&#10;                    android.util.Log.d(&quot;HomeViewModel&quot;, &quot;Calling MatchRepository.saveMatch with $likerId and $likedId, status=false&quot;)&#10;                    matchRepository.saveMatch(likerId, likedId, false)&#10;                }&#10;            } catch (e: Exception) {&#10;                _profilesState.value = Resource.Failure(e as? Exception ?: Exception(e.message))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun resetMatchFoundUserId() {&#10;        _matchFoundUserId.value = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/MatchViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/MatchViewModel.kt" />
              <option name="originalContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.MatchRepository&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class MatchViewModel(private val matchRepository: MatchRepository = MatchRepository()) : ViewModel() {&#10;    private val _currentUserFirstName = MutableStateFlow&lt;String&gt;(&quot;You&quot;)&#10;    val currentUserFirstName: StateFlow&lt;String&gt; = _currentUserFirstName&#10;&#10;    fun saveMatch(userId1: String, userId2: String, status: Boolean) {&#10;        viewModelScope.launch {&#10;            matchRepository.saveMatch(userId1, userId2, status)&#10;        }&#10;    }&#10;&#10;    fun fetchCurrentUserFirstName(uid: String?) {&#10;        android.util.Log.d(&quot;MatchViewModel&quot;, &quot;fetchCurrentUserFirstName called with uid=$uid&quot;)&#10;        if (uid == null) {&#10;            _currentUserFirstName.value = &quot;You&quot;&#10;            return&#10;        }&#10;        viewModelScope.launch {&#10;            try {&#10;                val firstName = matchRepository.getUserFirstName(uid)&#10;                android.util.Log.d(&quot;MatchViewModel&quot;, &quot;fetchCurrentUserFirstName result: firstName=$firstName&quot;)&#10;                _currentUserFirstName.value = firstName&#10;            } catch (e: Exception) {&#10;                android.util.Log.e(&quot;MatchViewModel&quot;, &quot;fetchCurrentUserFirstName error: ${e.message}&quot;)&#10;                _currentUserFirstName.value = &quot;You&quot;&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.MatchRepository&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;@HiltViewModel&#10;class MatchViewModel @Inject constructor(&#10;    private val matchRepository: MatchRepository&#10;) : ViewModel() {&#10;    private val _currentUserFirstName = MutableStateFlow&lt;String&gt;(&quot;You&quot;)&#10;    val currentUserFirstName: StateFlow&lt;String&gt; = _currentUserFirstName&#10;&#10;    fun saveMatch(userId1: String, userId2: String, status: Boolean) {&#10;        viewModelScope.launch {&#10;            matchRepository.saveMatch(userId1, userId2, status)&#10;        }&#10;    }&#10;&#10;    fun fetchCurrentUserFirstName(uid: String?) {&#10;        android.util.Log.d(&quot;MatchViewModel&quot;, &quot;fetchCurrentUserFirstName called with uid=$uid&quot;)&#10;        if (uid == null) {&#10;            _currentUserFirstName.value = &quot;You&quot;&#10;            return&#10;        }&#10;        viewModelScope.launch {&#10;            try {&#10;                val firstName = matchRepository.getUserFirstName(uid)&#10;                android.util.Log.d(&quot;MatchViewModel&quot;, &quot;fetchCurrentUserFirstName result: firstName=$firstName&quot;)&#10;                _currentUserFirstName.value = firstName&#10;            } catch (e: Exception) {&#10;                android.util.Log.e(&quot;MatchViewModel&quot;, &quot;fetchCurrentUserFirstName error: ${e.message}&quot;)&#10;                _currentUserFirstName.value = &quot;You&quot;&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>