<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/MatchRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/MatchRepository.kt" />
              <option name="updatedContent" value="package com.example.dating.data&#10;&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class MatchRepository {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    suspend fun saveMatch(userId1: String, userId2: String, status: Boolean) {&#10;        // Ensure userId1 &lt; userId2 alphabetically&#10;        val (firstId, secondId) = if (userId1 &lt; userId2) userId1 to userId2 else userId2 to userId1&#10;        val matchData = hashMapOf(&#10;            &quot;userId1&quot; to firstId,&#10;            &quot;userId2&quot; to secondId,&#10;            &quot;timestamp&quot; to Timestamp.now(),&#10;            &quot;status&quot; to status&#10;        )&#10;        // Check for duplicate (userId1/userId2 only)&#10;        val query = db.collection(&quot;match&quot;)&#10;            .whereEqualTo(&quot;userId1&quot;, firstId)&#10;            .whereEqualTo(&quot;userId2&quot;, secondId)&#10;            .get().await()&#10;        android.util.Log.d(&quot;MatchRepository&quot;, &quot;MatchQuery: userId1=$firstId, userId2=$secondId, resultCount=${query.size()}&quot;)&#10;        if (query.isEmpty) {&#10;            db.collection(&quot;match&quot;).add(matchData)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepository.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;&#10;class UserRepository @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;)  {&#10;&#10;    fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        android.util.Log.d(&quot;UserRepository&quot;, &quot;getUser: docRef=$docRef &quot; +&#10;                &quot;for uid=$uid&quot;)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            val user = snapshot?.toObject(User::class.java)&#10;            // Ensure uid and imageUrl are set from document id and default if missing&#10;            val userWithUid = user?.copy(&#10;                uid = snapshot.id,&#10;                imageUrl = user.imageUrl ?: emptyList()&#10;            )&#10;            android.util.Log.d(&quot;UserRepository&quot;, &quot;getUser: uid=$uid, user=$userWithUid&quot;)&#10;            trySend(userWithUid)&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    suspend fun updateUser(user: User) {&#10;        android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;updateProfile called with: $user&quot;)&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;&#10;    suspend fun updateGender(uid: String, gender: String) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&quot;gender&quot;, gender).await()&#10;    }&#10;&#10;    suspend fun updateInterests(uid: String, interests: List&lt;String&gt;) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&quot;interests&quot;, interests).await()&#10;    }&#10;&#10;    suspend fun updateJobLocationDescription(uid: String, job: String?, location: String?, description: String?) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&#10;            mapOf(&#10;                &quot;job&quot; to job,&#10;                &quot;location&quot; to location,&#10;                &quot;description&quot; to description&#10;            )&#10;        ).await()&#10;    }&#10;&#10;    suspend fun uploadAvatar(uid: String, uri: android.net.Uri): String {&#10;        // TODO: Implement Firebase Storage upload and return the URL&#10;        return &quot;&quot;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;import com.example.dating.util.Resource&#10;&#10;class UserRepository @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;)  {&#10;&#10;    fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        android.util.Log.d(&quot;UserRepository&quot;, &quot;getUser: docRef=$docRef &quot; +&#10;                &quot;for uid=$uid&quot;)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            val user = snapshot?.toObject(User::class.java)&#10;            // Ensure uid and imageUrl are set from document id and default if missing&#10;            val userWithUid = user?.copy(&#10;                uid = snapshot.id,&#10;                imageUrl = user.imageUrl ?: emptyList()&#10;            )&#10;            android.util.Log.d(&quot;UserRepository&quot;, &quot;getUser: uid=$uid, user=$userWithUid&quot;)&#10;            trySend(userWithUid)&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    suspend fun updateUser(user: User): Resource&lt;Unit&gt; {&#10;        return try {&#10;            android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;updateProfile called with: $user&quot;)&#10;            firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateGender(uid: String, gender: String): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&quot;gender&quot;, gender).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateInterests(uid: String, interests: List&lt;String&gt;): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&quot;interests&quot;, interests).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateJobLocationDescription(uid: String, job: String?, location: String?, description: String?): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&#10;                mapOf(&#10;                    &quot;job&quot; to job,&#10;                    &quot;location&quot; to location,&#10;                    &quot;description&quot; to description&#10;                )&#10;            ).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun uploadAvatar(uid: String, uri: android.net.Uri): String {&#10;        // TODO: Implement Firebase Storage upload and return the URL&#10;        return &quot;&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepositoryImpl.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;) : UserRepository {&#10;&#10;    fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            offer(snapshot?.toObject(User::class.java))&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    override suspend fun updateUser(user: User) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun saveProfile(&#10;        userId: String,&#10;        firstName: String,&#10;        lastName: String,&#10;        birthday: String?,&#10;        imageUrl: String?&#10;    ): Resource&lt;Unit&gt; {&#10;        return try {&#10;            val userMap = hashMapOf(&#10;                &quot;firstName&quot; to firstName,&#10;                &quot;lastName&quot; to lastName,&#10;                &quot;birthday&quot; to birthday,&#10;                &quot;imageUrl&quot; to imageUrl&#10;            )&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .set(userMap)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateGender(userId: String, gender: String): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;gender&quot;, gender)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateInterests(userId: String, interests: List&lt;String&gt;): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;interests&quot;, interests)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateJobLocationDescription(&#10;        userId: String,&#10;        job: String?,&#10;        location: String?,&#10;        description: String?&#10;    ): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(mapOf(&#10;                    &quot;job&quot; to job,&#10;                    &quot;location&quot; to location,&#10;                    &quot;description&quot; to description&#10;                ))&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;) : UserRepository {&#10;&#10;    override fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            trySend(snapshot?.toObject(User::class.java))&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    override suspend fun updateUser(user: User) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun saveProfile(&#10;        user: User&#10;    ) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun updateGender(uid: String, gender: String) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&quot;gender&quot;, gender).await()&#10;    }&#10;&#10;    override suspend fun updateInterests(uid: String, interests: List&lt;String&gt;) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&quot;interests&quot;, interests).await()&#10;    }&#10;&#10;    override suspend fun updateJobLocationDescription(uid: String, job: String?, location: String?, description: String?) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&#10;            mapOf(&#10;                &quot;job&quot; to job,&#10;                &quot;location&quot; to location,&#10;                &quot;description&quot; to description&#10;            )&#10;        ).await()&#10;    }&#10;&#10;    override suspend fun uploadAvatar(uid: String, uri: android.net.Uri): String {&#10;        // TODO: Implement Firebase Storage upload and return the URL&#10;        return &quot;&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/FilterDialog.kt.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/FilterDialog.kt.kt" />
              <option name="originalContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FilterScreen(navController: NavController) {&#10;    // State variables&#10;    var selectedInterest by remember { mutableStateOf(&quot;Girls&quot;) }&#10;    var location by remember { mutableStateOf(&quot;Chicago, USA&quot;) }&#10;    var distance by remember { mutableFloatStateOf(40f) }&#10;    var ageRange by remember { mutableStateOf(20f..28f) }&#10;&#10;    // Bottom sheet or dialog content&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .wrapContentHeight()&#10;            .clip(RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp))&#10;            .background(Color.White)&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        // Notch&#10;        Box(&#10;            modifier = Modifier&#10;                .width(40.dp)&#10;                .height(4.dp)&#10;                .background(Color.Gray.copy(alpha = 0.5f), CircleShape)&#10;                .align(Alignment.CenterHorizontally)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Title and Clear&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Filters&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.Black&#10;            )&#10;            TextButton(onClick = { /* TODO: Clear filters */ }) {&#10;                Text(&#10;                    text = &quot;Clear&quot;,&#10;                    color = Color(0xFFFF69B4), // Pink&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Interested in&#10;        Text(&#10;            text = &quot;Interested in&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        SegmentedButtonRow(modifier = Modifier.fillMaxWidth()) {&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Girls&quot;,&#10;                onClick = { selectedInterest = &quot;Girls&quot; },&#10;                shape = RoundedCornerShape(topStart = 8.dp, bottomStart = 8.dp)&#10;            ) {&#10;                Text(&quot;Girls&quot;)&#10;            }&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Boys&quot;,&#10;                onClick = { selectedInterest = &quot;Boys&quot; },&#10;                shape = RoundedCornerShape(0.dp)&#10;            ) {&#10;                Text(&quot;Boys&quot;)&#10;            }&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Both&quot;,&#10;                onClick = { selectedInterest = &quot;Both&quot; },&#10;                shape = RoundedCornerShape(topEnd = 8.dp, bottomEnd = 8.dp)&#10;            ) {&#10;                Text(&quot;Both&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Location&#10;        Text(&#10;            text = &quot;Location&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        OutlinedTextField(&#10;            value = location,&#10;            onValueChange = { /* Read-only, tap to select */ },&#10;            readOnly = true,&#10;            modifier = Modifier.fillMaxWidth(),&#10;            trailingIcon = {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowForward,&#10;                    contentDescription = &quot;Select location&quot;,&#10;                    tint = Color(0xFFFF0000) // Red&#10;                )&#10;            },&#10;            singleLine = true,&#10;            interactionSource = remember { MutableInteractionSource() }.also { interactionSource -&gt;&#10;                // TODO: Handle click to open location selector&#10;            }&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Distance&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;Distance&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;            Text(&#10;                text = &quot;${distance.toInt()}km&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;        Slider(&#10;            value = distance,&#10;            onValueChange = { distance = it },&#10;            valueRange = 0f..100f, // Assuming max 100km&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = SliderDefaults.colors(&#10;                thumbColor = Color(0xFFBB86FC), // Purple&#10;                activeTrackColor = Color(0xFFBB86FC),&#10;                inactiveTrackColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Age&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;Age&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;            Text(&#10;                text = &quot;${ageRange.start.toInt()}-${ageRange.endInclusive.toInt()}&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;        RangeSlider(&#10;            value = ageRange,&#10;            onValueChange = { ageRange = it },&#10;            valueRange = 18f..100f, // Assuming age range&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = SliderDefaults.colors(&#10;                thumbColor = Color(0xFFBB86FC), // Purple&#10;                activeTrackColor = Color(0xFFBB86FC),&#10;                inactiveTrackColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // Continue button&#10;        Button(&#10;            onClick = { /* TODO: Apply filters and navigate */ },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(48.dp),&#10;            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFBB86FC).copy(alpha = 0.2f)), // Light purple&#10;            shape = RoundedCornerShape(24.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Continue&quot;,&#10;                color = Color.Black,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FilterDialog(&#10;    show: Boolean,&#10;    onDismiss: () -&gt; Unit,&#10;    onApply: (selectedInterest: String, location: String, distance: Float, ageRange: ClosedFloatingPointRange&lt;Float&gt;) -&gt; Unit&#10;) {&#10;    if (!show) return&#10;    var selectedInterest by remember { mutableStateOf(&quot;Girls&quot;) }&#10;    var location by remember { mutableStateOf(&quot;Chicago, USA&quot;) }&#10;    var distance by remember { mutableStateOf(40f) }&#10;    var ageRange by remember { mutableStateOf(20f..28f) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    onApply(selectedInterest, location, distance, ageRange)&#10;                    onDismiss()&#10;                },&#10;                modifier = Modifier.fillMaxWidth().height(48.dp),&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFBB86FC).copy(alpha = 0.2f)),&#10;                shape = RoundedCornerShape(24.dp)&#10;            ) {&#10;                Text(&quot;Continue&quot;, color = Color.Black, fontSize = 16.sp, fontWeight = FontWeight.Bold)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;, color = Color.Gray)&#10;            }&#10;        },&#10;        title = {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&quot;Filters&quot;, fontSize = 20.sp, fontWeight = FontWeight.Bold, color = Color.Black)&#10;                TextButton(onClick = {&#10;                    selectedInterest = &quot;Girls&quot;&#10;                    location = &quot;Chicago, USA&quot;&#10;                    distance = 40f&#10;                    ageRange = 20f..28f&#10;                }) {&#10;                    Text(&quot;Clear&quot;, color = Color(0xFFFF69B4), fontSize = 16.sp)&#10;                }&#10;            }&#10;        },&#10;        text = {&#10;            Column(modifier = Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {&#10;                // Interested in&#10;                Text(&quot;Interested in&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.Center) {&#10;                    FilterSegmentButton(&quot;Girls&quot;, selectedInterest == &quot;Girls&quot;) { selectedInterest = &quot;Girls&quot; }&#10;                    FilterSegmentButton(&quot;Boys&quot;, selectedInterest == &quot;Boys&quot;) { selectedInterest = &quot;Boys&quot; }&#10;                    FilterSegmentButton(&quot;Both&quot;, selectedInterest == &quot;Both&quot;) { selectedInterest = &quot;Both&quot; }&#10;                }&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Location&#10;                Text(&quot;Location&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                OutlinedTextField(&#10;                    value = location,&#10;                    onValueChange = { location = it },&#10;                    readOnly = false,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    trailingIcon = {&#10;                        Icon(imageVector = Icons.Default.ArrowForward, contentDescription = &quot;Select location&quot;, tint = Color(0xFFFF0000))&#10;                    },&#10;                    singleLine = true&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Distance&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Distance&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${distance.toInt()}km&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                Slider(&#10;                    value = distance,&#10;                    onValueChange = { distance = it },&#10;                    valueRange = 0f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = Color(0xFFBB86FC),&#10;                        activeTrackColor = Color(0xFFBB86FC),&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Age&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Age&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${ageRange.start.toInt()}-${ageRange.endInclusive.toInt()}&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                RangeSlider(&#10;                    value = ageRange,&#10;                    onValueChange = { ageRange = it },&#10;                    valueRange = 18f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = Color(0xFFBB86FC),&#10;                        activeTrackColor = Color(0xFFBB86FC),&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;            }&#10;        },&#10;        shape = RoundedCornerShape(24.dp),&#10;        containerColor = Color.White&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun FilterSegmentButton(text: String, selected: Boolean, onClick: () -&gt; Unit) {&#10;    Button(&#10;        onClick = onClick,&#10;        colors = ButtonDefaults.buttonColors(&#10;            containerColor = if (selected) Color(0xFFBB86FC) else Color.LightGray,&#10;            contentColor = if (selected) Color.White else Color.Black&#10;        ),&#10;        modifier = Modifier&#10;            .weight(1f)&#10;            .height(36.dp)&#10;            .padding(horizontal = 2.dp),&#10;        shape = RoundedCornerShape(8.dp)&#10;    ) {&#10;        Text(text)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class HomeViewModel : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val _addFavoriteState = MutableStateFlow&lt;Result&lt;Unit&gt;?&gt;(null)&#10;    val addFavoriteState: StateFlow&lt;Result&lt;Unit&gt;?&gt; = _addFavoriteState&#10;&#10;    fun addFavorite(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        val favorite = hashMapOf(&#10;            &quot;likerId&quot; to likerId,&#10;            &quot;likedId&quot; to likedId,&#10;            &quot;timestamp&quot; to Timestamp.now()&#10;        )&#10;        viewModelScope.launch {&#10;            try {&#10;                db.collection(&quot;favorites&quot;).add(favorite)&#10;                _addFavoriteState.value = Result.success(Unit)&#10;            } catch (e: Exception) {&#10;                _addFavoriteState.value = Result.failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearAddFavoriteState() {&#10;        _addFavoriteState.value = null&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/profile/GenderSelectionScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/profile/GenderSelectionScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.profile&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Check&#10;import androidx.compose.material.icons.filled.KeyboardArrowRight&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.viewmodel.ProfileViewModel&#10;&#10;&#10;@Composable&#10;fun GenderSelectionScreen(navController: NavController) {&#10;    var selectedGender by remember { mutableStateOf(&quot;Man&quot;) }&#10;    val profileViewModel: ProfileViewModel = viewModel()&#10;    var isSaving by remember { mutableStateOf(false) }&#10;    var saveError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;            .padding(horizontal = 24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Header: Back + Skip&#10;        Box(modifier = Modifier.fillMaxWidth()) {&#10;            // Back&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(RoundedCornerShape(12.dp))&#10;                    .background(Color.White)&#10;                    .clickable { navController.popBackStack() }&#10;                    .align(Alignment.CenterStart),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(Icons.Default.ArrowBack, contentDescription = &quot;Back&quot;, tint = AppColors.Text_Pink,)&#10;            }&#10;&#10;            // Skip&#10;            Text(&#10;                text = &quot;Skip&quot;,&#10;                color = AppColors.Text_Pink,&#10;                fontSize = 16.sp,&#10;                modifier = Modifier&#10;                    .align(Alignment.CenterEnd)&#10;                    .clickable { navController.navigate(&quot;interest_select&quot;) }&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(40.dp))&#10;&#10;        // Title&#10;        Text(&#10;            text = &quot;I am a&quot;,&#10;            fontWeight = FontWeight.Bold,&#10;            fontSize = 28.sp,&#10;            color = AppColors.Text_LightBlack,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(90.dp))&#10;&#10;        // Gender Options&#10;        // Gender Options&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp) // padding so với background màn hình&#10;        ) {&#10;            GenderOption(&#10;                label = &quot;Woman&quot;,&#10;                isSelected = selectedGender == &quot;Woman&quot;,&#10;                onClick = { selectedGender = &quot;Woman&quot; }&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            GenderOption(&#10;                label = &quot;Man&quot;,&#10;                isSelected = selectedGender == &quot;Man&quot;,&#10;                onClick = { selectedGender = &quot;Man&quot; }&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            GenderOption(&#10;                label = &quot;Choose another&quot;,&#10;                isSelected = selectedGender == &quot;Other&quot;,&#10;                onClick = { selectedGender = &quot;Other&quot; },&#10;                showArrow = true&#10;            )&#10;        }&#10;&#10;&#10;        Spacer(modifier = Modifier.weight(1f))&#10;&#10;        // Continue Button&#10;        Button(&#10;            onClick = {&#10;                isSaving = true&#10;                saveError = null&#10;                profileViewModel.updateGender(&#10;                    gender = selectedGender,&#10;                    onSuccess = {&#10;                        isSaving = false&#10;                        navController.navigate(&quot;interest_select&quot;)&#10;                    },&#10;                    onFailure = { e -&gt;&#10;                        isSaving = false&#10;                        saveError = e.message&#10;                    }&#10;                )&#10;            },&#10;            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFFFF1FC)),&#10;            shape = RoundedCornerShape(16.dp),&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(56.dp)&#10;        ) {&#10;            if (isSaving) {&#10;                CircularProgressIndicator(modifier = Modifier.size(24.dp), color = AppColors.Main_Primary)&#10;            } else {&#10;                Text(&#10;                    text = &quot;Continue&quot;,&#10;                    color = AppColors.Main_Primary,&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;        if (saveError != null) {&#10;            Text(&#10;                text = saveError ?: &quot;&quot;,&#10;                color = Color.Red,&#10;                modifier = Modifier.padding(top = 8.dp)&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GenderOption(&#10;    label: String,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    showArrow: Boolean = false&#10;) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(56.dp)&#10;            .clip(RoundedCornerShape(16.dp))&#10;            .background(if (isSelected) AppColors.Main_Secondary1 else Color(0xFFF8F8F8))&#10;            .clickable { onClick() }&#10;            .padding(horizontal = 16.dp),&#10;        verticalAlignment = Alignment.CenterVertically,&#10;        horizontalArrangement = Arrangement.SpaceBetween&#10;    ) {&#10;        Text(&#10;            text = label,&#10;            fontSize = 16.sp,&#10;            fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal,&#10;            color = if (isSelected) AppColors.Main_Primary else AppColors.Text_LightBlack&#10;        )&#10;&#10;        when {&#10;            isSelected -&gt; Icon(Icons.Default.Check, contentDescription = &quot;Selected&quot;, tint = AppColors.Main_Primary)&#10;            showArrow -&gt; Icon(Icons.Default.KeyboardArrowRight, contentDescription = &quot;Arrow&quot;, tint = Color.Gray)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.profile&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Check&#10;import androidx.compose.material.icons.filled.KeyboardArrowRight&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.viewmodel.ProfileViewModel&#10;&#10;&#10;@Composable&#10;fun GenderSelectionScreen(navController: NavController) {&#10;    var selectedGender by remember { mutableStateOf(&quot;Man&quot;) }&#10;    val profileViewModel: ProfileViewModel = hiltViewModel()&#10;    var isSaving by remember { mutableStateOf(false) }&#10;    var saveError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    // Observe user state for navigation after update&#10;    val userState by profileViewModel.user.collectAsState()&#10;&#10;    // Load user when screen is shown&#10;    LaunchedEffect(Unit) {&#10;        val userId = userState?.uid&#10;        if (userId != null &amp;&amp; userState == null) {&#10;            profileViewModel.loadUser(userId)&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;            .padding(horizontal = 24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Header: Back + Skip&#10;        Box(modifier = Modifier.fillMaxWidth()) {&#10;            // Back&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(RoundedCornerShape(12.dp))&#10;                    .background(Color.White)&#10;                    .clickable { navController.popBackStack() }&#10;                    .align(Alignment.CenterStart),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(Icons.Default.ArrowBack, contentDescription = &quot;Back&quot;, tint = AppColors.Text_Pink,)&#10;            }&#10;&#10;            // Skip&#10;            Text(&#10;                text = &quot;Skip&quot;,&#10;                color = AppColors.Text_Pink,&#10;                fontSize = 16.sp,&#10;                modifier = Modifier&#10;                    .align(Alignment.CenterEnd)&#10;                    .clickable { navController.navigate(&quot;interest_select&quot;) }&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(40.dp))&#10;&#10;        // Title&#10;        Text(&#10;            text = &quot;I am a&quot;,&#10;            fontWeight = FontWeight.Bold,&#10;            fontSize = 28.sp,&#10;            color = AppColors.Text_LightBlack,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(90.dp))&#10;&#10;        // Gender Options&#10;        // Gender Options&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp) // padding so với background màn hình&#10;        ) {&#10;            GenderOption(&#10;                label = &quot;Woman&quot;,&#10;                isSelected = selectedGender == &quot;Woman&quot;,&#10;                onClick = { selectedGender = &quot;Woman&quot; }&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            GenderOption(&#10;                label = &quot;Man&quot;,&#10;                isSelected = selectedGender == &quot;Man&quot;,&#10;                onClick = { selectedGender = &quot;Man&quot; }&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            GenderOption(&#10;                label = &quot;Choose another&quot;,&#10;                isSelected = selectedGender == &quot;Other&quot;,&#10;                onClick = { selectedGender = &quot;Other&quot; },&#10;                showArrow = true&#10;            )&#10;        }&#10;&#10;&#10;        Spacer(modifier = Modifier.weight(1f))&#10;&#10;        // Continue Button&#10;        Button(&#10;            onClick = {&#10;                isSaving = true&#10;                saveError = null&#10;                profileViewModel.updateGender(selectedGender)&#10;                isSaving = false&#10;                navController.navigate(&quot;interest_select&quot;)&#10;            },&#10;            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFFFF1FC)),&#10;            shape = RoundedCornerShape(16.dp),&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(56.dp)&#10;        ) {&#10;            if (isSaving) {&#10;                CircularProgressIndicator(modifier = Modifier.size(24.dp), color = AppColors.Main_Primary)&#10;            } else {&#10;                Text(&#10;                    text = &quot;Continue&quot;,&#10;                    color = AppColors.Main_Primary,&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;        if (saveError != null) {&#10;            Text(&#10;                text = saveError ?: &quot;&quot;,&#10;                color = Color.Red,&#10;                modifier = Modifier.padding(top = 8.dp)&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GenderOption(&#10;    label: String,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    showArrow: Boolean = false&#10;) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(56.dp)&#10;            .clip(RoundedCornerShape(16.dp))&#10;            .background(if (isSelected) AppColors.Main_Secondary1 else Color(0xFFF8F8F8))&#10;            .clickable { onClick() }&#10;            .padding(horizontal = 16.dp),&#10;        verticalAlignment = Alignment.CenterVertically,&#10;        horizontalArrangement = Arrangement.SpaceBetween&#10;    ) {&#10;        Text(&#10;            text = label,&#10;            fontSize = 16.sp,&#10;            fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal,&#10;            color = if (isSelected) AppColors.Main_Primary else AppColors.Text_LightBlack&#10;        )&#10;&#10;        when {&#10;            isSelected -&gt; Icon(Icons.Default.Check, contentDescription = &quot;Selected&quot;, tint = AppColors.Main_Primary)&#10;            showArrow -&gt; Icon(Icons.Default.KeyboardArrowRight, contentDescription = &quot;Arrow&quot;, tint = Color.Gray)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/profile/ProfileDetailsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/profile/ProfileDetailsScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.profile&#10;&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import coil.compose.rememberAsyncImagePainter&#10;import com.example.dating.R&#10;import com.example.dating.ui.components.CustomCalendarDialog&#10;import com.example.dating.ui.theme.AppColors&#10;import com.example.dating.viewmodel.ProfileViewModel&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.runtime.snapshots.SnapshotStateList&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ProfileDetailsScreen(&#10;    navController: NavController,&#10;    profileViewModel: ProfileViewModel = hiltViewModel()&#10;) {&#10;    val user by profileViewModel.user.collectAsState()&#10;    val updateState by profileViewModel.updateState.collectAsState()&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;    ) {&#10;        when {&#10;            updateState is Resource.Loading -&gt; {&#10;                Surface(&#10;                    color = Color.White.copy(alpha = 0.9f),&#10;                    shape = MaterialTheme.shapes.medium,&#10;                    tonalElevation = 8.dp,&#10;                    modifier = Modifier.align(Alignment.Center)&#10;                ) {&#10;                    CircularProgressIndicator(modifier = Modifier.padding(32.dp))&#10;                }&#10;            }&#10;            updateState is Resource.Failure -&gt; {&#10;                val exception = (updateState as Resource.Failure).exception&#10;                Surface(&#10;                    color = Color.White.copy(alpha = 0.95f),&#10;                    shape = MaterialTheme.shapes.medium,&#10;                    tonalElevation = 8.dp,&#10;                    modifier = Modifier.align(Alignment.Center).padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = exception.localizedMessage ?: &quot;Update failed.&quot;,&#10;                        color = Color.Red,&#10;                        fontWeight = FontWeight.Bold,&#10;                        fontSize = 18.sp,&#10;                        modifier = Modifier.padding(24.dp)&#10;                    )&#10;                }&#10;            }&#10;            else -&gt; {&#10;                user?.let {&#10;                    ProfileContent(&#10;                        navController = navController,&#10;                        initialProfile = it, // Pass non-null User object&#10;                        profileViewModel = profileViewModel&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileContent(&#10;    navController: NavController,&#10;    initialProfile: User, // Change type to User&#10;    profileViewModel: ProfileViewModel&#10;) {&#10;    var isEditMode by remember { mutableStateOf(false) }&#10;    var showCalendar by remember { mutableStateOf(false) }&#10;&#10;    var editableFirstName by remember { mutableStateOf(initialProfile.firstName) }&#10;    var editableLastName by remember { mutableStateOf(initialProfile.lastName) }&#10;    var editableBirthday by remember { mutableStateOf(initialProfile.birthday ?: &quot;&quot;) }&#10;    var editableGender by remember { mutableStateOf(initialProfile.gender ?: &quot;&quot;) }&#10;    var editableJob by remember { mutableStateOf(initialProfile.job ?: &quot;&quot;) }&#10;    var editableLocation by remember { mutableStateOf(initialProfile.location ?: &quot;&quot;) }&#10;    var editableDescription by remember { mutableStateOf(initialProfile.description ?: &quot;&quot;) }&#10;&#10;    val selectedInterests = remember {&#10;        initialProfile.interests.toMutableStateList()&#10;    }&#10;&#10;    var isSaving by remember { mutableStateOf(false) }&#10;    var saveError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    val allInterests = remember {&#10;        listOf(&#10;            Interest(&quot;Photography&quot;, R.drawable.ic_interest_photography),&#10;            Interest(&quot;Shopping&quot;, R.drawable.ic_interest_shopping),&#10;            Interest(&quot;Karaoke&quot;, R.drawable.ic_interest_karaoke),&#10;            Interest(&quot;Yoga&quot;, R.drawable.ic_interest_yoga),&#10;            Interest(&quot;Cooking&quot;, R.drawable.ic_interest_cooking),&#10;            Interest(&quot;Tennis&quot;, R.drawable.ic_interest_tennis),&#10;            Interest(&quot;Run&quot;, R.drawable.ic_interest_run),&#10;            Interest(&quot;Swimming&quot;, R.drawable.ic_interest_swimming),&#10;            Interest(&quot;Art&quot;, R.drawable.ic_interest_art),&#10;            Interest(&quot;Traveling&quot;, R.drawable.ic_interest_travelling),&#10;            Interest(&quot;Extreme&quot;, R.drawable.ic_interest_extreme),&#10;            Interest(&quot;Music&quot;, R.drawable.ic_interest_music),&#10;            Interest(&quot;Drink&quot;, R.drawable.ic_interest_drink),&#10;            Interest(&quot;Video games&quot;, R.drawable.ic_interest_game)&#10;        )&#10;    }&#10;&#10;    LazyColumn(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        // Top Bar: Back Button and Edit/Done Button&#10;        item {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth().padding(start = 32.dp, end = 32.dp, top = 16.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                IconButton(onClick = { navController.popBackStack() }) {&#10;                    Icon(imageVector = Icons.Filled.ArrowBack, contentDescription = &quot;Back&quot;, tint = AppColors.Text_Pink)&#10;                }&#10;                TextButton(onClick = {&#10;                    if (isEditMode) {&#10;                        isSaving = true&#10;                        saveError = null&#10;                        val user = User(&#10;                            uid = initialProfile.uid,&#10;                            firstName = editableFirstName,&#10;                            lastName = editableLastName,&#10;                            birthday = editableBirthday,&#10;                            imageUrl = initialProfile.imageUrl,&#10;                            avatarUrl = initialProfile.avatarUrl,&#10;                            gender = editableGender,&#10;                            job = editableJob,&#10;                            location = editableLocation,&#10;                            description = editableDescription,&#10;                            interests = selectedInterests.toList()&#10;                        )&#10;                        profileViewModel.updateProfile(user)&#10;                        isSaving = false&#10;                        isEditMode = false&#10;                    } else {&#10;                        isEditMode = true&#10;                    }&#10;                }) {&#10;                    Text(&#10;                        text = if (isEditMode) &quot;Done&quot; else &quot;Edit Profile&quot;,&#10;                        color = AppColors.Text_Pink,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;&#10;        // Saving Indicator and Error Message&#10;        item {&#10;            if (isSaving) {&#10;                CircularProgressIndicator(modifier = Modifier.padding(vertical = 8.dp))&#10;            }&#10;            if (saveError != null) {&#10;                Text(&#10;                    text = saveError ?: &quot;Unknown error while saving&quot;,&#10;                    color = Color.Red,&#10;                    modifier = Modifier.padding(vertical = 8.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        // Profile Image&#10;        item {&#10;            val imageUrl = initialProfile.avatarUrl ?: initialProfile.imageUrl.firstOrNull()&#10;            val imageModifier = Modifier.size(170.dp).padding(vertical = 8.dp)&#10;            if (!imageUrl.isNullOrBlank()) {&#10;                Image(&#10;                    painter = rememberAsyncImagePainter(model = imageUrl, error = painterResource(R.drawable.ic_avatar)),&#10;                    contentDescription = &quot;Profile Image&quot;,&#10;                    modifier = imageModifier,&#10;                    contentScale = ContentScale.Crop&#10;                )&#10;            } else {&#10;                Image(&#10;                    painter = painterResource(R.drawable.ic_avatar),&#10;                    contentDescription = &quot;Default Avatar&quot;,&#10;                    modifier = imageModifier,&#10;                    contentScale = ContentScale.Crop&#10;                )&#10;            }&#10;        }&#10;&#10;        // Form Fields&#10;        item {&#10;            NameFields(firstName = editableFirstName, lastName = editableLastName, isEditMode = isEditMode,&#10;                onFirstNameChange = { editableFirstName = it },&#10;                onLastNameChange = { editableLastName = it }&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            BirthdayGenderFields(birthday = editableBirthday, gender = editableGender, isEditMode = isEditMode,&#10;                showCalendar = showCalendar,&#10;                onShowCalendar = { showCalendar = true },&#10;                onGenderChange = { editableGender = it }&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            JobDropdown(job = editableJob, isEditMode = isEditMode, onJobChange = { editableJob = it })&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            LocationField(location = editableLocation, isEditMode = isEditMode,&#10;                onLocationChange = { editableLocation = it }&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            DescriptionField(description = editableDescription, isEditMode = isEditMode,&#10;                onDescriptionChange = { editableDescription = it }&#10;            )&#10;        }&#10;&#10;        // Interests Section&#10;        item {&#10;            Text(&#10;                text = &quot;Interests:&quot;,&#10;                fontSize = 18.sp,&#10;                color = Color.DarkGray,&#10;                modifier = Modifier&#10;                    .padding(top = 24.dp, bottom = 16.dp)&#10;                    .fillMaxWidth(),&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;        item {&#10;            InterestsSection(&#10;                allInterests = allInterests,&#10;                selectedInterests = selectedInterests,&#10;                isEditMode = isEditMode&#10;            )&#10;        }&#10;    }&#10;&#10;    if (showCalendar) {&#10;        CustomCalendarDialog(&#10;            onDateSelected = { selectedDate -&gt;&#10;                editableBirthday = selectedDate.toString() // Ensure your date format is correct&#10;                showCalendar = false&#10;            },&#10;            onDismiss = { showCalendar = false }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun NameFields(&#10;    firstName: String,&#10;    lastName: String,&#10;    isEditMode: Boolean,&#10;    onFirstNameChange: (String) -&gt; Unit,&#10;    onLastNameChange: (String) -&gt; Unit&#10;) {&#10;    Row(modifier = Modifier.fillMaxWidth()) {&#10;        OutlinedTextField(&#10;            value = firstName,&#10;            onValueChange = { if (isEditMode) onFirstNameChange(it) },&#10;            label = { Text(&quot;First Name&quot;) },&#10;            modifier = Modifier.weight(1f).padding(end = 4.dp, bottom = 8.dp),&#10;            enabled = isEditMode,&#10;            readOnly = !isEditMode&#10;        )&#10;        OutlinedTextField(&#10;            value = lastName,&#10;            onValueChange = { if (isEditMode) onLastNameChange(it) },&#10;            label = { Text(&quot;Last Name&quot;) },&#10;            modifier = Modifier.weight(1f).padding(start = 4.dp, bottom = 8.dp),&#10;            enabled = isEditMode,&#10;            readOnly = !isEditMode&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BirthdayGenderFields(&#10;    birthday: String,&#10;    gender: String,&#10;    isEditMode: Boolean,&#10;    showCalendar: Boolean,&#10;    onShowCalendar: () -&gt; Unit,&#10;    onGenderChange: (String) -&gt; Unit&#10;) {&#10;    Row(modifier = Modifier.fillMaxWidth()) {&#10;        Box(&#10;            modifier = Modifier.weight(1f).padding(end = 4.dp, bottom = 8.dp)&#10;                .clickable(enabled = isEditMode) { if (isEditMode) onShowCalendar() }&#10;        ) {&#10;            OutlinedTextField(&#10;                value = birthday,&#10;                onValueChange = {},&#10;                label = { Text(&quot;Birthday&quot;) },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = isEditMode,&#10;                readOnly = true&#10;            )&#10;        }&#10;        var expanded by remember { mutableStateOf(false) }&#10;        val genderOptions = listOf(&quot;Man&quot;, &quot;Woman&quot;, &quot;Other&quot;)&#10;        Box(&#10;            modifier = Modifier.weight(1f)&#10;                .padding(start = 4.dp, bottom = 8.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = gender,&#10;                onValueChange = {},&#10;                label = { Text(&quot;Gender&quot;) },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .then(if (isEditMode) Modifier.clickable { expanded = true } else Modifier),&#10;                enabled = isEditMode,&#10;                readOnly = true,&#10;                trailingIcon = {&#10;                    IconButton(onClick = { if (isEditMode) expanded = true }) {&#10;                        Icon(&#10;                            painter = painterResource(R.drawable.ic_arrow_drop_down),&#10;                            contentDescription = &quot;Dropdown&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;            DropdownMenu(&#10;                expanded = expanded,&#10;                onDismissRequest = { expanded = false }&#10;            ) {&#10;                genderOptions.forEach { option -&gt;&#10;                    DropdownMenuItem(&#10;                        text = { Text(option) },&#10;                        onClick = {&#10;                            onGenderChange(option)&#10;                            expanded = false&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun JobDropdown(&#10;    job: String,&#10;    isEditMode: Boolean,&#10;    onJobChange: (String) -&gt; Unit&#10;) {&#10;    val jobOptions = listOf(&#10;        &quot;Software Engineer&quot;, &quot;Doctor&quot;, &quot;Teacher&quot;, &quot;Nurse&quot;, &quot;Accountant&quot;, &quot;Designer&quot;, &quot;Manager&quot;, &quot;Salesperson&quot;, &quot;Lawyer&quot;, &quot;Pharmacist&quot;,&#10;        &quot;Architect&quot;, &quot;Chef&quot;, &quot;Police Officer&quot;, &quot;Firefighter&quot;, &quot;Scientist&quot;, &quot;Dentist&quot;, &quot;Mechanic&quot;, &quot;Electrician&quot;, &quot;Plumber&quot;, &quot;Pilot&quot;,&#10;        &quot;Flight Attendant&quot;, &quot;Journalist&quot;, &quot;Photographer&quot;, &quot;Artist&quot;, &quot;Musician&quot;, &quot;Actor&quot;, &quot;Writer&quot;, &quot;Engineer&quot;, &quot;Consultant&quot;, &quot;Entrepreneur&quot;&#10;    )&#10;    var jobDropdownExpanded by remember { mutableStateOf(false) }&#10;    ExposedDropdownMenuBox(&#10;        expanded = jobDropdownExpanded,&#10;        onExpandedChange = { if (isEditMode) jobDropdownExpanded = !jobDropdownExpanded }&#10;    ) {&#10;        OutlinedTextField(&#10;            value = job,&#10;            onValueChange = { if (isEditMode) onJobChange(it) },&#10;            label = { Text(&quot;Job&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            enabled = isEditMode,&#10;            readOnly = false,&#10;            singleLine = true,&#10;            trailingIcon = {&#10;                ExposedDropdownMenuDefaults.TrailingIcon(expanded = jobDropdownExpanded)&#10;            }&#10;        )&#10;        ExposedDropdownMenu(&#10;            expanded = jobDropdownExpanded,&#10;            onDismissRequest = { jobDropdownExpanded = false }&#10;        ) {&#10;            jobOptions.filter { it.contains(job, ignoreCase = true) || job.isBlank() }&#10;                .forEach { option -&gt;&#10;                    DropdownMenuItem(&#10;                        text = { Text(option) },&#10;                        onClick = {&#10;                            onJobChange(option)&#10;                            jobDropdownExpanded = false&#10;                        }&#10;                    )&#10;                }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun LocationField(&#10;    location: String,&#10;    isEditMode: Boolean,&#10;    onLocationChange: (String) -&gt; Unit&#10;) {&#10;    OutlinedTextField(&#10;        value = location,&#10;        onValueChange = { if (isEditMode &amp;&amp; it.length &lt;= 70) onLocationChange(it) },&#10;        label = { Text(&quot;Location&quot;) },&#10;        modifier = Modifier.fillMaxWidth(),&#10;        enabled = isEditMode,&#10;        readOnly = !isEditMode,&#10;        singleLine = true&#10;    )&#10;}&#10;&#10;@Composable&#10;fun DescriptionField(&#10;    description: String,&#10;    isEditMode: Boolean,&#10;    onDescriptionChange: (String) -&gt; Unit&#10;) {&#10;    OutlinedTextField(&#10;        value = description,&#10;        onValueChange = { if (isEditMode &amp;&amp; it.length &lt;= 150) onDescriptionChange(it) },&#10;        label = { Text(&quot;Description&quot;) },&#10;        modifier = Modifier.fillMaxWidth(),&#10;        enabled = isEditMode,&#10;        readOnly = !isEditMode,&#10;        supportingText = { Text(&quot;Max 150 characters&quot;) },&#10;        maxLines = 3&#10;    )&#10;}&#10;&#10;@OptIn(ExperimentalLayoutApi::class)&#10;@Composable&#10;fun InterestsSection(&#10;    allInterests: List&lt;Interest&gt;,&#10;    selectedInterests: SnapshotStateList&lt;String&gt;,&#10;    isEditMode: Boolean&#10;) {&#10;    // Display interests in rows of two using chunked&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(bottom = 16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        allInterests.chunked(2).forEach { rowInterests -&gt;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.Center&#10;            ) {&#10;                rowInterests.forEach { interest -&gt;&#10;                    val isSelected = selectedInterests.contains(interest.name)&#10;                    Surface(&#10;                        shape = MaterialTheme.shapes.medium,&#10;                        color = if (isSelected) AppColors.Text_Pink.copy(alpha = 0.15f) else Color.LightGray.copy(alpha = 0.2f),&#10;                        border = if (isSelected) BorderStroke(2.dp, AppColors.Text_Pink) else null,&#10;                        modifier = Modifier&#10;                            .padding(4.dp)&#10;                            .weight(1f)&#10;                            .height(48.dp)&#10;                            .clickable(enabled = isEditMode) {&#10;                                if (isEditMode) {&#10;                                    if (isSelected) selectedInterests.remove(interest.name)&#10;                                    else selectedInterests.add(interest.name)&#10;                                }&#10;                            },&#10;                        tonalElevation = if (isSelected) 4.dp else 0.dp&#10;                    ) {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.Center,&#10;                            modifier = Modifier.fillMaxSize().padding(horizontal = 12.dp)&#10;                        ) {&#10;                            Icon(&#10;                                painter = painterResource(id = interest.icon),&#10;                                contentDescription = interest.name,&#10;                                tint = if (isSelected) AppColors.Text_Pink else Color.Gray,&#10;                                modifier = Modifier.size(24.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                            Text(&#10;                                text = interest.name,&#10;                                color = if (isSelected) AppColors.Text_Pink else Color.DarkGray,&#10;                                fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                // If the row has only one interest, add a Spacer to fill the second column&#10;                if (rowInterests.size == 1) {&#10;                    Spacer(modifier = Modifier.weight(1f))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.dating.ui.profile&#10;&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import coil.compose.rememberAsyncImagePainter&#10;import com.example.dating.R&#10;import com.example.dating.ui.components.CustomCalendarDialog&#10;import com.example.dating.ui.theme.AppColors&#10;import com.example.dating.viewmodel.ProfileViewModel&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.runtime.snapshots.SnapshotStateList&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ProfileDetailsScreen(&#10;    navController: NavController,&#10;    profileViewModel: ProfileViewModel = hiltViewModel()&#10;) {&#10;    val user by profileViewModel.user.collectAsState()&#10;    val updateState by profileViewModel.updateState.collectAsState()&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;    ) {&#10;        when (updateState) {&#10;            is Resource.Loading -&gt; {&#10;                Surface(&#10;                    color = Color.White.copy(alpha = 0.9f),&#10;                    shape = MaterialTheme.shapes.medium,&#10;                    tonalElevation = 8.dp,&#10;                    modifier = Modifier.align(Alignment.Center)&#10;                ) {&#10;                    CircularProgressIndicator(modifier = Modifier.padding(32.dp))&#10;                }&#10;            }&#10;            is Resource.Failure -&gt; {&#10;                val exception = (updateState as Resource.Failure).exception&#10;                Surface(&#10;                    color = Color.White.copy(alpha = 0.95f),&#10;                    shape = MaterialTheme.shapes.medium,&#10;                    tonalElevation = 8.dp,&#10;                    modifier = Modifier.align(Alignment.Center).padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = exception.localizedMessage ?: &quot;Update failed.&quot;,&#10;                        color = Color.Red,&#10;                        fontWeight = FontWeight.Bold,&#10;                        fontSize = 18.sp,&#10;                        modifier = Modifier.padding(24.dp)&#10;                    )&#10;                }&#10;            }&#10;            else -&gt; {&#10;                user?.let {&#10;                    ProfileContent(&#10;                        navController = navController,&#10;                        initialProfile = it,&#10;                        profileViewModel = profileViewModel&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileContent(&#10;    navController: NavController,&#10;    initialProfile: User, // Change type to User&#10;    profileViewModel: ProfileViewModel&#10;) {&#10;    var isEditMode by remember { mutableStateOf(false) }&#10;    var showCalendar by remember { mutableStateOf(false) }&#10;&#10;    var editableFirstName by remember { mutableStateOf(initialProfile.firstName) }&#10;    var editableLastName by remember { mutableStateOf(initialProfile.lastName) }&#10;    var editableBirthday by remember { mutableStateOf(initialProfile.birthday ?: &quot;&quot;) }&#10;    var editableGender by remember { mutableStateOf(initialProfile.gender ?: &quot;&quot;) }&#10;    var editableJob by remember { mutableStateOf(initialProfile.job ?: &quot;&quot;) }&#10;    var editableLocation by remember { mutableStateOf(initialProfile.location ?: &quot;&quot;) }&#10;    var editableDescription by remember { mutableStateOf(initialProfile.description ?: &quot;&quot;) }&#10;&#10;    val selectedInterests = remember {&#10;        initialProfile.interests.toMutableStateList()&#10;    }&#10;&#10;    var isSaving by remember { mutableStateOf(false) }&#10;    var saveError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    val allInterests = remember {&#10;        listOf(&#10;            Interest(&quot;Photography&quot;, R.drawable.ic_interest_photography),&#10;            Interest(&quot;Shopping&quot;, R.drawable.ic_interest_shopping),&#10;            Interest(&quot;Karaoke&quot;, R.drawable.ic_interest_karaoke),&#10;            Interest(&quot;Yoga&quot;, R.drawable.ic_interest_yoga),&#10;            Interest(&quot;Cooking&quot;, R.drawable.ic_interest_cooking),&#10;            Interest(&quot;Tennis&quot;, R.drawable.ic_interest_tennis),&#10;            Interest(&quot;Run&quot;, R.drawable.ic_interest_run),&#10;            Interest(&quot;Swimming&quot;, R.drawable.ic_interest_swimming),&#10;            Interest(&quot;Art&quot;, R.drawable.ic_interest_art),&#10;            Interest(&quot;Traveling&quot;, R.drawable.ic_interest_travelling),&#10;            Interest(&quot;Extreme&quot;, R.drawable.ic_interest_extreme),&#10;            Interest(&quot;Music&quot;, R.drawable.ic_interest_music),&#10;            Interest(&quot;Drink&quot;, R.drawable.ic_interest_drink),&#10;            Interest(&quot;Video games&quot;, R.drawable.ic_interest_game)&#10;        )&#10;    }&#10;&#10;    LazyColumn(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        // Top Bar: Back Button and Edit/Done Button&#10;        item {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth().padding(start = 32.dp, end = 32.dp, top = 16.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                IconButton(onClick = { navController.popBackStack() }) {&#10;                    Icon(imageVector = Icons.Filled.ArrowBack, contentDescription = &quot;Back&quot;, tint = AppColors.Text_Pink)&#10;                }&#10;                TextButton(onClick = {&#10;                    if (isEditMode) {&#10;                        isSaving = true&#10;                        saveError = null&#10;                        val user = User(&#10;                            uid = initialProfile.uid,&#10;                            firstName = editableFirstName,&#10;                            lastName = editableLastName,&#10;                            birthday = editableBirthday,&#10;                            imageUrl = initialProfile.imageUrl,&#10;                            avatarUrl = initialProfile.avatarUrl,&#10;                            gender = editableGender,&#10;                            job = editableJob,&#10;                            location = editableLocation,&#10;                            description = editableDescription,&#10;                            interests = selectedInterests.toList()&#10;                        )&#10;                        profileViewModel.updateProfile(user)&#10;                        isSaving = false&#10;                        isEditMode = false&#10;                    } else {&#10;                        isEditMode = true&#10;                    }&#10;                }) {&#10;                    Text(&#10;                        text = if (isEditMode) &quot;Done&quot; else &quot;Edit Profile&quot;,&#10;                        color = AppColors.Text_Pink,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;&#10;        // Saving Indicator and Error Message&#10;        item {&#10;            if (isSaving) {&#10;                CircularProgressIndicator(modifier = Modifier.padding(vertical = 8.dp))&#10;            }&#10;            if (saveError != null) {&#10;                Text(&#10;                    text = saveError ?: &quot;Unknown error while saving&quot;,&#10;                    color = Color.Red,&#10;                    modifier = Modifier.padding(vertical = 8.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        // Profile Image&#10;        item {&#10;            val imageUrl = initialProfile.avatarUrl ?: initialProfile.imageUrl.firstOrNull()&#10;            val imageModifier = Modifier.size(170.dp).padding(vertical = 8.dp)&#10;            if (!imageUrl.isNullOrBlank()) {&#10;                Image(&#10;                    painter = rememberAsyncImagePainter(model = imageUrl, error = painterResource(R.drawable.ic_avatar)),&#10;                    contentDescription = &quot;Profile Image&quot;,&#10;                    modifier = imageModifier,&#10;                    contentScale = ContentScale.Crop&#10;                )&#10;            } else {&#10;                Image(&#10;                    painter = painterResource(R.drawable.ic_avatar),&#10;                    contentDescription = &quot;Default Avatar&quot;,&#10;                    modifier = imageModifier,&#10;                    contentScale = ContentScale.Crop&#10;                )&#10;            }&#10;        }&#10;&#10;        // Form Fields&#10;        item {&#10;            NameFields(firstName = editableFirstName, lastName = editableLastName, isEditMode = isEditMode,&#10;                onFirstNameChange = { editableFirstName = it },&#10;                onLastNameChange = { editableLastName = it }&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            BirthdayGenderFields(birthday = editableBirthday, gender = editableGender, isEditMode = isEditMode,&#10;                showCalendar = showCalendar,&#10;                onShowCalendar = { showCalendar = true },&#10;                onGenderChange = { editableGender = it }&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            JobDropdown(job = editableJob, isEditMode = isEditMode, onJobChange = { editableJob = it })&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            LocationField(location = editableLocation, isEditMode = isEditMode,&#10;                onLocationChange = { editableLocation = it }&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            DescriptionField(description = editableDescription, isEditMode = isEditMode,&#10;                onDescriptionChange = { editableDescription = it }&#10;            )&#10;        }&#10;&#10;        // Interests Section&#10;        item {&#10;            Text(&#10;                text = &quot;Interests:&quot;,&#10;                fontSize = 18.sp,&#10;                color = Color.DarkGray,&#10;                modifier = Modifier&#10;                    .padding(top = 24.dp, bottom = 16.dp)&#10;                    .fillMaxWidth(),&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;        item {&#10;            InterestsSection(&#10;                allInterests = allInterests,&#10;                selectedInterests = selectedInterests,&#10;                isEditMode = isEditMode&#10;            )&#10;        }&#10;    }&#10;&#10;    if (showCalendar) {&#10;        CustomCalendarDialog(&#10;            onDateSelected = { selectedDate -&gt;&#10;                editableBirthday = selectedDate.toString() // Ensure your date format is correct&#10;                showCalendar = false&#10;            },&#10;            onDismiss = { showCalendar = false }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun NameFields(&#10;    firstName: String,&#10;    lastName: String,&#10;    isEditMode: Boolean,&#10;    onFirstNameChange: (String) -&gt; Unit,&#10;    onLastNameChange: (String) -&gt; Unit&#10;) {&#10;    Row(modifier = Modifier.fillMaxWidth()) {&#10;        OutlinedTextField(&#10;            value = firstName,&#10;            onValueChange = { if (isEditMode) onFirstNameChange(it) },&#10;            label = { Text(&quot;First Name&quot;) },&#10;            modifier = Modifier.weight(1f).padding(end = 4.dp, bottom = 8.dp),&#10;            enabled = isEditMode,&#10;            readOnly = !isEditMode&#10;        )&#10;        OutlinedTextField(&#10;            value = lastName,&#10;            onValueChange = { if (isEditMode) onLastNameChange(it) },&#10;            label = { Text(&quot;Last Name&quot;) },&#10;            modifier = Modifier.weight(1f).padding(start = 4.dp, bottom = 8.dp),&#10;            enabled = isEditMode,&#10;            readOnly = !isEditMode&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BirthdayGenderFields(&#10;    birthday: String,&#10;    gender: String,&#10;    isEditMode: Boolean,&#10;    showCalendar: Boolean,&#10;    onShowCalendar: () -&gt; Unit,&#10;    onGenderChange: (String) -&gt; Unit&#10;) {&#10;    Row(modifier = Modifier.fillMaxWidth()) {&#10;        Box(&#10;            modifier = Modifier.weight(1f).padding(end = 4.dp, bottom = 8.dp)&#10;                .clickable(enabled = isEditMode) { if (isEditMode) onShowCalendar() }&#10;        ) {&#10;            OutlinedTextField(&#10;                value = birthday,&#10;                onValueChange = {},&#10;                label = { Text(&quot;Birthday&quot;) },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = isEditMode,&#10;                readOnly = true&#10;            )&#10;        }&#10;        var expanded by remember { mutableStateOf(false) }&#10;        val genderOptions = listOf(&quot;Man&quot;, &quot;Woman&quot;, &quot;Other&quot;)&#10;        Box(&#10;            modifier = Modifier.weight(1f)&#10;                .padding(start = 4.dp, bottom = 8.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = gender,&#10;                onValueChange = {},&#10;                label = { Text(&quot;Gender&quot;) },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .then(if (isEditMode) Modifier.clickable { expanded = true } else Modifier),&#10;                enabled = isEditMode,&#10;                readOnly = true,&#10;                trailingIcon = {&#10;                    IconButton(onClick = { if (isEditMode) expanded = true }) {&#10;                        Icon(&#10;                            painter = painterResource(R.drawable.ic_arrow_drop_down),&#10;                            contentDescription = &quot;Dropdown&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;            DropdownMenu(&#10;                expanded = expanded,&#10;                onDismissRequest = { expanded = false }&#10;            ) {&#10;                genderOptions.forEach { option -&gt;&#10;                    DropdownMenuItem(&#10;                        text = { Text(option) },&#10;                        onClick = {&#10;                            onGenderChange(option)&#10;                            expanded = false&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun JobDropdown(&#10;    job: String,&#10;    isEditMode: Boolean,&#10;    onJobChange: (String) -&gt; Unit&#10;) {&#10;    val jobOptions = listOf(&#10;        &quot;Software Engineer&quot;, &quot;Doctor&quot;, &quot;Teacher&quot;, &quot;Nurse&quot;, &quot;Accountant&quot;, &quot;Designer&quot;, &quot;Manager&quot;, &quot;Salesperson&quot;, &quot;Lawyer&quot;, &quot;Pharmacist&quot;,&#10;        &quot;Architect&quot;, &quot;Chef&quot;, &quot;Police Officer&quot;, &quot;Firefighter&quot;, &quot;Scientist&quot;, &quot;Dentist&quot;, &quot;Mechanic&quot;, &quot;Electrician&quot;, &quot;Plumber&quot;, &quot;Pilot&quot;,&#10;        &quot;Flight Attendant&quot;, &quot;Journalist&quot;, &quot;Photographer&quot;, &quot;Artist&quot;, &quot;Musician&quot;, &quot;Actor&quot;, &quot;Writer&quot;, &quot;Engineer&quot;, &quot;Consultant&quot;, &quot;Entrepreneur&quot;&#10;    )&#10;    var jobDropdownExpanded by remember { mutableStateOf(false) }&#10;    ExposedDropdownMenuBox(&#10;        expanded = jobDropdownExpanded,&#10;        onExpandedChange = { if (isEditMode) jobDropdownExpanded = !jobDropdownExpanded }&#10;    ) {&#10;        OutlinedTextField(&#10;            value = job,&#10;            onValueChange = { if (isEditMode) onJobChange(it) },&#10;            label = { Text(&quot;Job&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            enabled = isEditMode,&#10;            readOnly = false,&#10;            singleLine = true,&#10;            trailingIcon = {&#10;                ExposedDropdownMenuDefaults.TrailingIcon(expanded = jobDropdownExpanded)&#10;            }&#10;        )&#10;        ExposedDropdownMenu(&#10;            expanded = jobDropdownExpanded,&#10;            onDismissRequest = { jobDropdownExpanded = false }&#10;        ) {&#10;            jobOptions.filter { it.contains(job, ignoreCase = true) || job.isBlank() }&#10;                .forEach { option -&gt;&#10;                    DropdownMenuItem(&#10;                        text = { Text(option) },&#10;                        onClick = {&#10;                            onJobChange(option)&#10;                            jobDropdownExpanded = false&#10;                        }&#10;                    )&#10;                }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun LocationField(&#10;    location: String,&#10;    isEditMode: Boolean,&#10;    onLocationChange: (String) -&gt; Unit&#10;) {&#10;    OutlinedTextField(&#10;        value = location,&#10;        onValueChange = { if (isEditMode &amp;&amp; it.length &lt;= 70) onLocationChange(it) },&#10;        label = { Text(&quot;Location&quot;) },&#10;        modifier = Modifier.fillMaxWidth(),&#10;        enabled = isEditMode,&#10;        readOnly = !isEditMode,&#10;        singleLine = true&#10;    )&#10;}&#10;&#10;@Composable&#10;fun DescriptionField(&#10;    description: String,&#10;    isEditMode: Boolean,&#10;    onDescriptionChange: (String) -&gt; Unit&#10;) {&#10;    OutlinedTextField(&#10;        value = description,&#10;        onValueChange = { if (isEditMode &amp;&amp; it.length &lt;= 150) onDescriptionChange(it) },&#10;        label = { Text(&quot;Description&quot;) },&#10;        modifier = Modifier.fillMaxWidth(),&#10;        enabled = isEditMode,&#10;        readOnly = !isEditMode,&#10;        supportingText = { Text(&quot;Max 150 characters&quot;) },&#10;        maxLines = 3&#10;    )&#10;}&#10;&#10;@OptIn(ExperimentalLayoutApi::class)&#10;@Composable&#10;fun InterestsSection(&#10;    allInterests: List&lt;Interest&gt;,&#10;    selectedInterests: SnapshotStateList&lt;String&gt;,&#10;    isEditMode: Boolean&#10;) {&#10;    // Display interests in rows of two using chunked&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(bottom = 16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        allInterests.chunked(2).forEach { rowInterests -&gt;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.Center&#10;            ) {&#10;                rowInterests.forEach { interest -&gt;&#10;                    val isSelected = selectedInterests.contains(interest.name)&#10;                    Surface(&#10;                        shape = MaterialTheme.shapes.medium,&#10;                        color = if (isSelected) AppColors.Text_Pink.copy(alpha = 0.15f) else Color.LightGray.copy(alpha = 0.2f),&#10;                        border = if (isSelected) BorderStroke(2.dp, AppColors.Text_Pink) else null,&#10;                        modifier = Modifier&#10;                            .padding(4.dp)&#10;                            .weight(1f)&#10;                            .height(48.dp)&#10;                            .clickable(enabled = isEditMode) {&#10;                                if (isEditMode) {&#10;                                    if (isSelected) selectedInterests.remove(interest.name)&#10;                                    else selectedInterests.add(interest.name)&#10;                                }&#10;                            },&#10;                        tonalElevation = if (isSelected) 4.dp else 0.dp&#10;                    ) {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.Center,&#10;                            modifier = Modifier.fillMaxSize().padding(horizontal = 12.dp)&#10;                        ) {&#10;                            Icon(&#10;                                painter = painterResource(id = interest.icon),&#10;                                contentDescription = interest.name,&#10;                                tint = if (isSelected) AppColors.Text_Pink else Color.Gray,&#10;                                modifier = Modifier.size(24.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                            Text(&#10;                                text = interest.name,&#10;                                color = if (isSelected) AppColors.Text_Pink else Color.DarkGray,&#10;                                fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                // If the row has only one interest, add a Spacer to fill the second column&#10;                if (rowInterests.size == 1) {&#10;                    Spacer(modifier = Modifier.weight(1f))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/HomeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/HomeViewModel.kt" />
              <option name="originalContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.FavoriteRepository&#10;import com.example.dating.data.model.repository.MatchRepository&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class HomeViewModel : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val matchRepository = MatchRepository()&#10;    private val favoriteRepository = FavoriteRepository()&#10;   &#10;    private val _profiles = MutableStateFlow&lt;List&lt;Map&lt;String, Any&gt;&gt;&gt;(emptyList())&#10;    val profiles: StateFlow&lt;List&lt;Map&lt;String, Any&gt;&gt;&gt; = _profiles&#10;&#10;    private val _isLoading = MutableStateFlow(true)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading&#10;&#10;    private val _errorMessage = MutableStateFlow&lt;String?&gt;(null)&#10;    val errorMessage: StateFlow&lt;String?&gt; = _errorMessage&#10;&#10;    private val _matchFoundUserId = MutableStateFlow&lt;String?&gt;(null)&#10;    val matchFoundUserId: StateFlow&lt;String?&gt; = _matchFoundUserId&#10;&#10;    fun fetchHome() {&#10;        val currentUserId = FirebaseAuth.getInstance().currentUser?.uid&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val snapshot = db.collection(&quot;users&quot;).get().await()&#10;                val allProfiles = snapshot.documents.mapNotNull { doc -&gt;&#10;                    val data = doc.data&#10;                    if (doc.id != currentUserId &amp;&amp; data != null) data + (&quot;uid&quot; to doc.id) else null&#10;                }&#10;                _profiles.value = allProfiles&#10;                _isLoading.value = false&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = e.message&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun likeProfile(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            try {&#10;                // Add favorite using repository&#10;                val added = favoriteRepository.addFavorite(likerId, likedId)&#10;                // Check for match using repository&#10;                val isMatch = favoriteRepository.isMatch(likerId, likedId)&#10;                if (isMatch) {&#10;                    _matchFoundUserId.value = likedId&#10;                    android.util.Log.d(&quot;HomeViewModel&quot;, &quot;Calling MatchRepository.saveMatch with $likerId and $likedId&quot;)&#10;                    matchRepository.saveMatch(likerId, likedId, true)&#10;                } else {&#10;                    _matchFoundUserId.value = null&#10;                    android.util.Log.d(&quot;HomeViewModel&quot;, &quot;Calling MatchRepository.saveMatch with $likerId and $likedId, status=false&quot;)&#10;                    matchRepository.saveMatch(likerId, likedId, false)&#10;                }&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = e.message&#10;            }&#10;        }&#10;    }&#10;" />
              <option name="updatedContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.FavoriteRepository&#10;import com.example.dating.data.model.repository.MatchRepository&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class HomeViewModel : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val matchRepository = MatchRepository()&#10;    private val favoriteRepository = FavoriteRepository()&#10;   &#10;    private val _profiles = MutableStateFlow&lt;List&lt;Map&lt;String, Any&gt;&gt;&gt;(emptyList())&#10;    val profiles: StateFlow&lt;List&lt;Map&lt;String, Any&gt;&gt;&gt; = _profiles&#10;&#10;    private val _isLoading = MutableStateFlow(true)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading&#10;&#10;    private val _errorMessage = MutableStateFlow&lt;String?&gt;(null)&#10;    val errorMessage: StateFlow&lt;String?&gt; = _errorMessage&#10;&#10;    private val _matchFoundUserId = MutableStateFlow&lt;String?&gt;(null)&#10;    val matchFoundUserId: StateFlow&lt;String?&gt; = _matchFoundUserId&#10;&#10;    fun fetchHome() {&#10;        val currentUserId = FirebaseAuth.getInstance().currentUser?.uid&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val snapshot = db.collection(&quot;users&quot;).get().await()&#10;                val allProfiles = snapshot.documents.mapNotNull { doc -&gt;&#10;                    val data = doc.data&#10;                    if (doc.id != currentUserId &amp;&amp; data != null) data + (&quot;uid&quot; to doc.id) else null&#10;                }&#10;                _profiles.value = allProfiles&#10;                _isLoading.value = false&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = e.message&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun likeProfile(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            try {&#10;                // Add favorite using repository&#10;                favoriteRepository.addFavorite(likerId, likedId)&#10;                // Check for match using repository&#10;                val isMatch = favoriteRepository.isMatch(likerId, likedId)&#10;                if (isMatch) {&#10;                    _matchFoundUserId.value = likedId&#10;                    android.util.Log.d(&quot;HomeViewModel&quot;, &quot;Calling MatchRepository.saveMatch with $likerId and $likedId&quot;)&#10;                    matchRepository.saveMatch(likerId, likedId, true)&#10;                } else {&#10;                    _matchFoundUserId.value = null&#10;                    android.util.Log.d(&quot;HomeViewModel&quot;, &quot;Calling MatchRepository.saveMatch with $likerId and $likedId, status=false&quot;)&#10;                    matchRepository.saveMatch(likerId, likedId, false)&#10;                }&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun resetMatchFoundUserId() {&#10;        _matchFoundUserId.value = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/ProfileViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/ProfileViewModel.kt" />
              <option name="originalContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.repository.AuthRepository&#10;import com.example.dating.data.model.repository.UserRepository&#10;&#10;@HiltViewModel&#10;class ProfileViewModel @Inject constructor(&#10;    private val userRepository: UserRepository,&#10;    private val auth: AuthRepository,&#10;    ) : ViewModel() {&#10;    private val _user = MutableStateFlow&lt;User?&gt;(null)&#10;    val user: StateFlow&lt;User?&gt; = _user&#10;&#10;    init {&#10;        val uid = auth.currentUser?.uid&#10;        if (uid != null) {&#10;            viewModelScope.launch {&#10;                userRepository.getUser(uid).collect { fetchedUser -&gt;&#10;                    android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;Fetched user: $fetchedUser&quot;)&#10;                    _user.value = fetchedUser&#10;                }&#10;            }&#10;        } else {&#10;            android.util.Log.w(&quot;ProfileViewModel&quot;, &quot;No UID found in AuthRepository&quot;)&#10;        }&#10;    }&#10;&#10;    fun loadUser(uid: String) {&#10;        viewModelScope.launch {&#10;            userRepository.getUser(uid).collect { _user.value = it }&#10;        }&#10;    }&#10;&#10;    fun updateProfile(user: User) {&#10;        android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;updateProfile called with: $user&quot;)&#10;        viewModelScope.launch { userRepository.updateUser(user) }&#10;    }&#10;&#10;&#10;    fun updateGender(gender: String) {&#10;        val currentUser = _user.value ?: return&#10;        val updatedUser = currentUser.copy(gender = gender)&#10;        viewModelScope.launch {&#10;            userRepository.updateGender(updatedUser.uid, gender)&#10;            _user.value = updatedUser&#10;        }&#10;    }&#10;&#10;    fun updateInterests(interests: List&lt;String&gt;) {&#10;        val currentUser = _user.value ?: return&#10;        val updatedUser = currentUser.copy(interests = interests)&#10;        android.util.Log.w(&quot;ProfileViewModel&quot;, currentUser.toString())&#10;&#10;        viewModelScope.launch {&#10;            userRepository.updateInterests(updatedUser.uid, interests)&#10;            _user.value = updatedUser&#10;        }&#10;    }&#10;&#10;    fun updateJobLocationDescription(job: String?, location: String?, description: String?) {&#10;        val currentUser = _user.value ?: return&#10;        val updatedUser = currentUser.copy(job = job, location = location, description = description)&#10;        viewModelScope.launch {&#10;            userRepository.updateJobLocationDescription(updatedUser.uid, job, location, description)&#10;            _user.value = updatedUser&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.repository.AuthRepository&#10;import com.example.dating.data.model.repository.UserRepository&#10;import com.example.dating.util.Resource&#10;&#10;@HiltViewModel&#10;class ProfileViewModel @Inject constructor(&#10;    private val userRepository: UserRepository,&#10;    private val auth: AuthRepository,&#10;    ) : ViewModel() {&#10;    private val _user = MutableStateFlow&lt;User?&gt;(null)&#10;    val user: StateFlow&lt;User?&gt; = _user&#10;&#10;    private val _updateState = MutableStateFlow&lt;Resource&lt;Unit&gt;?&gt;(null)&#10;    val updateState: StateFlow&lt;Resource&lt;Unit&gt;?&gt; = _updateState&#10;&#10;    init {&#10;        val uid = auth.currentUser?.uid&#10;        if (uid != null) {&#10;            viewModelScope.launch {&#10;                userRepository.getUser(uid).collect { fetchedUser -&gt;&#10;                    android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;Fetched user: $fetchedUser&quot;)&#10;                    _user.value = fetchedUser&#10;                }&#10;            }&#10;        } else {&#10;            android.util.Log.w(&quot;ProfileViewModel&quot;, &quot;No UID found in AuthRepository&quot;)&#10;        }&#10;    }&#10;&#10;    fun loadUser(uid: String) {&#10;        viewModelScope.launch {&#10;            userRepository.getUser(uid).collect { _user.value = it }&#10;        }&#10;    }&#10;&#10;    fun updateProfile(user: User) {&#10;        android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;updateProfile called with: $user&quot;)&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.updateUser(user)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = user&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateGender(gender: String) {&#10;        val currentUser = _user.value ?: return&#10;        val updatedUser = currentUser.copy(gender = gender)&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.updateGender(updatedUser.uid, gender)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = updatedUser&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateInterests(interests: List&lt;String&gt;) {&#10;        val currentUser = _user.value ?: return&#10;        val updatedUser = currentUser.copy(interests = interests)&#10;        android.util.Log.w(&quot;ProfileViewModel&quot;, currentUser.toString())&#10;&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.updateInterests(updatedUser.uid, interests)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = updatedUser&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateJobLocationDescription(job: String?, location: String?, description: String?) {&#10;        val currentUser = _user.value ?: return&#10;        val updatedUser = currentUser.copy(job = job, location = location, description = description)&#10;        viewModelScope.launch {&#10;            userRepository.updateJobLocationDescription(updatedUser.uid, job, location, description)&#10;            _user.value = updatedUser&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>