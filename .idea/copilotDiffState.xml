<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/auth/EmailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/auth/EmailScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.auth&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.viewmodel.AuthViewModel&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.ui.platform.LocalLifecycleOwner&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.compose.ui.focus.onFocusChanged&#10;import androidx.compose.ui.platform.LocalFocusManager&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.auth&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.viewmodel.AuthViewModel&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.ui.platform.LocalLifecycleOwner&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.compose.ui.focus.onFocusChanged&#10;import androidx.compose.ui.platform.LocalFocusManager&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;&#10;@Composable&#10;fun EmailScreen(navController: NavController) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    val isEmailValid = android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    val authViewModel: AuthViewModel = hiltViewModel()&#10;    val coroutineScope = rememberCoroutineScope()&#10;    val lifecycleOwner = LocalLifecycleOwner.current&#10;    val focusManager = LocalFocusManager.current&#10;    var isEmailFocused by remember { mutableStateOf(false) }&#10;    var isPasswordFocused by remember { mutableStateOf(false) }&#10;    val isSignupFailed = errorMessage != null &amp;&amp; errorMessage != &quot;Verification email sent. Please check your inbox.&quot;&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;    ) {&#10;        IconButton(&#10;            onClick = { navController.popBackStack() },&#10;            modifier = Modifier&#10;                .align(Alignment.TopStart)&#10;                .padding(top = 16.dp, start = 8.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                contentDescription = &quot;Back&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .align(Alignment.Center)&#10;                .padding(horizontal = 32.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Sign Up&quot;,&#10;                fontSize = 28.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.Black,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;            OutlinedTextField(&#10;                value = email,&#10;                onValueChange = {&#10;                    email = it&#10;                    errorMessage = null // Clear error on edit&#10;                },&#10;                label = { Text(&quot;Email&quot;) },&#10;                singleLine = true,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .onFocusChanged { focusState -&gt;&#10;                        isEmailFocused = focusState.isFocused&#10;                    },&#10;                shape = RoundedCornerShape(12.dp),&#10;                colors = OutlinedTextFieldDefaults.colors(&#10;                    focusedBorderColor = AppColors.Text_Pink,&#10;                    focusedLabelColor = AppColors.Text_Pink,&#10;                    unfocusedBorderColor = if (isSignupFailed &amp;&amp; !isEmailFocused) Color.Red else Color.LightGray,&#10;                    unfocusedLabelColor = if (isSignupFailed &amp;&amp; !isEmailFocused) Color.Red else Color.Black&#10;                ),&#10;                keyboardOptions = KeyboardOptions(&#10;                    keyboardType = KeyboardType.Email&#10;                )&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            OutlinedTextField(&#10;                value = password,&#10;                onValueChange = {&#10;                    password = it&#10;                    errorMessage = null // Clear error on edit&#10;                },&#10;                label = { Text(&quot;Password&quot;) },&#10;                singleLine = true,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .onFocusChanged { focusState -&gt;&#10;                        isPasswordFocused = focusState.isFocused&#10;                    },&#10;                shape = RoundedCornerShape(12.dp),&#10;                colors = OutlinedTextFieldDefaults.colors(&#10;                    focusedBorderColor = AppColors.Text_Pink,&#10;                    focusedLabelColor = AppColors.Text_Pink,&#10;                    unfocusedBorderColor = if (isSignupFailed &amp;&amp; !isPasswordFocused) Color.Red else Color.LightGray,&#10;                    unfocusedLabelColor = if (isSignupFailed &amp;&amp; !isPasswordFocused) Color.Red else Color.Black&#10;                ),&#10;                visualTransformation = PasswordVisualTransformation(),&#10;                keyboardOptions = KeyboardOptions(&#10;                    keyboardType = KeyboardType.Password&#10;                )&#10;            )&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;            var startVerificationCheck by remember { mutableStateOf(false) }&#10;            if (startVerificationCheck) {&#10;                // Navigate to VerifyEmailScreen&#10;                navController.navigate(&quot;verify_email&quot;)&#10;                startVerificationCheck = false&#10;            }&#10;            Button(&#10;                onClick = {&#10;                    isLoading = true&#10;                    errorMessage = null&#10;                    focusManager.clearFocus()&#10;                    coroutineScope.launch {&#10;                        val signupResult = authViewModel.signupUserWithEmailVerification(email, password)&#10;                        isLoading = false&#10;                        if (signupResult == null) {&#10;                            errorMessage = &quot;Verification email sent. Please check your inbox.&quot;&#10;                            startVerificationCheck = true&#10;                        } else {&#10;                            errorMessage = signupResult&#10;                        }&#10;                    }&#10;                },&#10;                enabled = isEmailValid &amp;&amp; password.isNotBlank() &amp;&amp; !isLoading,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                shape = RoundedCornerShape(16.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = Color(0xFFFFF1FC),&#10;                    contentColor = Color.Black&#10;                )&#10;            ) {&#10;                if (isLoading) {&#10;                    CircularProgressIndicator(modifier = Modifier.size(24.dp), color = Color.Black)&#10;                } else {&#10;                    Text(&quot;Continue&quot;)&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            errorMessage?.let {&#10;                Text(&#10;                    text = it,&#10;                    color = if (it.contains(&quot;success&quot;, true)) Color(0xFF4CAF50) else Color.Red,&#10;                    modifier = Modifier.padding(top = 8.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/auth/LoginScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/auth/LoginScreen.kt" />
              <option name="originalContent" value="import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.text.font.FontWeight&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.*&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import com.example.dating.data.model.Resource&#10;import com.example.dating.ui.theme.AppColors&#10;import com.example.dating.viewmodel.AuthViewModel&#10;import com.example.dating.ui.theme.AppColors.Main_Secondary1&#10;import androidx.compose.ui.focus.onFocusChanged&#10;import androidx.compose.ui.platform.LocalFocusManager&#10;import androidx.compose.foundation.interaction.MutableInteractionSource&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun LoginScreen(viewModel: AuthViewModel?, navController: NavController) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    val authResource = viewModel?.loginFlow?.collectAsState()&#10;    val isLoginFailed = authResource?.value is Resource.Failure&#10;    var isEmailFocused by remember { mutableStateOf(false) }&#10;    var isPasswordFocused by remember { mutableStateOf(false) }&#10;                    focusedLabelColor = AppColors.Text_Pink,&#10;                    unfocusedBorderColor = if (isLoginFailed &amp;&amp; !isPasswordFocused) Color.Red else Color.LightGray,&#10;                    unfocusedLabelColor = if (isLoginFailed &amp;&amp; !isPasswordFocused) Color.Red else Color.Black&#10;                ),&#10;                visualTransformation = PasswordVisualTransformation(),&#10;                keyboardOptions = KeyboardOptions(&#10;                    capitalization = KeyboardCapitalization.None,&#10;                    autoCorrectEnabled = false,&#10;                    keyboardType = KeyboardType.Password,&#10;                    imeAction = ImeAction.Next&#10;                )&#10;            )&#10;&#10;            Button(&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                onClick = { viewModel?.loginUser(email, password) },&#10;                Box(&#10;            authResource?.value?.let {&#10;                Box(&#10;            authResource?.value?.let {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;            authResource?.value?.let {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;            authResource?.value?.let {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;            authResource?.value?.let {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;            authResource?.value?.let {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;            authResource?.value?.let {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;            authResource?.value?.let {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;            authResource?.value?.let {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .align(Alignment.CenterHorizontally)&#10;                ) {&#10;                    when (it) {&#10;                        is Resource.Failure -&gt; {&#10;                            // Clear focus on failure&#10;                            LaunchedEffect(Unit) {&#10;                                isEmailFocused = false&#10;                                isPasswordFocused = false&#10;                                focusManager.clearFocus()&#10;                            }&#10;                            Text(&#10;                                text = it.exception.message ?: &quot;Login failed&quot;,&#10;                                color = MaterialTheme.colorScheme.error,&#10;                                modifier = Modifier&#10;                                    .padding(top = 16.dp)&#10;                                    .align(Alignment.Center)&#10;                            )&#10;                        }&#10;                        is Resource.Loading -&gt; {&#10;                            CircularProgressIndicator(&#10;                                modifier = Modifier.align(Alignment.Center)&#10;                            )&#10;                        }&#10;                        is Resource.Success -&gt; {&#10;                            LaunchedEffect(Unit) {&#10;                                navController.navigate(&quot;profile_details&quot;) {&#10;                                    //popUpTo(&quot;login&quot;) { inclusive = false }&#10;" />
              <option name="updatedContent" value="import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.text.font.FontWeight&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.*&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import com.example.dating.data.model.Resource&#10;import com.example.dating.ui.theme.AppColors&#10;import com.example.dating.viewmodel.AuthViewModel&#10;import com.example.dating.ui.theme.AppColors.Main_Secondary1&#10;import androidx.compose.ui.focus.onFocusChanged&#10;import androidx.compose.ui.platform.LocalFocusManager&#10;import androidx.compose.foundation.interaction.MutableInteractionSource&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun LoginScreen(viewModel: AuthViewModel?, navController: NavController) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    val authResource = viewModel?.loginFlow?.collectAsState()&#10;    val isLoginFailed = authResource?.value is Resource.Failure&#10;    var isEmailFocused by remember { mutableStateOf(false) }&#10;    var isPasswordFocused by remember { mutableStateOf(false) }&#10;    var loginClicked by remember { mutableStateOf(false) }&#10;    val focusManager = LocalFocusManager.current&#10;&#10;&#10;    Box(modifier = Modifier&#10;        .fillMaxSize()&#10;        .clickable(&#10;            indication = null,&#10;            interactionSource = remember { MutableInteractionSource() }&#10;        ) {&#10;            focusManager.clearFocus()&#10;        }&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 32.dp)&#10;                .align(Alignment.Center),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Login&quot;,&#10;                style = MaterialTheme.typography.headlineMedium.copy(fontWeight = FontWeight.Bold, fontSize = MaterialTheme.typography.headlineLarge.fontSize),&#10;                modifier = Modifier.align(Alignment.CenterHorizontally)&#10;            )&#10;&#10;            OutlinedTextField(&#10;                value = email,&#10;                onValueChange = { email = it },&#10;                label = { Text(&quot;Email&quot;) },&#10;                singleLine = true,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .onFocusChanged { focusState -&gt;&#10;                        isEmailFocused = focusState.isFocused&#10;                    },&#10;                shape = RoundedCornerShape(12.dp),&#10;                colors = OutlinedTextFieldDefaults.colors(&#10;                    focusedBorderColor =  AppColors.Text_Pink,&#10;                    focusedLabelColor =  AppColors.Text_Pink,&#10;                    unfocusedBorderColor = if (isLoginFailed &amp;&amp; !isEmailFocused) Color.Red else Color.LightGray,&#10;                    unfocusedLabelColor = if (isLoginFailed &amp;&amp; !isEmailFocused) Color.Red else Color.Black&#10;                ),&#10;                keyboardOptions = KeyboardOptions(&#10;                    capitalization = KeyboardCapitalization.None,&#10;                    autoCorrectEnabled = false,&#10;                    keyboardType = KeyboardType.Email,&#10;                    imeAction = ImeAction.Next&#10;                )&#10;            )&#10;&#10;            OutlinedTextField(&#10;                value = password,&#10;                onValueChange = { password = it },&#10;                label = { Text(&quot;Password&quot;) },&#10;                singleLine = true,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .onFocusChanged { focusState -&gt;&#10;                        isPasswordFocused = focusState.isFocused&#10;                    },&#10;                shape = RoundedCornerShape(12.dp),&#10;                colors = OutlinedTextFieldDefaults.colors(&#10;                    focusedBorderColor = AppColors.Text_Pink,&#10;                    focusedLabelColor = AppColors.Text_Pink,&#10;                    unfocusedBorderColor = if (isLoginFailed &amp;&amp; !isPasswordFocused) Color.Red else Color.LightGray,&#10;                    unfocusedLabelColor = if (isLoginFailed &amp;&amp; !isPasswordFocused) Color.Red else Color.Black&#10;                ),&#10;                visualTransformation = PasswordVisualTransformation(),&#10;                keyboardOptions = KeyboardOptions(&#10;                    capitalization = KeyboardCapitalization.None,&#10;                    autoCorrectEnabled = false,&#10;                    keyboardType = KeyboardType.Password,&#10;                    imeAction = ImeAction.Next&#10;                )&#10;            )&#10;&#10;            Button(&#10;                onClick = {&#10;                    loginClicked = true&#10;                    viewModel?.loginUser(email, password)&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = Main_Secondary1,&#10;                    contentColor = Color.Black,&#10;                )&#10;            ) {&#10;                Text(&quot;Login&quot;, style = MaterialTheme.typography.titleMedium)&#10;            }&#10;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clickable {&#10;                        navController.navigate(&quot;register&quot;) {&#10;                            popUpTo(&quot;login&quot;) { inclusive = true }&#10;                        }&#10;                    },&#10;                horizontalArrangement = Arrangement.Center&#10;            ) {&#10;                Text(&#10;                    text = &quot;Don't have an account? &quot;,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;                Text(&#10;                    text = &quot;Sign up&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge.copy(fontWeight = FontWeight.Bold),&#10;                    color = AppColors.Text_Pink&#10;                )&#10;            }&#10;&#10;            if (loginClicked) {&#10;                authResource?.value?.let {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .align(Alignment.CenterHorizontally)&#10;                    ) {&#10;                        when (it) {&#10;                            is Resource.Failure -&gt; {&#10;                                // Clear focus on failure&#10;                                LaunchedEffect(Unit) {&#10;                                    isEmailFocused = false&#10;                                    isPasswordFocused = false&#10;                                    focusManager.clearFocus()&#10;                                    loginClicked = false&#10;                                }&#10;                                Text(&#10;                                    text = it.exception.message ?: &quot;Login failed&quot;,&#10;                                    color = MaterialTheme.colorScheme.error,&#10;                                    modifier = Modifier&#10;                                        .padding(top = 16.dp)&#10;                                        .align(Alignment.Center)&#10;                                )&#10;                            }&#10;                            is Resource.Loading -&gt; {&#10;                                CircularProgressIndicator(&#10;                                    modifier = Modifier.align(Alignment.Center)&#10;                                )&#10;                            }&#10;                            is Resource.Success -&gt; {&#10;                                LaunchedEffect(Unit) {&#10;                                    navController.navigate(&quot;profile_details&quot;) {&#10;                                        //popUpTo(&quot;login&quot;) { inclusive = false }&#10;                                    }&#10;                                    loginClicked = false&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_arrow_drop_down.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_arrow_drop_down.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#757575&quot;&#10;        android:pathData=&quot;M7,10l5,5 5,-5z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_avatar.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_avatar.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;120dp&quot;&#10;    android:height=&quot;120dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#CCCCCC&quot;&#10;        android:pathData=&quot;M12,12c2.67,0 8,1.34 8,4v2H4v-2c0-2.66 5.33-4 8-4zm0-2a4,4 0 1,0 0,-8 4,4 0 0,0 0,8z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>