<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/MatchRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/MatchRepository.kt" />
              <option name="updatedContent" value="package com.example.dating.data&#10;&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class MatchRepository {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    suspend fun saveMatch(userId1: String, userId2: String, status: Boolean) {&#10;        // Ensure userId1 &lt; userId2 alphabetically&#10;        val (firstId, secondId) = if (userId1 &lt; userId2) userId1 to userId2 else userId2 to userId1&#10;        val matchData = hashMapOf(&#10;            &quot;userId1&quot; to firstId,&#10;            &quot;userId2&quot; to secondId,&#10;            &quot;timestamp&quot; to Timestamp.now(),&#10;            &quot;status&quot; to status&#10;        )&#10;        // Check for duplicate (userId1/userId2 only)&#10;        val query = db.collection(&quot;match&quot;)&#10;            .whereEqualTo(&quot;userId1&quot;, firstId)&#10;            .whereEqualTo(&quot;userId2&quot;, secondId)&#10;            .get().await()&#10;        android.util.Log.d(&quot;MatchRepository&quot;, &quot;MatchQuery: userId1=$firstId, userId2=$secondId, resultCount=${query.size()}&quot;)&#10;        if (query.isEmpty) {&#10;            db.collection(&quot;match&quot;).add(matchData)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/ChatRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/ChatRepository.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.ChatMessage&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.firestore.ListenerRegistration&#10;import com.google.firebase.firestore.Query.Direction.ASCENDING&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class ChatRepository(&#10;    private val db: FirebaseFirestore,&#10;    private val auth: FirebaseAuth&#10;) {&#10;    suspend fun getPeerInfo(conversationId: String): Pair&lt;String, String&gt; {&#10;        val doc = db.collection(&quot;conversations&quot;).document(conversationId).get().await()&#10;        val currentUid = auth.currentUser?.uid&#10;        val participants = doc.get(&quot;participants&quot;) as? List&lt;String&gt; ?: return &quot;&quot; to &quot;&quot;&#10;        val peerId = participants.find { it != currentUid } ?: return &quot;&quot; to &quot;&quot;&#10;        val userDoc = db.collection(&quot;users&quot;).document(peerId).get().await()&#10;        val name = userDoc.getString(&quot;name&quot;) ?: &quot;&quot;&#10;        val photoUrl = userDoc.getString(&quot;avatarUrl&quot;) ?: &quot;&quot;&#10;        return name to photoUrl&#10;    }&#10;&#10;&#10;    fun getMessagesRealtime(conversationId: String): Flow&lt;List&lt;ChatMessage&gt;&gt; = callbackFlow {&#10;        val listener = db.collection(&quot;conversations&quot;)&#10;            .document(conversationId)&#10;            .collection(&quot;messages&quot;)&#10;            .orderBy(&quot;timestamp&quot;, ASCENDING)&#10;            .addSnapshotListener { snap, _ -&gt;&#10;                val list = snap?.documents?.mapNotNull { d -&gt;&#10;                    d.toObject(ChatMessage::class.java)?.copy(id = d.id)&#10;                }.orEmpty()&#10;                trySend(list)&#10;            }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;&#10;&#10;    suspend fun sendMessage(conversationId: String, text: String) {&#10;        val uid = auth.currentUser?.uid ?: return&#10;        val timestamp = System.currentTimeMillis()&#10;        val msg = mapOf(&#10;            &quot;fromUid&quot; to uid,&#10;            &quot;text&quot; to text,&#10;            &quot;timestamp&quot; to timestamp&#10;        )&#10;        db.collection(&quot;conversations&quot;)&#10;            .document(conversationId)&#10;            .collection(&quot;messages&quot;)&#10;            .add(msg)&#10;            .await()&#10;        // Update lastTimestamp and lastMessage in the conversation document&#10;        db.collection(&quot;conversations&quot;)&#10;            .document(conversationId)&#10;            .update(&#10;                mapOf(&#10;                    &quot;lastTimestamp&quot; to timestamp,&#10;                    &quot;lastMessage&quot; to msg&#10;                )&#10;            )&#10;            .await()&#10;    }&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.ChatMessage&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.firestore.ListenerRegistration&#10;import com.google.firebase.firestore.Query.Direction.ASCENDING&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class ChatRepository(&#10;    private val db: FirebaseFirestore,&#10;    private val auth: FirebaseAuth&#10;) {&#10;    suspend fun getPeerInfo(conversationId: String): Pair&lt;String, String&gt; {&#10;        val doc = db.collection(&quot;conversations&quot;).document(conversationId).get().await()&#10;        val currentUid = auth.currentUser?.uid&#10;        val participants = doc.get(&quot;participants&quot;) as? List&lt;String&gt; ?: return &quot;&quot; to &quot;&quot;&#10;        val peerId = participants.find { it != currentUid } ?: return &quot;&quot; to &quot;&quot;&#10;        val userDoc = db.collection(&quot;users&quot;).document(peerId).get().await()&#10;        val firstName = userDoc.getString(&quot;firstName&quot;) ?: &quot;&quot;&#10;        val lastName = userDoc.getString(&quot;lastName&quot;) ?: &quot;&quot;&#10;        val name = &quot;$firstName $lastName&quot;.trim()&#10;        val photoUrl = userDoc.getString(&quot;avatarUrl&quot;) ?: &quot;&quot;&#10;        return name to photoUrl&#10;    }&#10;&#10;&#10;    fun getMessagesRealtime(conversationId: String): Flow&lt;List&lt;ChatMessage&gt;&gt; = callbackFlow {&#10;        val listener = db.collection(&quot;conversations&quot;)&#10;            .document(conversationId)&#10;            .collection(&quot;messages&quot;)&#10;            .orderBy(&quot;timestamp&quot;, ASCENDING)&#10;            .addSnapshotListener { snap, _ -&gt;&#10;                val list = snap?.documents?.mapNotNull { d -&gt;&#10;                    d.toObject(ChatMessage::class.java)?.copy(id = d.id)&#10;                }.orEmpty()&#10;                trySend(list)&#10;            }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;&#10;&#10;    suspend fun sendMessage(conversationId: String, text: String) {&#10;        val uid = auth.currentUser?.uid ?: return&#10;        val timestamp = System.currentTimeMillis()&#10;        val msg = mapOf(&#10;            &quot;fromUid&quot; to uid,&#10;            &quot;text&quot; to text,&#10;            &quot;timestamp&quot; to timestamp&#10;        )&#10;        db.collection(&quot;conversations&quot;)&#10;            .document(conversationId)&#10;            .collection(&quot;messages&quot;)&#10;            .add(msg)&#10;            .await()&#10;        // Update lastTimestamp and lastMessage in the conversation document&#10;        db.collection(&quot;conversations&quot;)&#10;            .document(conversationId)&#10;            .update(&#10;                mapOf(&#10;                    &quot;lastTimestamp&quot; to timestamp,&#10;                    &quot;lastMessage&quot; to msg&#10;                )&#10;            )&#10;            .await()&#10;    }&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/FirebaseMessagesRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/FirebaseMessagesRepository.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.ConversationPreview&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.MessagePreview&#10;import com.google.android.gms.tasks.Tasks&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.firestore.Query&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;&#10;class FirebaseMessagesRepository @Inject constructor(&#10;    private val db: FirebaseFirestore&#10;) {&#10;    fun getConversations(currentUid: String): Flow&lt;List&lt;ConversationPreview&gt;&gt; = callbackFlow {&#10;        if(currentUid.isBlank()) {&#10;            trySend(emptyList())&#10;            awaitClose()&#10;            return@callbackFlow&#10;        }&#10;        val query = db.collection(&quot;conversations&quot;)&#10;            .whereArrayContains(&quot;participants&quot;, currentUid)&#10;            .orderBy(&quot;lastTimestamp&quot;, Query.Direction.DESCENDING)&#10;&#10;        android.util.Log.d(&quot;FirebaseMessagesRepository&quot;, &quot;Firestore query: participants contains $currentUid, ordered by lastTimestamp DESC&quot;)&#10;&#10;        val listener = query.addSnapshotListener { snapshot, _ -&gt;&#10;            if (snapshot == null) {&#10;                trySend(emptyList())&#10;                return@addSnapshotListener&#10;            }&#10;            android.util.Log.d(&quot;FirebaseMessagesRepository&quot;, &quot;Query result count: ${snapshot.documents.size}&quot;)&#10;            snapshot.documents.forEach { doc -&gt;&#10;                android.util.Log.d(&#10;                    &quot;FirebaseMessagesRepository&quot;,&#10;                    &quot;Conversation doc: ${doc.id}, exists: ${doc.exists()}, fromCache: ${doc.metadata.isFromCache}, hasPendingWrites: ${doc.metadata.hasPendingWrites()}, data: ${doc.data}&quot;&#10;                )&#10;            }&#10;&#10;            val tasks = snapshot.documents.filter { doc -&gt;&#10;                doc.exists() &amp;&amp; doc.data != null&#10;            }&#10;                .map { doc -&gt;&#10;                    val data = doc.data!!&#10;                    val cid = doc.id&#10;                    val participants = data[&quot;participants&quot;] as List&lt;String&gt;&#10;                    val peerUid = participants.first { it != currentUid }&#10;&#10;                    val userTask = db.collection(&quot;users&quot;).document(peerUid).get()&#10;&#10;                    userTask.continueWith { userSnap -&gt;&#10;                        val user = userSnap.result?.toObject(User::class.java) ?: User(uid = peerUid)&#10;                        val lastMessage = (data[&quot;lastMessage&quot;] as? Map&lt;*, *&gt;)?.let { msgMap -&gt;&#10;                            MessagePreview(&#10;                                fromUid = msgMap[&quot;fromUid&quot;] as? String ?: &quot;&quot;,&#10;                                text = msgMap[&quot;text&quot;] as? String ?: &quot;&quot;,&#10;                                timestamp = (msgMap[&quot;timestamp&quot;] as? Number)?.toLong() ?: 0L&#10;                            )&#10;                        }&#10;                        val timestamp = (data[&quot;lastTimestamp&quot;] as? Timestamp)?.toDate()?.time ?: 0L&#10;                        val unread = (data[&quot;unread&quot;] as? Map&lt;*, *&gt;)?.get(currentUid) as? Long ?: 0L&#10;                        val typing = (data[&quot;typing&quot;] as? Map&lt;*, *&gt;)?.get(peerUid) as? Boolean ?: false&#10;&#10;                        ConversationPreview(&#10;                            currentUid = currentUid,&#10;                            id = cid,&#10;                            peer = user,&#10;                            lastMessage = lastMessage,&#10;                            lastMessageTimestamp = timestamp,&#10;                            timeAgo = formatTimeAgo(timestamp),&#10;                            unreadCount = unread.toInt(),&#10;                            isTyping = typing&#10;                        )&#10;                    }&#10;                }&#10;&#10;            Tasks.whenAllSuccess&lt;ConversationPreview&gt;(tasks)&#10;                .addOnSuccessListener { result -&gt; trySend(result) }&#10;        }&#10;&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    private fun formatTimeAgo(ms: Long): String {&#10;        val now = System.currentTimeMillis()&#10;        &#10;        val diff = now - ms&#10;&#10;        val seconds = diff / 1000&#10;        val minutes = seconds / 60&#10;        val hours = minutes / 60&#10;        val days = hours / 24&#10;        val weeks = days / 7&#10;        val months = days / 30&#10;        val years = days / 365&#10;&#10;        return when {&#10;            seconds &lt; 60 -&gt; &quot;Just now&quot;&#10;            minutes &lt; 60 -&gt; &quot;$minutes min&quot;&#10;            hours &lt; 24 -&gt; &quot;$hours hour${if (hours &gt; 1) &quot;s&quot; else &quot;&quot;}&quot;&#10;            days &lt; 7 -&gt; &quot;$days day${if (days &gt; 1) &quot;s&quot; else &quot;&quot;}&quot;&#10;            weeks &lt; 4 -&gt; &quot;$weeks week${if (weeks &gt; 1) &quot;s&quot; else &quot;&quot;}&quot;&#10;            months &lt; 12 -&gt; &quot;$months month${if (months &gt; 1) &quot;s&quot; else &quot;&quot;}&quot;&#10;            else -&gt; &quot;$years year${if (years &gt; 1) &quot;s&quot; else &quot;&quot;}&quot;&#10;        }&#10;    }&#10;&#10;&#10;    suspend fun createConversation(userId1: String, userId2: String) {&#10;        // Check for existing conversation with both participants&#10;        val existing = db.collection(&quot;conversations&quot;)&#10;            .whereEqualTo(&quot;participants&quot;, listOf(userId1, userId2))&#10;            .get().await()&#10;        if (!existing.isEmpty) return // Already exists, do not add&#10;        val existingReverse = db.collection(&quot;conversations&quot;)&#10;            .whereEqualTo(&quot;participants&quot;, listOf(userId2, userId1))&#10;            .get().await()&#10;        if (!existingReverse.isEmpty) return // Already exists in reverse order&#10;&#10;        val conversationData = hashMapOf(&#10;            &quot;participants&quot; to listOf(userId1, userId2),&#10;            &quot;lastMessage&quot; to &quot;&quot;,&#10;            &quot;lastTimestamp&quot; to System.currentTimeMillis(),&#10;            &quot;unread&quot; to mapOf(userId1 to 0, userId2 to 0)&#10;        )&#10;        db.collection(&quot;conversations&quot;).add(conversationData).await()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.ConversationPreview&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.MessagePreview&#10;import com.google.android.gms.tasks.Tasks&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.firestore.Query&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;&#10;class FirebaseMessagesRepository @Inject constructor(&#10;    private val db: FirebaseFirestore&#10;) {&#10;    fun getConversations(currentUid: String): Flow&lt;List&lt;ConversationPreview&gt;&gt; = callbackFlow {&#10;        if(currentUid.isBlank()) {&#10;            trySend(emptyList())&#10;            awaitClose()&#10;            return@callbackFlow&#10;        }&#10;        val query = db.collection(&quot;conversations&quot;)&#10;            .whereArrayContains(&quot;participants&quot;, currentUid)&#10;            .orderBy(&quot;lastTimestamp&quot;, Query.Direction.DESCENDING)&#10;&#10;        android.util.Log.d(&quot;FirebaseMessagesRepository&quot;, &quot;Firestore query: participants contains $currentUid, ordered by lastTimestamp DESC&quot;)&#10;&#10;        val listener = query.addSnapshotListener { snapshot, _ -&gt;&#10;            if (snapshot == null) {&#10;                trySend(emptyList())&#10;                return@addSnapshotListener&#10;            }&#10;            android.util.Log.d(&quot;FirebaseMessagesRepository&quot;, &quot;Query result count: ${snapshot.documents.size}&quot;)&#10;            snapshot.documents.forEach { doc -&gt;&#10;                android.util.Log.d(&#10;                    &quot;FirebaseMessagesRepository&quot;,&#10;                    &quot;Conversation doc: ${doc.id}, exists: ${doc.exists()}, fromCache: ${doc.metadata.isFromCache}, hasPendingWrites: ${doc.metadata.hasPendingWrites()}, data: ${doc.data}&quot;&#10;                )&#10;            }&#10;&#10;            val tasks = snapshot.documents.filter { doc -&gt;&#10;                doc.exists() &amp;&amp; doc.data != null&#10;            }&#10;                .map { doc -&gt;&#10;                    val data = doc.data!!&#10;                    val cid = doc.id&#10;                    val participants = data[&quot;participants&quot;] as List&lt;String&gt;&#10;                    val peerUid = participants.first { it != currentUid }&#10;&#10;                    val userTask = db.collection(&quot;users&quot;).document(peerUid).get()&#10;&#10;                    userTask.continueWith { userSnap -&gt;&#10;                        val user = userSnap.result?.toObject(User::class.java) ?: User(uid = peerUid)&#10;                        val lastMessage = (data[&quot;lastMessage&quot;] as? Map&lt;*, *&gt;)?.let { msgMap -&gt;&#10;                            MessagePreview(&#10;                                fromUid = msgMap[&quot;fromUid&quot;] as? String ?: &quot;&quot;,&#10;                                text = msgMap[&quot;text&quot;] as? String ?: &quot;&quot;,&#10;                                timestamp = (msgMap[&quot;timestamp&quot;] as? Number)?.toLong() ?: 0L&#10;                            )&#10;                        }&#10;                        val timestamp = (data[&quot;lastTimestamp&quot;] as? Timestamp)?.toDate()?.time ?: 0L&#10;                        val unread = (data[&quot;unread&quot;] as? Map&lt;*, *&gt;)?.get(currentUid) as? Long ?: 0L&#10;                        val typing = (data[&quot;typing&quot;] as? Map&lt;*, *&gt;)?.get(peerUid) as? Boolean ?: false&#10;&#10;                        ConversationPreview(&#10;                            currentUid = currentUid,&#10;                            id = cid,&#10;                            peer = user,&#10;                            lastMessage = lastMessage,&#10;                            lastMessageTimestamp = timestamp,&#10;                            timeAgo = formatTimeAgo(timestamp),&#10;                            unreadCount = unread.toInt(),&#10;                            isTyping = typing&#10;                        )&#10;                    }&#10;                }&#10;&#10;            Tasks.whenAllSuccess&lt;ConversationPreview&gt;(tasks)&#10;                .addOnSuccessListener { result -&gt; trySend(result) }&#10;        }&#10;&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    private fun formatTimeAgo(ms: Long): String {&#10;        val now = System.currentTimeMillis()&#10;        android.util.Log.d(&quot;formatTimeAgo&quot;, &quot;now: $now, ms: $ms&quot;)&#10;        val diff = now - ms&#10;&#10;        val seconds = diff / 1000&#10;        val minutes = seconds / 60&#10;        val hours = minutes / 60&#10;        val days = hours / 24&#10;        val weeks = days / 7&#10;        val months = days / 30&#10;        val years = days / 365&#10;&#10;        return when {&#10;            seconds &lt; 60 -&gt; &quot;Just now&quot;&#10;            minutes &lt; 60 -&gt; &quot;$minutes min&quot;&#10;            hours &lt; 24 -&gt; &quot;$hours hour${if (hours &gt; 1) &quot;s&quot; else &quot;&quot;}&quot;&#10;            days &lt; 7 -&gt; &quot;$days day${if (days &gt; 1) &quot;s&quot; else &quot;&quot;}&quot;&#10;            weeks &lt; 4 -&gt; &quot;$weeks week${if (weeks &gt; 1) &quot;s&quot; else &quot;&quot;}&quot;&#10;            months &lt; 12 -&gt; &quot;$months month${if (months &gt; 1) &quot;s&quot; else &quot;&quot;}&quot;&#10;            else -&gt; &quot;$years year${if (years &gt; 1) &quot;s&quot; else &quot;&quot;}&quot;&#10;        }&#10;    }&#10;&#10;&#10;    suspend fun createConversation(userId1: String, userId2: String) {&#10;        // Check for existing conversation with both participants&#10;        val existing = db.collection(&quot;conversations&quot;)&#10;            .whereEqualTo(&quot;participants&quot;, listOf(userId1, userId2))&#10;            .get().await()&#10;        if (!existing.isEmpty) return // Already exists, do not add&#10;        val existingReverse = db.collection(&quot;conversations&quot;)&#10;            .whereEqualTo(&quot;participants&quot;, listOf(userId2, userId1))&#10;            .get().await()&#10;        if (!existingReverse.isEmpty) return // Already exists in reverse order&#10;&#10;        val conversationData = hashMapOf(&#10;            &quot;participants&quot; to listOf(userId1, userId2),&#10;            &quot;lastMessage&quot; to &quot;&quot;,&#10;            &quot;lastTimestamp&quot; to System.currentTimeMillis(),&#10;            &quot;unread&quot; to mapOf(userId1 to 0, userId2 to 0)&#10;        )&#10;        db.collection(&quot;conversations&quot;).add(conversationData).await()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepositoryImpl.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;) : UserRepository {&#10;&#10;    fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            offer(snapshot?.toObject(User::class.java))&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    override suspend fun updateUser(user: User) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun saveProfile(&#10;        userId: String,&#10;        firstName: String,&#10;        lastName: String,&#10;        birthday: String?,&#10;        imageUrl: String?&#10;    ): Resource&lt;Unit&gt; {&#10;        return try {&#10;            val userMap = hashMapOf(&#10;                &quot;firstName&quot; to firstName,&#10;                &quot;lastName&quot; to lastName,&#10;                &quot;birthday&quot; to birthday,&#10;                &quot;imageUrl&quot; to imageUrl&#10;            )&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .set(userMap)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateGender(userId: String, gender: String): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;gender&quot;, gender)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateInterests(userId: String, interests: List&lt;String&gt;): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;interests&quot;, interests)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateJobLocationDescription(&#10;        userId: String,&#10;        job: String?,&#10;        location: String?,&#10;        description: String?&#10;    ): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(mapOf(&#10;                    &quot;job&quot; to job,&#10;                    &quot;location&quot; to location,&#10;                    &quot;description&quot; to description&#10;                ))&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;) : UserRepository {&#10;&#10;    override fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            trySend(snapshot?.toObject(User::class.java))&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    override suspend fun updateUser(user: User) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun saveProfile(&#10;        user: User&#10;    ) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun updateGender(uid: String, gender: String) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&quot;gender&quot;, gender).await()&#10;    }&#10;&#10;    override suspend fun updateInterests(uid: String, interests: List&lt;String&gt;) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&quot;interests&quot;, interests).await()&#10;    }&#10;&#10;    override suspend fun updateJobLocationDescription(uid: String, job: String?, location: String?, description: String?) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&#10;            mapOf(&#10;                &quot;job&quot; to job,&#10;                &quot;location&quot; to location,&#10;                &quot;description&quot; to description&#10;            )&#10;        ).await()&#10;    }&#10;&#10;    override suspend fun uploadAvatar(uid: String, uri: android.net.Uri): String {&#10;        // TODO: Implement Firebase Storage upload and return the URL&#10;        return &quot;&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/repository/ChatRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/repository/ChatRepository.kt" />
              <option name="originalContent" value="package com.example.dating.repository&#10;&#10;import com.example.dating.data.model.ChatMessage&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.firestore.ListenerRegistration&#10;import com.google.firebase.firestore.Query.Direction.ASCENDING&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class ChatRepository(&#10;    private val db: FirebaseFirestore,&#10;    private val auth: FirebaseAuth&#10;) {&#10;    suspend fun getPeerInfo(conversationId: String): Pair&lt;String, String&gt; {&#10;        val doc = db.collection(&quot;conversations&quot;).document(conversationId).get().await()&#10;        val currentUid = auth.currentUser?.uid&#10;        val participants = doc.get(&quot;participants&quot;) as? List&lt;String&gt; ?: return &quot;&quot; to &quot;&quot;&#10;        val peerId = participants.find { it != currentUid } ?: return &quot;&quot; to &quot;&quot;&#10;        val userDoc = db.collection(&quot;users&quot;).document(peerId).get().await()&#10;        val name = userDoc.getString(&quot;name&quot;) ?: &quot;&quot;&#10;        val photoUrl = userDoc.getString(&quot;photoUrl&quot;) ?: &quot;&quot;&#10;        return name to photoUrl&#10;    }&#10;&#10;&#10;    fun getMessagesRealtime(conversationId: String): Flow&lt;List&lt;ChatMessage&gt;&gt; = callbackFlow {&#10;        val listener = db.collection(&quot;conversations&quot;)&#10;            .document(conversationId)&#10;            .collection(&quot;messages&quot;)&#10;            .orderBy(&quot;timestamp&quot;, ASCENDING)&#10;            .addSnapshotListener { snap, _ -&gt;&#10;                val list = snap?.documents?.mapNotNull { d -&gt;&#10;                    d.toObject(ChatMessage::class.java)?.copy(id = d.id)&#10;                }.orEmpty()&#10;                trySend(list)&#10;            }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;&#10;&#10;    suspend fun sendMessage(conversationId: String, text: String) {&#10;        val uid = auth.currentUser?.uid ?: return&#10;        val timestamp = System.currentTimeMillis()&#10;        val msg = mapOf(&#10;            &quot;fromUid&quot; to uid,&#10;            &quot;text&quot; to text,&#10;            &quot;timestamp&quot; to timestamp&#10;        )&#10;        db.collection(&quot;conversations&quot;)&#10;            .document(conversationId)&#10;            .collection(&quot;messages&quot;)&#10;            .add(msg)&#10;            .await()&#10;        // Update lastTimestamp and lastMessage in the conversation document&#10;        db.collection(&quot;conversations&quot;)&#10;            .document(conversationId)&#10;            .update(&#10;                mapOf(&#10;                    &quot;lastTimestamp&quot; to timestamp,&#10;                    &quot;lastMessage&quot; to msg&#10;                )&#10;            )&#10;            .await()&#10;    }&#10;&#10;    fun listenForMessages(conversationId: String, onMessages: (List&lt;ChatMessage&gt;) -&gt; Unit): ListenerRegistration {&#10;        return db.collection(&quot;conversations&quot;)&#10;            .document(conversationId)&#10;            .collection(&quot;messages&quot;)&#10;            .orderBy(&quot;timestamp&quot;, ASCENDING)&#10;            .addSnapshotListener { snap, _ -&gt;&#10;                val list = snap?.documents?.mapNotNull { d -&gt;&#10;                    d.toObject(ChatMessage::class.java)?.copy(id = d.id)&#10;                }.orEmpty()&#10;                onMessages(list)&#10;            }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.repository&#10;&#10;import com.example.dating.data.model.ChatMessage&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.firestore.ListenerRegistration&#10;import com.google.firebase.firestore.Query.Direction.ASCENDING&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class ChatRepository(&#10;    private val db: FirebaseFirestore,&#10;    private val auth: FirebaseAuth&#10;) {&#10;    suspend fun getPeerInfo(conversationId: String): Pair&lt;String, String&gt; {&#10;        val doc = db.collection(&quot;conversations&quot;).document(conversationId).get().await()&#10;        val currentUid = auth.currentUser?.uid&#10;        val participants = doc.get(&quot;participants&quot;) as? List&lt;String&gt; ?: return &quot;&quot; to &quot;&quot;&#10;        val peerId = participants.find { it != currentUid } ?: return &quot;&quot; to &quot;&quot;&#10;        val userDoc = db.collection(&quot;users&quot;).document(peerId).get().await()&#10;        val name = userDoc.getString(&quot;name&quot;) ?: &quot;&quot;&#10;        val photoUrl = userDoc.getString(&quot;photoUrl&quot;) ?: &quot;&quot;&#10;        return name to photoUrl&#10;    }&#10;&#10;&#10;    fun getMessagesRealtime(conversationId: String): Flow&lt;List&lt;ChatMessage&gt;&gt; = callbackFlow {&#10;        val listener = db.collection(&quot;conversations&quot;)&#10;            .document(conversationId)&#10;            .collection(&quot;messages&quot;)&#10;            .orderBy(&quot;timestamp&quot;, ASCENDING)&#10;            .addSnapshotListener { snap, _ -&gt;&#10;                val list = snap?.documents?.mapNotNull { d -&gt;&#10;                    d.toObject(ChatMessage::class.java)?.copy(id = d.id)&#10;                }.orEmpty()&#10;                trySend(list)&#10;            }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;&#10;&#10;    suspend fun sendMessage(conversationId: String, text: String) {&#10;        val uid = auth.currentUser?.uid ?: return&#10;        val timestamp = System.currentTimeMillis()&#10;        val msg = mapOf(&#10;            &quot;fromUid&quot; to uid,&#10;            &quot;text&quot; to text,&#10;            &quot;timestamp&quot; to timestamp&#10;        )&#10;        db.collection(&quot;conversations&quot;)&#10;            .document(conversationId)&#10;            .collection(&quot;messages&quot;)&#10;            .add(msg)&#10;            .await()&#10;        // Update lastTimestamp and lastMessage in the conversation document&#10;        db.collection(&quot;conversations&quot;)&#10;            .document(conversationId)&#10;            .update(&#10;                mapOf(&#10;                    &quot;lastTimestamp&quot; to timestamp,&#10;                    &quot;lastMessage&quot; to msg&#10;                )&#10;            )&#10;            .await()&#10;    }&#10;&#10;    fun listenForMessages(conversationId: String, onMessages: (List&lt;ChatMessage&gt;) -&gt; Unit): ListenerRegistration {&#10;        return db.collection(&quot;conversations&quot;)&#10;            .document(conversationId)&#10;            .collection(&quot;messages&quot;)&#10;            .orderBy(&quot;timestamp&quot;, ASCENDING)&#10;            .addSnapshotListener { snap, _ -&gt;&#10;                val list = snap?.documents?.mapNotNull { d -&gt;&#10;                    d.toObject(ChatMessage::class.java)?.copy(id = d.id)&#10;                }.orEmpty()&#10;                onMessages(list)&#10;            }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/chat/MessagesScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/chat/MessagesScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.chat&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import coil.compose.AsyncImage&#10;import com.example.dating.data.model.ConversationPreview&#10;import com.example.dating.data.model.User&#10;import com.example.dating.navigation.Screen&#10;import com.example.dating.ui.components.*&#10;import com.example.dating.ui.theme.AppColors&#10;import com.example.dating.viewmodel.MessagesViewModel&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MessagesScreen(&#10;    navController: NavController,&#10;    viewModel: MessagesViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsState()&#10;    val filterState by viewModel.filterState.collectAsState()&#10;    val sheetState = rememberModalBottomSheetState()&#10;    var showFilterSheet by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(bottomBar = { BottomNavigationBar(navController, 2) }) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(AppColors.MainBackground)&#10;                .padding(paddingValues)&#10;        ) {&#10;            MessagesHeader(onFilterClick = { showFilterSheet = true })&#10;&#10;            when {&#10;                uiState.isLoading -&gt; Box(Modifier.fillMaxSize(), Alignment.Center) {&#10;                    CircularProgressIndicator()&#10;                }&#10;&#10;                uiState.error != null -&gt; Box(Modifier.fillMaxSize(), Alignment.Center) {&#10;                    Text(uiState.error ?: &quot;Unknown error&quot;, color = Color.Red)&#10;                }&#10;&#10;                else -&gt; {&#10;                    // Activities&#10;                    Text(&#10;                        &quot;Activities&quot;,&#10;                        modifier = Modifier.padding(start = 20.dp, top = 8.dp, end = 20.dp),&#10;                        fontWeight = FontWeight.SemiBold&#10;                    )&#10;                    LazyRow(&#10;                        modifier = Modifier.padding(horizontal = 12.dp, vertical = 4.dp),&#10;                        contentPadding = PaddingValues(horizontal = 8.dp)&#10;                    ) {&#10;                        items(uiState.messages) { StoryAvatar(it.peer) }&#10;                    }&#10;&#10;                    Spacer(Modifier.height(8.dp))&#10;&#10;                    // White rounded container for the Messages section&#10;                    MessagesSectionCard(&#10;                        messages = uiState.messages,&#10;                        onItemClick = { c -&gt;&#10;                            navController.navigate(&#10;                                Screen.ChatDetail.createRoute(c.id)&#10;                            )&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Filter sheet&#10;        if (showFilterSheet) {&#10;            ModalBottomSheet(&#10;                onDismissRequest = { showFilterSheet = false },&#10;                sheetState = sheetState,&#10;                shape = RoundedCornerShape(topStart = 28.dp, topEnd = 28.dp),&#10;                containerColor = Color.White&#10;            ) {&#10;                MessagesFilterSheet(&#10;                    state = filterState,&#10;                    onChange = { viewModel.updateFilter(it) },&#10;                    onClear = {&#10;                        viewModel.clearFilter()&#10;                        showFilterSheet = false&#10;                    },&#10;                    onApply = {&#10;                        viewModel.applyFilter()&#10;                        showFilterSheet = false&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun MessagesSectionCard(&#10;    messages: List&lt;ConversationPreview&gt;,&#10;    onItemClick: (ConversationPreview) -&gt; Unit&#10;) {&#10;    val cardHPad = 20.dp&#10;    val avatar = 56.dp&#10;    val gap = 12.dp&#10;    val startIndent = cardHPad + avatar + gap&#10;&#10;    Card(&#10;        shape = RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp),&#10;        colors = CardDefaults.cardColors(containerColor = Color.White),&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        if (messages.isEmpty()) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(24.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.Center&#10;            ) {&#10;                Text(&#10;                    text = &quot;No Messages Yet&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(Modifier.height(8.dp))&#10;                Text(&#10;                    text = &quot;When you match and chat with others,\nyour messages will show up here&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = Color.Gray,&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;        } else {&#10;            LazyColumn(&#10;                contentPadding = PaddingValues(&#10;                    start = cardHPad, end = cardHPad, top = 16.dp, bottom = 90.dp&#10;                )&#10;            ) {&#10;                // Header inside the white container&#10;                item {&#10;                    Text(&#10;                        text = &quot;Messages&quot;,&#10;                        style = MaterialTheme.typography.titleLarge.copy(fontWeight = FontWeight.SemiBold),&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;                }&#10;&#10;                items(messages) { conversation -&gt;&#10;                    MessageItem(&#10;                        item = conversation,&#10;                        onClick = { onItemClick(conversation) }&#10;                    )&#10;                    InsetDivider(start = startIndent)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun StoryAvatar(user: User) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        modifier = Modifier.padding(8.dp)&#10;    ) {&#10;        AsyncImage(&#10;            model = user.avatarUrl ?: &quot;https://i.pravatar.cc/150?u=${user.uid}&quot;,&#10;            contentDescription = null,&#10;            modifier = Modifier&#10;                .size(60.dp)&#10;                .clip(CircleShape)&#10;                .border(2.dp, Color.Magenta, CircleShape)&#10;        )&#10;        Text(user.firstName, fontSize = 12.sp)&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MessageItem(item: ConversationPreview, onClick: () -&gt; Unit = {}) {&#10;    android.util.Log.d(&quot;MessageItem&quot;, item.toString())&#10;    Row(&#10;        Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick)&#10;            .padding(vertical = 12.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        AsyncImage(&#10;            model = item.peer.avatarUrl ?: &quot;https://i.pravatar.cc/150?u=${item.peer.uid}&quot;,&#10;            contentDescription = null,&#10;            modifier = Modifier&#10;                .size(56.dp)&#10;                .clip(CircleShape)&#10;        )&#10;&#10;        Spacer(Modifier.width(12.dp))&#10;&#10;        Column(Modifier.weight(1f)) {&#10;            Text(&#10;                text = &quot;${item.peer.firstName} ${item.peer.lastName}&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            val senderName = when (item.lastMessage?.fromUid) {&#10;                null -&gt; &quot;&quot;&#10;                item.currentUid -&gt; &quot;You&quot;&#10;                else -&gt; &quot;${item.peer.firstName} ${item.peer.lastName}&quot;&#10;            }&#10;            val messageText = item.lastMessage?.text?.takeIf { it.isNotBlank() } ?: &quot;No messages yet&quot;&#10;            Text(&#10;                text = if (item.lastMessage != null) &quot;$senderName: $messageText&quot; else messageText,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = Color.Gray,&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;        }&#10;&#10;        if (item.timeAgo.isNotEmpty()) {&#10;            Text(&#10;                text = item.timeAgo,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;/** Divider bắt đầu từ chỗ text (không chạy dưới avatar) */&#10;@Composable&#10;fun InsetDivider(start: Dp, modifier: Modifier = Modifier) {&#10;    Divider(&#10;        modifier = modifier.padding(start = start),&#10;        thickness = 0.6.dp,&#10;        color = Color(0x1A000000) // đen 10% cho nhẹ nhàng&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.chat&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import coil.compose.AsyncImage&#10;import com.example.dating.data.model.ConversationPreview&#10;import com.example.dating.data.model.User&#10;import com.example.dating.navigation.Screen&#10;import com.example.dating.ui.components.*&#10;import com.example.dating.ui.theme.AppColors&#10;import com.example.dating.viewmodel.MessagesViewModel&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MessagesScreen(&#10;    navController: NavController,&#10;    viewModel: MessagesViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsState()&#10;    val filterState by viewModel.filterState.collectAsState()&#10;    val sheetState = rememberModalBottomSheetState()&#10;    var showFilterSheet by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(bottomBar = { BottomNavigationBar(navController, 2) }) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(AppColors.MainBackground)&#10;                .padding(paddingValues)&#10;        ) {&#10;            MessagesHeader(onFilterClick = { showFilterSheet = true })&#10;&#10;            when {&#10;                uiState.isLoading -&gt; Box(Modifier.fillMaxSize(), Alignment.Center) {&#10;                    CircularProgressIndicator()&#10;                }&#10;&#10;                uiState.error != null -&gt; Box(Modifier.fillMaxSize(), Alignment.Center) {&#10;                    Text(uiState.error ?: &quot;Unknown error&quot;, color = Color.Red)&#10;                }&#10;&#10;                else -&gt; {&#10;                    // Activities&#10;                    Text(&#10;                        &quot;Activities&quot;,&#10;                        modifier = Modifier.padding(start = 20.dp, top = 8.dp, end = 20.dp),&#10;                        fontWeight = FontWeight.SemiBold&#10;                    )&#10;                    LazyRow(&#10;                        modifier = Modifier.padding(horizontal = 12.dp, vertical = 4.dp),&#10;                        contentPadding = PaddingValues(horizontal = 8.dp)&#10;                    ) {&#10;                        items(uiState.messages) { StoryAvatar(it.peer) }&#10;                    }&#10;&#10;                    Spacer(Modifier.height(8.dp))&#10;&#10;                    // White rounded container for the Messages section&#10;                    MessagesSectionCard(&#10;                        messages = uiState.messages,&#10;                        onItemClick = { c -&gt;&#10;                            navController.navigate(&#10;                                Screen.ChatDetail.createRoute(c.id)&#10;                            )&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Filter sheet&#10;        if (showFilterSheet) {&#10;            ModalBottomSheet(&#10;                onDismissRequest = { showFilterSheet = false },&#10;                sheetState = sheetState,&#10;                shape = RoundedCornerShape(topStart = 28.dp, topEnd = 28.dp),&#10;                containerColor = Color.White&#10;            ) {&#10;                MessagesFilterSheet(&#10;                    state = filterState,&#10;                    onChange = { viewModel.updateFilter(it) },&#10;                    onClear = {&#10;                        viewModel.clearFilter()&#10;                        showFilterSheet = false&#10;                    },&#10;                    onApply = {&#10;                        viewModel.applyFilter()&#10;                        showFilterSheet = false&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun MessagesSectionCard(&#10;    messages: List&lt;ConversationPreview&gt;,&#10;    onItemClick: (ConversationPreview) -&gt; Unit&#10;) {&#10;    val cardHPad = 20.dp&#10;    val avatar = 56.dp&#10;    val gap = 12.dp&#10;    val startIndent = cardHPad + avatar + gap&#10;&#10;    Card(&#10;        shape = RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp),&#10;        colors = CardDefaults.cardColors(containerColor = Color.White),&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        if (messages.isEmpty()) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(24.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.Center&#10;            ) {&#10;                Text(&#10;                    text = &quot;No Messages Yet&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(Modifier.height(8.dp))&#10;                Text(&#10;                    text = &quot;When you match and chat with others,\nyour messages will show up here&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = Color.Gray,&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;        } else {&#10;            LazyColumn(&#10;                contentPadding = PaddingValues(&#10;                    start = cardHPad, end = cardHPad, top = 16.dp, bottom = 90.dp&#10;                )&#10;            ) {&#10;                // Header inside the white container&#10;                item {&#10;                    Text(&#10;                        text = &quot;Messages&quot;,&#10;                        style = MaterialTheme.typography.titleLarge.copy(fontWeight = FontWeight.SemiBold),&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;                }&#10;&#10;                items(messages) { conversation -&gt;&#10;                    MessageItem(&#10;                        item = conversation,&#10;                        onClick = { onItemClick(conversation) }&#10;                    )&#10;                    InsetDivider(start = startIndent)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun StoryAvatar(user: User) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        modifier = Modifier.padding(8.dp)&#10;    ) {&#10;        AsyncImage(&#10;            model = user.avatarUrl ?: &quot;https://i.pravatar.cc/150?u=${user.uid}&quot;,&#10;            contentDescription = null,&#10;            modifier = Modifier&#10;                .size(60.dp)&#10;                .clip(CircleShape)&#10;                .border(2.dp, Color.Magenta, CircleShape)&#10;        )&#10;        Text(user.firstName, fontSize = 12.sp)&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MessageItem(item: ConversationPreview, onClick: () -&gt; Unit = {}) {&#10;    android.util.Log.d(&quot;MessageItem&quot;, item.toString())&#10;    Row(&#10;        Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick)&#10;            .padding(vertical = 12.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        AsyncImage(&#10;            model = item.peer.avatarUrl ?: &quot;https://i.pravatar.cc/150?u=${item.peer.uid}&quot;,&#10;            contentDescription = null,&#10;            modifier = Modifier&#10;                .size(56.dp)&#10;                .clip(CircleShape)&#10;        )&#10;&#10;        Spacer(Modifier.width(12.dp))&#10;&#10;        Column(Modifier.weight(1f)) {&#10;            Text(&#10;                text = &quot;${item.peer.firstName} ${item.peer.lastName}&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            val senderName = when (item.lastMessage?.fromUid) {&#10;                null -&gt; &quot;&quot;&#10;                item.currentUid -&gt; &quot;You&quot;&#10;                else -&gt; &quot;${item.peer.firstName} ${item.peer.lastName}&quot;&#10;            }&#10;            val messageText = item.lastMessage?.text?.takeIf { it.isNotBlank() } ?: &quot;No messages yet&quot;&#10;            Text(&#10;                text = if (item.lastMessage != null) &quot;$senderName: $messageText&quot; else messageText,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = Color.Gray,&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;        }&#10;&#10;        val lastMsgTimestamp = item.lastMessage?.timestamp ?: 0L&#10;        val formattedTimeAgo = formatTimeAgo(lastMsgTimestamp)&#10;        if (formattedTimeAgo.isNotEmpty()) {&#10;            Text(&#10;                text = formattedTimeAgo,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;/** Divider bắt đầu từ chỗ text (không chạy dưới avatar) */&#10;@Composable&#10;fun InsetDivider(start: Dp, modifier: Modifier = Modifier) {&#10;    Divider(&#10;        modifier = modifier.padding(start = start),&#10;        thickness = 0.6.dp,&#10;        color = Color(0x1A000000) // đen 10% cho nhẹ nhàng&#10;    )&#10;}&#10;&#10;private fun formatTimeAgo(timestamp: Long): String {&#10;    if (timestamp == 0L) return &quot;&quot;&#10;    val now = System.currentTimeMillis()&#10;    val msgDate = java.util.Calendar.getInstance().apply { timeInMillis = timestamp }&#10;    val today = java.util.Calendar.getInstance().apply { timeInMillis = now }&#10;    val isSameDay = msgDate.get(java.util.Calendar.YEAR) == today.get(java.util.Calendar.YEAR) &amp;&amp;&#10;        msgDate.get(java.util.Calendar.DAY_OF_YEAR) == today.get(java.util.Calendar.DAY_OF_YEAR)&#10;    return if (isSameDay) &quot;&quot; else {&#10;        val dayOfWeek = msgDate.get(java.util.Calendar.DAY_OF_WEEK)&#10;        val days = listOf(&quot;Sun&quot;, &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;)&#10;        days[dayOfWeek - 1]&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/FilterDialog.kt.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/FilterDialog.kt.kt" />
              <option name="originalContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FilterScreen(navController: NavController) {&#10;    // State variables&#10;    var selectedInterest by remember { mutableStateOf(&quot;Girls&quot;) }&#10;    var location by remember { mutableStateOf(&quot;Chicago, USA&quot;) }&#10;    var distance by remember { mutableFloatStateOf(40f) }&#10;    var ageRange by remember { mutableStateOf(20f..28f) }&#10;&#10;    // Bottom sheet or dialog content&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .wrapContentHeight()&#10;            .clip(RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp))&#10;            .background(Color.White)&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        // Notch&#10;        Box(&#10;            modifier = Modifier&#10;                .width(40.dp)&#10;                .height(4.dp)&#10;                .background(Color.Gray.copy(alpha = 0.5f), CircleShape)&#10;                .align(Alignment.CenterHorizontally)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Title and Clear&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Filters&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.Black&#10;            )&#10;            TextButton(onClick = { /* TODO: Clear filters */ }) {&#10;                Text(&#10;                    text = &quot;Clear&quot;,&#10;                    color = Color(0xFFFF69B4), // Pink&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Interested in&#10;        Text(&#10;            text = &quot;Interested in&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        SegmentedButtonRow(modifier = Modifier.fillMaxWidth()) {&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Girls&quot;,&#10;                onClick = { selectedInterest = &quot;Girls&quot; },&#10;                shape = RoundedCornerShape(topStart = 8.dp, bottomStart = 8.dp)&#10;            ) {&#10;                Text(&quot;Girls&quot;)&#10;            }&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Boys&quot;,&#10;                onClick = { selectedInterest = &quot;Boys&quot; },&#10;                shape = RoundedCornerShape(0.dp)&#10;            ) {&#10;                Text(&quot;Boys&quot;)&#10;            }&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Both&quot;,&#10;                onClick = { selectedInterest = &quot;Both&quot; },&#10;                shape = RoundedCornerShape(topEnd = 8.dp, bottomEnd = 8.dp)&#10;            ) {&#10;                Text(&quot;Both&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Location&#10;        Text(&#10;            text = &quot;Location&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        OutlinedTextField(&#10;            value = location,&#10;            onValueChange = { /* Read-only, tap to select */ },&#10;            readOnly = true,&#10;            modifier = Modifier.fillMaxWidth(),&#10;            trailingIcon = {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowForward,&#10;                    contentDescription = &quot;Select location&quot;,&#10;                    tint = Color(0xFFFF0000) // Red&#10;                )&#10;            },&#10;            singleLine = true,&#10;            interactionSource = remember { MutableInteractionSource() }.also { interactionSource -&gt;&#10;                // TODO: Handle click to open location selector&#10;            }&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Distance&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;Distance&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;            Text(&#10;                text = &quot;${distance.toInt()}km&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;        Slider(&#10;            value = distance,&#10;            onValueChange = { distance = it },&#10;            valueRange = 0f..100f, // Assuming max 100km&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = SliderDefaults.colors(&#10;                thumbColor = Color(0xFFBB86FC), // Purple&#10;                activeTrackColor = Color(0xFFBB86FC),&#10;                inactiveTrackColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Age&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;Age&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;            Text(&#10;                text = &quot;${ageRange.start.toInt()}-${ageRange.endInclusive.toInt()}&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;        RangeSlider(&#10;            value = ageRange,&#10;            onValueChange = { ageRange = it },&#10;            valueRange = 18f..100f, // Assuming age range&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = SliderDefaults.colors(&#10;                thumbColor = Color(0xFFBB86FC), // Purple&#10;                activeTrackColor = Color(0xFFBB86FC),&#10;                inactiveTrackColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // Continue button&#10;        Button(&#10;            onClick = { /* TODO: Apply filters and navigate */ },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(48.dp),&#10;            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFBB86FC).copy(alpha = 0.2f)), // Light purple&#10;            shape = RoundedCornerShape(24.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Continue&quot;,&#10;                color = Color.Black,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FilterDialog(&#10;    show: Boolean,&#10;    onDismiss: () -&gt; Unit,&#10;    onApply: (selectedInterest: String, location: String, distance: Float, ageRange: ClosedFloatingPointRange&lt;Float&gt;) -&gt; Unit&#10;) {&#10;    if (!show) return&#10;    var selectedInterest by remember { mutableStateOf(&quot;Girls&quot;) }&#10;    var location by remember { mutableStateOf(&quot;Chicago, USA&quot;) }&#10;    var distance by remember { mutableStateOf(40f) }&#10;    var ageRange by remember { mutableStateOf(20f..28f) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    onApply(selectedInterest, location, distance, ageRange)&#10;                    onDismiss()&#10;                },&#10;                modifier = Modifier.fillMaxWidth().height(48.dp),&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFBB86FC).copy(alpha = 0.2f)),&#10;                shape = RoundedCornerShape(24.dp)&#10;            ) {&#10;                Text(&quot;Continue&quot;, color = Color.Black, fontSize = 16.sp, fontWeight = FontWeight.Bold)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;, color = Color.Gray)&#10;            }&#10;        },&#10;        title = {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&quot;Filters&quot;, fontSize = 20.sp, fontWeight = FontWeight.Bold, color = Color.Black)&#10;                TextButton(onClick = {&#10;                    selectedInterest = &quot;Girls&quot;&#10;                    location = &quot;Chicago, USA&quot;&#10;                    distance = 40f&#10;                    ageRange = 20f..28f&#10;                }) {&#10;                    Text(&quot;Clear&quot;, color = Color(0xFFFF69B4), fontSize = 16.sp)&#10;                }&#10;            }&#10;        },&#10;        text = {&#10;            Column(modifier = Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {&#10;                // Interested in&#10;                Text(&quot;Interested in&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.Center) {&#10;                    FilterSegmentButton(&quot;Girls&quot;, selectedInterest == &quot;Girls&quot;) { selectedInterest = &quot;Girls&quot; }&#10;                    FilterSegmentButton(&quot;Boys&quot;, selectedInterest == &quot;Boys&quot;) { selectedInterest = &quot;Boys&quot; }&#10;                    FilterSegmentButton(&quot;Both&quot;, selectedInterest == &quot;Both&quot;) { selectedInterest = &quot;Both&quot; }&#10;                }&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Location&#10;                Text(&quot;Location&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                OutlinedTextField(&#10;                    value = location,&#10;                    onValueChange = { location = it },&#10;                    readOnly = false,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    trailingIcon = {&#10;                        Icon(imageVector = Icons.Default.ArrowForward, contentDescription = &quot;Select location&quot;, tint = Color(0xFFFF0000))&#10;                    },&#10;                    singleLine = true&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Distance&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Distance&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${distance.toInt()}km&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                Slider(&#10;                    value = distance,&#10;                    onValueChange = { distance = it },&#10;                    valueRange = 0f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = Color(0xFFBB86FC),&#10;                        activeTrackColor = Color(0xFFBB86FC),&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Age&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Age&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${ageRange.start.toInt()}-${ageRange.endInclusive.toInt()}&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                RangeSlider(&#10;                    value = ageRange,&#10;                    onValueChange = { ageRange = it },&#10;                    valueRange = 18f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = Color(0xFFBB86FC),&#10;                        activeTrackColor = Color(0xFFBB86FC),&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;            }&#10;        },&#10;        shape = RoundedCornerShape(24.dp),&#10;        containerColor = Color.White&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun FilterSegmentButton(text: String, selected: Boolean, onClick: () -&gt; Unit) {&#10;    Button(&#10;        onClick = onClick,&#10;        colors = ButtonDefaults.buttonColors(&#10;            containerColor = if (selected) Color(0xFFBB86FC) else Color.LightGray,&#10;            contentColor = if (selected) Color.White else Color.Black&#10;        ),&#10;        modifier = Modifier&#10;            .weight(1f)&#10;            .height(36.dp)&#10;            .padding(horizontal = 2.dp),&#10;        shape = RoundedCornerShape(8.dp)&#10;    ) {&#10;        Text(text)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class HomeViewModel : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val _addFavoriteState = MutableStateFlow&lt;Result&lt;Unit&gt;?&gt;(null)&#10;    val addFavoriteState: StateFlow&lt;Result&lt;Unit&gt;?&gt; = _addFavoriteState&#10;&#10;    fun addFavorite(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        val favorite = hashMapOf(&#10;            &quot;likerId&quot; to likerId,&#10;            &quot;likedId&quot; to likedId,&#10;            &quot;timestamp&quot; to Timestamp.now()&#10;        )&#10;        viewModelScope.launch {&#10;            try {&#10;                db.collection(&quot;favorites&quot;).add(favorite)&#10;                _addFavoriteState.value = Result.success(Unit)&#10;            } catch (e: Exception) {&#10;                _addFavoriteState.value = Result.failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearAddFavoriteState() {&#10;        _addFavoriteState.value = null&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/profile/UserProfileScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/profile/UserProfileScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.profile&#10;&#10;import androidx.compose.animation.core.Animatable&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.gestures.detectDragGestures&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.FlowRow&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.outlined.ArrowBack&#10;import androidx.compose.material.icons.outlined.Close&#10;import androidx.compose.material.icons.outlined.Favorite&#10;import androidx.compose.material.icons.outlined.Star&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.SpanStyle&#10;import androidx.compose.ui.text.buildAnnotatedString&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.text.withStyle&#10;import androidx.compose.ui.unit.IntOffset&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import coil.compose.AsyncImage&#10;import com.example.dating.R&#10;import com.example.dating.data.model.User&#10;import com.example.dating.navigation.Screen&#10;import com.example.dating.viewmodel.UserViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun UserProfileScreen(&#10;    navController: NavController,&#10;    userUid: String? = null,&#10;    viewModel: UserViewModel = hiltViewModel()&#10;) {&#10;    LaunchedEffect(userUid) { viewModel.observeUser(userUid) }&#10;&#10;    val user by viewModel.user.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            CenterAlignedTopAppBar(&#10;                title = { Text(&quot;Profile&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.navigateUp() }) {&#10;                        Icon(Icons.Outlined.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { padding -&gt;&#10;        when {&#10;            isLoading -&gt; Box(Modifier.fillMaxSize().padding(padding), contentAlignment = Alignment.Center) {&#10;                CircularProgressIndicator()&#10;            }&#10;            user != null -&gt; UserProfileContent(&#10;                modifier = Modifier.padding(padding),&#10;                user = user!!,&#10;                onSwipeDone = { dir -&gt;&#10;                    // báo về Home để tự next&#10;                    navController.previousBackStackEntry?.savedStateHandle?.set(&quot;advanceNext&quot;, user!!.uid)&#10;                    navController.previousBackStackEntry?.savedStateHandle?.set(&quot;swipeDir&quot;, dir)&#10;                    navController.navigateUp()&#10;                },&#10;                onSeeAll = { images -&gt;&#10;                    navController.currentBackStackEntry?.savedStateHandle?.set(&quot;images&quot;, ArrayList(images))&#10;                    navController.navigate(Screen.PhotoViewer.route(0))&#10;                },&#10;                onImageClick = { index, images -&gt;&#10;                    navController.currentBackStackEntry?.savedStateHandle?.set(&quot;images&quot;, ArrayList(images))&#10;                    navController.navigate(Screen.PhotoViewer.route(index))&#10;                }&#10;            )&#10;            else -&gt; Box(Modifier.fillMaxSize().padding(padding), contentAlignment = Alignment.Center) {&#10;                Text(&quot;Cannot load profile&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalLayoutApi::class)&#10;@Composable&#10;private fun UserProfileContent(&#10;    modifier: Modifier = Modifier,&#10;    user: User,&#10;    onSwipeDone: (dir: String) -&gt; Unit,&#10;    onSeeAll: (List&lt;String&gt;) -&gt; Unit,&#10;    onImageClick: (Int, List&lt;String&gt;) -&gt; Unit&#10;) {&#10;    // ====== Safe values + defaults&#10;    val name = listOf(user.firstName, user.lastName)&#10;        .filter { it.isNotBlank() }.joinToString(&quot; &quot;).ifBlank { &quot;Jessica Parker&quot; }&#10;    val ageText = user.birthday?.split(&quot;-&quot;)?.firstOrNull()?.toIntOrNull()?.let {&#10;        &quot;, &quot; + (java.util.Calendar.getInstance().get(java.util.Calendar.YEAR) - it)&#10;    } ?: &quot;, 23&quot;&#10;    val job = user.job ?: &quot;Professional model&quot;&#10;    val location = user.location ?: &quot;Chicago, IL, United States&quot;&#10;    val about = user.description ?: &quot;My name is $name and I enjoy meeting new people and finding ways to help them have an uplifting experience. I enjoy reading...&quot;&#10;    val images = user.imageUrl&#10;    val avatarUrl = user.avatarUrl ?: images.firstOrNull() // có thể null&#10;&#10;    // ====== Swipe state (hero)&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;    val offsetY = remember { Animatable(0f) }&#10;    val threshold = 200f&#10;    val rotation = (offsetX.value / 15).coerceIn(-25f, 25f)&#10;&#10;    LazyColumn(&#10;        modifier = modifier.fillMaxSize(),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        // ----------------- HERO (swipeable) -----------------&#10;        item {&#10;            Box(&#10;                Modifier&#10;                    .fillMaxWidth()&#10;                    .height(340.dp)&#10;                    .offset { IntOffset(offsetX.value.toInt(), offsetY.value.toInt()) }&#10;                    .graphicsLayer { rotationZ = rotation }&#10;                    .pointerInput(Unit) {&#10;                        detectDragGestures(&#10;                            onDragEnd = {&#10;                                scope.launch {&#10;                                    when {&#10;                                        offsetX.value &gt; threshold -&gt; {&#10;                                            offsetX.animateTo(1000f, tween(280))&#10;                                            onSwipeDone(&quot;like&quot;)&#10;                                            offsetX.snapTo(0f); offsetY.snapTo(0f)&#10;                                        }&#10;                                        offsetX.value &lt; -threshold -&gt; {&#10;                                            offsetX.animateTo(-1000f, tween(280))&#10;                                            onSwipeDone(&quot;dislike&quot;)&#10;                                            offsetX.snapTo(0f); offsetY.snapTo(0f)&#10;                                        }&#10;                                        else -&gt; {&#10;                                            offsetX.animateTo(0f, tween(220))&#10;                                            offsetY.animateTo(0f, tween(220))&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        ) { _, drag -&gt;&#10;                            scope.launch {&#10;                                offsetX.snapTo(offsetX.value + drag.x)&#10;                                offsetY.snapTo(offsetY.value + drag.y)&#10;                            }&#10;                        }&#10;                    }&#10;            ) {&#10;                // Ảnh hero: có URL thì AsyncImage, không có thì avatar mặc định&#10;                if (!avatarUrl.isNullOrBlank()) {&#10;                    AsyncImage(&#10;                        model = avatarUrl,&#10;                        contentDescription = &quot;hero&quot;,&#10;                        placeholder = painterResource(R.drawable.ic_avatar),&#10;                        error = painterResource(R.drawable.ic_avatar),&#10;                        contentScale = ContentScale.Crop,&#10;                        modifier = Modifier.fillMaxSize()&#10;                    )&#10;                } else {&#10;                    Image(&#10;                        painter = painterResource(R.drawable.ic_avatar),&#10;                        contentDescription = &quot;hero-placeholder&quot;,&#10;                        contentScale = ContentScale.Crop,&#10;                        modifier = Modifier.fillMaxSize()&#10;                    )&#10;                }&#10;&#10;                // 3 nút nổi&#10;                Row(&#10;                    horizontalArrangement = Arrangement.spacedBy(20.dp),&#10;                    modifier = Modifier&#10;                        .align(Alignment.BottomCenter)&#10;                        .offset(y = 280.dp)&#10;                ) {&#10;                    CircleButton({ Icon(Icons.Outlined.Close, null) }, Color(0xFFFDE7EC), Color(0xFFE34B6B))&#10;                    CircleButton({ Icon(Icons.Outlined.Favorite, null) }, Color(0xFFEDE2FF), MaterialTheme.colorScheme.primary)&#10;                    CircleButton({ Icon(Icons.Outlined.Star, null) }, Color(0xFFEDEAFF), Color(0xFF6F57FF))&#10;                }&#10;            }&#10;        }&#10;&#10;        // ----------------- CARD nội dung (kéo được) -----------------&#10;        item {&#10;            Card(&#10;                shape = RoundedCornerShape(topStart = 28.dp, topEnd = 28.dp),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .offset(y = (-24).dp)&#10;                    .padding(horizontal = 16.dp)&#10;            ) {&#10;                Column(Modifier.padding(horizontal = 16.dp, vertical = 20.dp)) {&#10;&#10;                    // Tên + tuổi&#10;                    Text(&quot;$name$ageText&quot;, style = MaterialTheme.typography.headlineSmall, fontWeight = FontWeight.Bold)&#10;                    Spacer(Modifier.height(4.dp))&#10;&#10;                    // Job&#10;                    Text(job, style = MaterialTheme.typography.bodyMedium, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                    Spacer(Modifier.height(2.dp))&#10;&#10;                    // Location + 1km&#10;                    Row(verticalAlignment = Alignment.CenterVertically) {&#10;                        Text(location, style = MaterialTheme.typography.bodySmall, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                        Spacer(Modifier.width(8.dp))&#10;                        AssistChip(onClick = {}, label = { Text(&quot;1 km&quot;) })&#10;                    }&#10;&#10;                    // About&#10;                    Spacer(Modifier.height(16.dp))&#10;                    Text(&quot;About&quot;, style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.SemiBold)&#10;                    Spacer(Modifier.height(6.dp))&#10;                    var expanded by remember { mutableStateOf(false) }&#10;                    Text(&#10;                        about,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        maxLines = if (expanded) Int.MAX_VALUE else 3,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                    if (!expanded) {&#10;                        Text(&#10;                            buildAnnotatedString {&#10;                                withStyle(SpanStyle(color = MaterialTheme.colorScheme.primary, fontWeight = FontWeight.SemiBold)) {&#10;                                    append(&quot;Read more&quot;)&#10;                                }&#10;                            },&#10;                            modifier = Modifier.padding(top = 6.dp).clickable { expanded = true }&#10;                        )&#10;                    }&#10;&#10;                    // Interests&#10;                    if (user.interests.isNotEmpty()) {&#10;                        Spacer(Modifier.height(16.dp))&#10;                        Text(&quot;Interests&quot;, style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.SemiBold)&#10;                        Spacer(Modifier.height(8.dp))&#10;                        FlowRow(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            user.interests.forEachIndexed { i, itx -&gt;&#10;                                if (i &lt; 2) FilterChip(selected = true, onClick = {}, label = { Text(itx) })&#10;                                else AssistChip(onClick = {}, label = { Text(itx) })&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Gallery&#10;                    Spacer(Modifier.height(16.dp))&#10;                    Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()) {&#10;                        Text(&quot;Gallery&quot;, style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.SemiBold, modifier = Modifier.weight(1f))&#10;                        Text(&#10;                            &quot;See all&quot;,&#10;                            color = MaterialTheme.colorScheme.primary,&#10;                            style = MaterialTheme.typography.labelLarge,&#10;                            modifier = Modifier.clickable {&#10;                                if (images.isNotEmpty()) onSeeAll(images)&#10;                            }&#10;                        )&#10;                    }&#10;                    Spacer(Modifier.height(8.dp))&#10;&#10;                    if (images.isNotEmpty()) {&#10;                        val preview = images.take(6)&#10;                        LazyVerticalGrid(&#10;                            columns = GridCells.Fixed(3),&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(((preview.size + 2) / 3 * 110).dp)&#10;                        ) {&#10;                            items(preview) { img -&gt;&#10;                                val idx = images.indexOf(img)&#10;                                AsyncImage(&#10;                                    model = img,&#10;                                    contentDescription = null,&#10;                                    placeholder = painterResource(R.drawable.ic_avatar),&#10;                                    error = painterResource(R.drawable.ic_avatar),&#10;                                    contentScale = ContentScale.Crop,&#10;                                    modifier = Modifier&#10;                                        .aspectRatio(1f)&#10;                                        .clip(RoundedCornerShape(12.dp))&#10;                                        .clickable { onImageClick(idx, images) }&#10;                                )&#10;                            }&#10;                        }&#10;                    } else {&#10;                        // Empty state gallery&#10;                        Surface(&#10;                            tonalElevation = 1.dp,&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(120.dp)&#10;                        ) {&#10;                            Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;                                Text(&quot;No images available&quot;, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        item { Spacer(Modifier.height(28.dp)) }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CircleButton(icon: @Composable () -&gt; Unit, container: Color, content: Color) {&#10;    Surface(&#10;        color = container,&#10;        contentColor = content,&#10;        shape = CircleShape,&#10;        shadowElevation = 8.dp,&#10;        modifier = Modifier.size(56.dp)&#10;    ) { Box(contentAlignment = Alignment.Center) { icon() } }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.profile&#10;&#10;import androidx.compose.animation.core.Animatable&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.gestures.detectDragGestures&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.FlowRow&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.outlined.ArrowBack&#10;import androidx.compose.material.icons.outlined.Close&#10;import androidx.compose.material.icons.outlined.Favorite&#10;import androidx.compose.material.icons.outlined.Star&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.SpanStyle&#10;import androidx.compose.ui.text.buildAnnotatedString&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.text.withStyle&#10;import androidx.compose.ui.unit.IntOffset&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import coil.compose.AsyncImage&#10;import com.example.dating.R&#10;import com.example.dating.data.model.User&#10;import com.example.dating.navigation.Screen&#10;import com.example.dating.viewmodel.UserViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun UserProfileScreen(&#10;    navController: NavController,&#10;    userUid: String? = null,&#10;    viewModel: UserViewModel = hiltViewModel()&#10;) {&#10;    LaunchedEffect(userUid) { viewModel.observeUser(userUid) }&#10;&#10;    val user by viewModel.user.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            CenterAlignedTopAppBar(&#10;                title = { Text(&quot;Profile&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.navigateUp() }) {&#10;                        Icon(Icons.Outlined.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { padding -&gt;&#10;        when {&#10;            isLoading -&gt; Box(Modifier.fillMaxSize().padding(padding), contentAlignment = Alignment.Center) {&#10;                CircularProgressIndicator()&#10;            }&#10;            user != null -&gt; UserProfileContent(&#10;                modifier = Modifier.padding(padding),&#10;                user = user!!,&#10;                onSwipeDone = { dir -&gt;&#10;                    // báo về Home để tự next&#10;                    navController.previousBackStackEntry?.savedStateHandle?.set(&quot;advanceNext&quot;, user!!.uid)&#10;                    navController.previousBackStackEntry?.savedStateHandle?.set(&quot;swipeDir&quot;, dir)&#10;                    navController.navigateUp()&#10;                },&#10;                onSeeAll = { images -&gt;&#10;                    navController.currentBackStackEntry?.savedStateHandle?.set(&quot;images&quot;, ArrayList(images))&#10;                    navController.navigate(Screen.PhotoViewer.route(0))&#10;                },&#10;                onImageClick = { index, images -&gt;&#10;                    navController.currentBackStackEntry?.savedStateHandle?.set(&quot;images&quot;, ArrayList(images))&#10;                    navController.navigate(Screen.PhotoViewer.route(index))&#10;                }&#10;            )&#10;            else -&gt; Box(Modifier.fillMaxSize().padding(padding), contentAlignment = Alignment.Center) {&#10;                Text(&quot;Cannot load profile&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalLayoutApi::class)&#10;@Composable&#10;private fun UserProfileContent(&#10;    modifier: Modifier = Modifier,&#10;    user: User,&#10;    onSwipeDone: (dir: String) -&gt; Unit,&#10;    onSeeAll: (List&lt;String&gt;) -&gt; Unit,&#10;    onImageClick: (Int, List&lt;String&gt;) -&gt; Unit&#10;) {&#10;    // ====== Safe values + defaults&#10;    val name = listOf(user.firstName, user.lastName)&#10;        .filter { it.isNotBlank() }.joinToString(&quot; &quot;).ifBlank { &quot;Jessica Parker&quot; }&#10;    val ageText = user.birthday?.let {&#10;        // Try to parse year from yyyy-MM-dd or dd/MM/yyyy or MM/dd/yyyy&#10;        val year = when {&#10;            it.contains(&quot;-&quot;) -&gt; it.split(&quot;-&quot;).firstOrNull()?.toIntOrNull() // yyyy-MM-dd&#10;            it.contains(&quot;/&quot;) -&gt; it.split(&quot;/&quot;).lastOrNull()?.toIntOrNull() // dd/MM/yyyy or MM/dd/yyyy&#10;            else -&gt; null&#10;        }&#10;        year?.let { birthYear -&gt;&#10;            &quot;, &quot; + (java.util.Calendar.getInstance().get(java.util.Calendar.YEAR) - birthYear)&#10;        } ?: &quot;, ?&quot;&#10;    } ?: &quot;, ?&quot;&#10;    val job = user.job ?: &quot;Professional model&quot;&#10;    val location = user.location ?: &quot;Chicago, IL, United States&quot;&#10;    val about = user.description ?: &quot;My name is $name and I enjoy meeting new people and finding ways to help them have an uplifting experience. I enjoy reading...&quot;&#10;    val images = user.imageUrl&#10;    val avatarUrl = user.avatarUrl ?: images.firstOrNull() // có thể null&#10;&#10;    // ====== Swipe state (hero)&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;    val offsetY = remember { Animatable(0f) }&#10;    val threshold = 200f&#10;    val rotation = (offsetX.value / 15).coerceIn(-25f, 25f)&#10;&#10;    LazyColumn(&#10;        modifier = modifier.fillMaxSize(),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        // ----------------- HERO (swipeable) -----------------&#10;        item {&#10;            Box(&#10;                Modifier&#10;                    .fillMaxWidth()&#10;                    .height(340.dp)&#10;                    .offset { IntOffset(offsetX.value.toInt(), offsetY.value.toInt()) }&#10;                    .graphicsLayer { rotationZ = rotation }&#10;                    .pointerInput(Unit) {&#10;                        detectDragGestures(&#10;                            onDragEnd = {&#10;                                scope.launch {&#10;                                    when {&#10;                                        offsetX.value &gt; threshold -&gt; {&#10;                                            offsetX.animateTo(1000f, tween(280))&#10;                                            onSwipeDone(&quot;like&quot;)&#10;                                            offsetX.snapTo(0f); offsetY.snapTo(0f)&#10;                                        }&#10;                                        offsetX.value &lt; -threshold -&gt; {&#10;                                            offsetX.animateTo(-1000f, tween(280))&#10;                                            onSwipeDone(&quot;dislike&quot;)&#10;                                            offsetX.snapTo(0f); offsetY.snapTo(0f)&#10;                                        }&#10;                                        else -&gt; {&#10;                                            offsetX.animateTo(0f, tween(220))&#10;                                            offsetY.animateTo(0f, tween(220))&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        ) { _, drag -&gt;&#10;                            scope.launch {&#10;                                offsetX.snapTo(offsetX.value + drag.x)&#10;                                offsetY.snapTo(offsetY.value + drag.y)&#10;                            }&#10;                        }&#10;                    }&#10;            ) {&#10;                // Ảnh hero: có URL thì AsyncImage, không có thì avatar mặc định&#10;                if (!avatarUrl.isNullOrBlank()) {&#10;                    AsyncImage(&#10;                        model = avatarUrl,&#10;                        contentDescription = &quot;hero&quot;,&#10;                        placeholder = painterResource(R.drawable.ic_avatar),&#10;                        error = painterResource(R.drawable.ic_avatar),&#10;                        contentScale = ContentScale.Crop,&#10;                        modifier = Modifier.fillMaxSize()&#10;                    )&#10;                } else {&#10;                    Image(&#10;                        painter = painterResource(R.drawable.ic_avatar),&#10;                        contentDescription = &quot;hero-placeholder&quot;,&#10;                        contentScale = ContentScale.Crop,&#10;                        modifier = Modifier.fillMaxSize()&#10;                    )&#10;                }&#10;&#10;                // 3 nút nổi&#10;                Row(&#10;                    horizontalArrangement = Arrangement.spacedBy(20.dp),&#10;                    modifier = Modifier&#10;                        .align(Alignment.BottomCenter)&#10;                        .offset(y = 280.dp)&#10;                ) {&#10;                    CircleButton({ Icon(Icons.Outlined.Close, null) }, Color(0xFFFDE7EC), Color(0xFFE34B6B))&#10;                    CircleButton({ Icon(Icons.Outlined.Favorite, null) }, Color(0xFFEDE2FF), MaterialTheme.colorScheme.primary)&#10;                    CircleButton({ Icon(Icons.Outlined.Star, null) }, Color(0xFFEDEAFF), Color(0xFF6F57FF))&#10;                }&#10;            }&#10;        }&#10;&#10;        // ----------------- CARD nội dung (kéo được) -----------------&#10;        item {&#10;            Card(&#10;                shape = RoundedCornerShape(topStart = 28.dp, topEnd = 28.dp),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .offset(y = (-24).dp)&#10;                    .padding(horizontal = 16.dp)&#10;            ) {&#10;                Column(Modifier.padding(horizontal = 16.dp, vertical = 20.dp)) {&#10;&#10;                    // Tên + tuổi&#10;                    Text(&quot;$name$ageText&quot;, style = MaterialTheme.typography.headlineSmall, fontWeight = FontWeight.Bold)&#10;                    Spacer(Modifier.height(4.dp))&#10;&#10;                    // Job&#10;                    Text(job, style = MaterialTheme.typography.bodyMedium, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                    Spacer(Modifier.height(2.dp))&#10;&#10;                    // Location + 1km&#10;                    Row(verticalAlignment = Alignment.CenterVertically) {&#10;                        Text(location, style = MaterialTheme.typography.bodySmall, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                        Spacer(Modifier.width(8.dp))&#10;                        AssistChip(onClick = {}, label = { Text(&quot;1 km&quot;) })&#10;                    }&#10;&#10;                    // About&#10;                    Spacer(Modifier.height(16.dp))&#10;                    Text(&quot;About&quot;, style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.SemiBold)&#10;                    Spacer(Modifier.height(6.dp))&#10;                    var expanded by remember { mutableStateOf(false) }&#10;                    Text(&#10;                        about,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        maxLines = if (expanded) Int.MAX_VALUE else 3,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                    if (!expanded) {&#10;                        Text(&#10;                            buildAnnotatedString {&#10;                                withStyle(SpanStyle(color = MaterialTheme.colorScheme.primary, fontWeight = FontWeight.SemiBold)) {&#10;                                    append(&quot;Read more&quot;)&#10;                                }&#10;                            },&#10;                            modifier = Modifier.padding(top = 6.dp).clickable { expanded = true }&#10;                        )&#10;                    }&#10;&#10;                    // Interests&#10;                    if (user.interests.isNotEmpty()) {&#10;                        Spacer(Modifier.height(16.dp))&#10;                        Text(&quot;Interests&quot;, style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.SemiBold)&#10;                        Spacer(Modifier.height(8.dp))&#10;                        FlowRow(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            user.interests.forEachIndexed { i, itx -&gt;&#10;                                if (i &lt; 2) FilterChip(selected = true, onClick = {}, label = { Text(itx) })&#10;                                else AssistChip(onClick = {}, label = { Text(itx) })&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Gallery&#10;                    Spacer(Modifier.height(16.dp))&#10;                    Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()) {&#10;                        Text(&quot;Gallery&quot;, style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.SemiBold, modifier = Modifier.weight(1f))&#10;                        Text(&#10;                            &quot;See all&quot;,&#10;                            color = MaterialTheme.colorScheme.primary,&#10;                            style = MaterialTheme.typography.labelLarge,&#10;                            modifier = Modifier.clickable {&#10;                                if (images.isNotEmpty()) onSeeAll(images)&#10;                            }&#10;                        )&#10;                    }&#10;                    Spacer(Modifier.height(8.dp))&#10;&#10;                    if (images.isNotEmpty()) {&#10;                        val preview = images.take(6)&#10;                        LazyVerticalGrid(&#10;                            columns = GridCells.Fixed(3),&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(((preview.size + 2) / 3 * 110).dp)&#10;                        ) {&#10;                            items(preview) { img -&gt;&#10;                                val idx = images.indexOf(img)&#10;                                AsyncImage(&#10;                                    model = img,&#10;                                    contentDescription = null,&#10;                                    placeholder = painterResource(R.drawable.ic_avatar),&#10;                                    error = painterResource(R.drawable.ic_avatar),&#10;                                    contentScale = ContentScale.Crop,&#10;                                    modifier = Modifier&#10;                                        .aspectRatio(1f)&#10;                                        .clip(RoundedCornerShape(12.dp))&#10;                                        .clickable { onImageClick(idx, images) }&#10;                                )&#10;                            }&#10;                        }&#10;                    } else {&#10;                        // Empty state gallery&#10;                        Surface(&#10;                            tonalElevation = 1.dp,&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(120.dp)&#10;                        ) {&#10;                            Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;                                Text(&quot;No images available&quot;, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        item { Spacer(Modifier.height(28.dp)) }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CircleButton(icon: @Composable () -&gt; Unit, container: Color, content: Color) {&#10;    Surface(&#10;        color = container,&#10;        contentColor = content,&#10;        shape = CircleShape,&#10;        shadowElevation = 8.dp,&#10;        modifier = Modifier.size(56.dp)&#10;    ) { Box(contentAlignment = Alignment.Center) { icon() } }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/ChatViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/ChatViewModel.kt" />
              <option name="originalContent" value="package com.example.dating.viewmodel&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.ChatMessage&#10;import com.example.dating.repository.ChatRepository&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.firestore.Query&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;&#10;@HiltViewModel&#10;class ChatViewModel @Inject constructor(&#10;    private val db: FirebaseFirestore,&#10;    private val auth: FirebaseAuth&#10;) : ViewModel() {&#10;    private val _messages = MutableStateFlow&lt;List&lt;ChatMessage&gt;&gt;(emptyList())&#10;    val messages: StateFlow&lt;List&lt;ChatMessage&gt;&gt; = _messages&#10;&#10;    private val _peerName = MutableStateFlow(&quot;&quot;)&#10;    val peerName: StateFlow&lt;String&gt; = _peerName&#10;&#10;    private val _peerAvatar = MutableStateFlow(&quot;&quot;)&#10;    val peerAvatar: StateFlow&lt;String&gt; = _peerAvatar&#10;&#10;    private val chatRepository = ChatRepository(db, auth)&#10;&#10;    fun loadPeer(conversationId: String) {&#10;        viewModelScope.launch {&#10;            val (name, photoUrl) = chatRepository.getPeerInfo(conversationId)&#10;            _peerName.value = name&#10;            _peerAvatar.value = photoUrl&#10;        }&#10;    }&#10;&#10;    fun loadConversation(conversationId: String) {&#10;        // Load messages&#10;        db.collection(&quot;conversations&quot;)&#10;            .document(conversationId)&#10;            .collection(&quot;messages&quot;)&#10;            .orderBy(&quot;timestamp&quot;, Query.Direction.ASCENDING)&#10;            .addSnapshotListener { snap, _ -&gt;&#10;                val list = snap?.documents?.mapNotNull { d -&gt;&#10;                    d.toObject(ChatMessage::class.java)?.copy(id = d.id)&#10;                }.orEmpty()&#10;                _messages.value = list&#10;            }&#10;    }&#10;&#10;    fun sendMessage(conversationId: String, text: String) {&#10;        val uid = auth.currentUser?.uid ?: return&#10;        val msg = mapOf(&#10;            &quot;fromUid&quot; to uid,&#10;            &quot;text&quot; to text,&#10;            &quot;timestamp&quot; to System.currentTimeMillis()&#10;        )&#10;        db.collection(&quot;conversations&quot;)&#10;            .document(conversationId)&#10;            .collection(&quot;messages&quot;)&#10;            .add(msg)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.dating.viewmodel&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.ChatMessage&#10;import com.example.dating.repository.ChatRepository&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.firestore.Query&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;&#10;@HiltViewModel&#10;class ChatViewModel @Inject constructor(&#10;    private val db: FirebaseFirestore,&#10;    private val auth: FirebaseAuth&#10;) : ViewModel() {&#10;    private val _messages = MutableStateFlow&lt;List&lt;ChatMessage&gt;&gt;(emptyList())&#10;    val messages: StateFlow&lt;List&lt;ChatMessage&gt;&gt; = _messages&#10;&#10;    private val _peerName = MutableStateFlow(&quot;&quot;)&#10;    val peerName: StateFlow&lt;String&gt; = _peerName&#10;&#10;    private val _peerAvatar = MutableStateFlow(&quot;&quot;)&#10;    val peerAvatar: StateFlow&lt;String&gt; = _peerAvatar&#10;&#10;    private val chatRepository = ChatRepository(db, auth)&#10;&#10;    fun loadPeer(conversationId: String) {&#10;        viewModelScope.launch {&#10;            val (name, photoUrl) = chatRepository.getPeerInfo(conversationId)&#10;            _peerName.value = name&#10;            _peerAvatar.value = photoUrl&#10;        }&#10;    }&#10;&#10;    fun loadConversation(conversationId: String) {&#10;        viewModelScope.launch {&#10;            val list = chatRepository.getMessages(conversationId)&#10;            _messages.value = list&#10;        }&#10;    }&#10;&#10;    fun sendMessage(conversationId: String, text: String) {&#10;        viewModelScope.launch {&#10;            chatRepository.sendMessage(conversationId, text)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>