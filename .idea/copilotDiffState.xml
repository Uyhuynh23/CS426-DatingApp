<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/MatchRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/MatchRepository.kt" />
              <option name="updatedContent" value="package com.example.dating.data&#10;&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class MatchRepository {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    suspend fun saveMatch(userId1: String, userId2: String, status: Boolean) {&#10;        // Ensure userId1 &lt; userId2 alphabetically&#10;        val (firstId, secondId) = if (userId1 &lt; userId2) userId1 to userId2 else userId2 to userId1&#10;        val matchData = hashMapOf(&#10;            &quot;userId1&quot; to firstId,&#10;            &quot;userId2&quot; to secondId,&#10;            &quot;timestamp&quot; to Timestamp.now(),&#10;            &quot;status&quot; to status&#10;        )&#10;        // Check for duplicate (userId1/userId2 only)&#10;        val query = db.collection(&quot;match&quot;)&#10;            .whereEqualTo(&quot;userId1&quot;, firstId)&#10;            .whereEqualTo(&quot;userId2&quot;, secondId)&#10;            .get().await()&#10;        android.util.Log.d(&quot;MatchRepository&quot;, &quot;MatchQuery: userId1=$firstId, userId2=$secondId, resultCount=${query.size()}&quot;)&#10;        if (query.isEmpty) {&#10;            db.collection(&quot;match&quot;).add(matchData)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/User.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/User.kt" />
              <option name="originalContent" value="package com.example.dating.data.model&#10;&#10;data class User(&#10;    val uid: String = &quot;&quot;,&#10;    val firstName: String = &quot;&quot;,&#10;    val lastName: String = &quot;&quot;,&#10;    val birthday: String? = null,&#10;    val imageUrl: List&lt;String&gt; = emptyList(),&#10;    val avatarUrl: String? = null,&#10;    val gender: String? = null,&#10;    val job: String? = null,&#10;    val location: String? = null,&#10;    val description: String? = null,&#10;    val interests: List&lt;String&gt; = emptyList(),&#10;    val distance: Int? = null,&#10;    val isOnline: Boolean = false&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model&#10;&#10;data class User(&#10;    val uid: String = &quot;&quot;,&#10;    val firstName: String = &quot;&quot;,&#10;    val lastName: String = &quot;&quot;,&#10;    val birthday: String? = null,&#10;    val imageUrl: List&lt;String&gt; = emptyList(),&#10;    val avatarUrl: String? = null,&#10;    val gender: String? = null,&#10;    val job: String? = null,&#10;    val location: String? = null,&#10;    val description: String? = null,&#10;    val interests: List&lt;String&gt; = emptyList(),&#10;    val distance: Int? = null,&#10;    val isOnline: Boolean = false,&#10;    val filterPreferences: UserFilterPreferences? = null&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/UserFilterPreferences.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/UserFilterPreferences.kt" />
              <option name="updatedContent" value="package com.example.dating.data.model&#10;&#10;// Represents a user's filter preferences for recommendations&#10;data class UserFilterPreferences(&#10;    val preferredGender: String? = null,&#10;    val minAge: Int? = null,&#10;    val maxAge: Int? = null,&#10;    val maxDistance: Int? = null&#10;)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepository.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;import com.example.dating.data.model.UserFilterPreferences&#10;&#10;&#10;class UserRepository @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;)  {&#10;&#10;    fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        android.util.Log.d(&quot;UserRepository&quot;, &quot;getUser: docRef=$docRef &quot; +&#10;                &quot;for uid=$uid&quot;)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            val user = snapshot?.toObject(User::class.java)&#10;            // Ensure uid and imageUrl are set from document id and default if missing&#10;            val userWithUid = user?.copy(&#10;                uid = snapshot.id,&#10;                imageUrl = user.imageUrl ?: emptyList()&#10;            )&#10;            android.util.Log.d(&quot;UserRepository&quot;, &quot;getUser: uid=$uid, user=$userWithUid&quot;)&#10;            trySend(userWithUid)&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    suspend fun updateUser(user: User): Resource&lt;Unit&gt; {&#10;        return try {&#10;            android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;updateProfile called with: $user&quot;)&#10;            firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateGender(uid: String, gender: String): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&quot;gender&quot;, gender).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateInterests(uid: String, interests: List&lt;String&gt;): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&quot;interests&quot;, interests).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateJobLocationDescription(uid: String, job: String?, location: String?, description: String?): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&#10;                mapOf(&#10;                    &quot;job&quot; to job,&#10;                    &quot;location&quot; to location,&#10;                    &quot;description&quot; to description&#10;                )&#10;            ).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun uploadAvatar(uid: String, uri: android.net.Uri): String {&#10;        // TODO: Implement Firebase Storage upload and return the URL&#10;        return &quot;&quot;&#10;    }&#10;&#10;    suspend fun createUser(user: User): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateAvatarUrl(uid: String, avatarUrl: String) {&#10;        firestore.collection(&quot;users&quot;).document(uid)&#10;            .update(&quot;avatarUrl&quot;, avatarUrl)&#10;            .await()&#10;    }&#10;&#10;    suspend fun updateFilterPreferences(uid: String, prefs: UserFilterPreferences): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&quot;filterPreferences&quot;, prefs).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;import com.example.dating.data.model.UserFilterPreferences&#10;&#10;&#10;class UserRepository @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;)  {&#10;&#10;    fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        android.util.Log.d(&quot;UserRepository&quot;, &quot;getUser: docRef=$docRef &quot; +&#10;                &quot;for uid=$uid&quot;)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            val user = snapshot?.toObject(User::class.java)&#10;            // Ensure uid and imageUrl are set from document id and default if missing&#10;            val userWithUid = user?.copy(&#10;                uid = snapshot.id,&#10;                imageUrl = user.imageUrl ?: emptyList()&#10;            )&#10;            android.util.Log.d(&quot;UserRepository&quot;, &quot;getUser: uid=$uid, user=$userWithUid&quot;)&#10;            trySend(userWithUid)&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    suspend fun updateUser(user: User): Resource&lt;Unit&gt; {&#10;        return try {&#10;            android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;updateProfile called with: $user&quot;)&#10;            firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateGender(uid: String, gender: String): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&quot;gender&quot;, gender).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateInterests(uid: String, interests: List&lt;String&gt;): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&quot;interests&quot;, interests).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateJobLocationDescription(uid: String, job: String?, location: String?, description: String?): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&#10;                mapOf(&#10;                    &quot;job&quot; to job,&#10;                    &quot;location&quot; to location,&#10;                    &quot;description&quot; to description&#10;                )&#10;            ).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun uploadAvatar(uid: String, uri: android.net.Uri): String {&#10;        // TODO: Implement Firebase Storage upload and return the URL&#10;        return &quot;&quot;&#10;    }&#10;&#10;    suspend fun createUser(user: User): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateAvatarUrl(uid: String, avatarUrl: String) {&#10;        firestore.collection(&quot;users&quot;).document(uid)&#10;            .update(&quot;avatarUrl&quot;, avatarUrl)&#10;            .await()&#10;    }&#10;&#10;    suspend fun updateFilterPreferences(uid: String, prefs: UserFilterPreferences): Resource&lt;Unit&gt; {&#10;        return try {&#10;            android.util.Log.d(&quot;UserRepository&quot;, &quot;updateFilterPreferences: uid=$uid, prefs=$prefs&quot;)&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&quot;filterPreferences&quot;, prefs).await()&#10;            android.util.Log.d(&quot;UserRepository&quot;, &quot;updateFilterPreferences: success for uid=$uid&quot;)&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            android.util.Log.e(&quot;UserRepository&quot;, &quot;updateFilterPreferences: failure for uid=$uid&quot;, e)&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepositoryImpl.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;) : UserRepository {&#10;&#10;    fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            offer(snapshot?.toObject(User::class.java))&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    override suspend fun updateUser(user: User) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun saveProfile(&#10;        userId: String,&#10;        firstName: String,&#10;        lastName: String,&#10;        birthday: String?,&#10;        imageUrl: String?&#10;    ): Resource&lt;Unit&gt; {&#10;        return try {&#10;            val userMap = hashMapOf(&#10;                &quot;firstName&quot; to firstName,&#10;                &quot;lastName&quot; to lastName,&#10;                &quot;birthday&quot; to birthday,&#10;                &quot;imageUrl&quot; to imageUrl&#10;            )&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .set(userMap)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateGender(userId: String, gender: String): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;gender&quot;, gender)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateInterests(userId: String, interests: List&lt;String&gt;): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;interests&quot;, interests)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateJobLocationDescription(&#10;        userId: String,&#10;        job: String?,&#10;        location: String?,&#10;        description: String?&#10;    ): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(mapOf(&#10;                    &quot;job&quot; to job,&#10;                    &quot;location&quot; to location,&#10;                    &quot;description&quot; to description&#10;                ))&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;) : UserRepository {&#10;&#10;    override fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            trySend(snapshot?.toObject(User::class.java))&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    override suspend fun updateUser(user: User) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun saveProfile(&#10;        user: User&#10;    ) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun updateGender(uid: String, gender: String) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&quot;gender&quot;, gender).await()&#10;    }&#10;&#10;    override suspend fun updateInterests(uid: String, interests: List&lt;String&gt;) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&quot;interests&quot;, interests).await()&#10;    }&#10;&#10;    override suspend fun updateJobLocationDescription(uid: String, job: String?, location: String?, description: String?) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&#10;            mapOf(&#10;                &quot;job&quot; to job,&#10;                &quot;location&quot; to location,&#10;                &quot;description&quot; to description&#10;            )&#10;        ).await()&#10;    }&#10;&#10;    override suspend fun uploadAvatar(uid: String, uri: android.net.Uri): String {&#10;        // TODO: Implement Firebase Storage upload and return the URL&#10;        return &quot;&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/FilterDialog.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/FilterDialog.kt" />
              <option name="originalContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.dating.ui.theme.AppColors&#10;import com.example.dating.viewmodel.UserViewModel&#10;import com.example.dating.data.model.UserFilterPreferences&#10;&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FilterDialog(&#10;    show: Boolean,&#10;    onDismiss: () -&gt; Unit,&#10;    userViewModel: UserViewModel,&#10;    currentUid: String,&#10;    onApply: (selectedInterest: String, location: String, distance: Float, ageRange: ClosedFloatingPointRange&lt;Float&gt;) -&gt; Unit&#10;) {&#10;    if (!show) return&#10;    val filterPrefs = userViewModel.user.value?.filterPreferences&#10;    var selectedInterest by remember { mutableStateOf(filterPrefs?.preferredGender ?: &quot;Girls&quot;) }&#10;    var location by remember { mutableStateOf(userViewModel.user.value?.location ?: &quot;Chicago, USA&quot;) }&#10;    var distance by remember { mutableStateOf(filterPrefs?.maxDistance?.toFloat() ?: 40f) }&#10;    var ageRange by remember { mutableStateOf((filterPrefs?.minAge?.toFloat() ?: 20f)..(filterPrefs?.maxAge?.toFloat() ?: 28f)) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    val prefs = UserFilterPreferences(&#10;                        preferredGender = selectedInterest,&#10;                        minAge = ageRange.start.toInt(),&#10;                        maxAge = ageRange.endInclusive.toInt(),&#10;                        maxDistance = distance.toInt()&#10;                    )&#10;                    userViewModel.updateFilterPreferences(currentUid, prefs) { /* handle result if needed */ }&#10;                    onApply(selectedInterest, location, distance, ageRange)&#10;                    onDismiss()&#10;                },&#10;                modifier = Modifier.fillMaxWidth().height(48.dp),&#10;                colors = ButtonDefaults.buttonColors(containerColor = AppColors.Main_Secondary1),&#10;                shape = RoundedCornerShape(24.dp)&#10;            ) {&#10;                Text(&quot;Continue&quot;, color = AppColors.Main_Primary, fontSize = 16.sp, fontWeight = FontWeight.Bold)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;, color = Color.Gray)&#10;            }&#10;        },&#10;        title = {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&quot;Filters&quot;, fontSize = 20.sp, fontWeight = FontWeight.Bold, color = Color.Black)&#10;                TextButton(onClick = {&#10;                    selectedInterest = &quot;Female&quot;&#10;                    location = &quot;Chicago, USA&quot;&#10;                    distance = 40f&#10;                    ageRange = 20f..28f&#10;                }) {&#10;                    Text(&quot;Clear&quot;, color = Color(0xFFFF69B4), fontSize = 16.sp)&#10;                }&#10;            }&#10;        },&#10;        text = {&#10;            Column(modifier = Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {&#10;                // Interested in&#10;                Text(&quot;Interested in&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Row(modifier = Modifier.fillMaxWidth()) {&#10;                    FilterSegmentButton(&quot;Female&quot;, selectedInterest == &quot;Female&quot;, onClick = { selectedInterest = &quot;Female&quot; }, modifier = Modifier.weight(1f).padding(horizontal = 2.dp))&#10;                    FilterSegmentButton(&quot;Male&quot;, selectedInterest == &quot;Male&quot;, onClick = { selectedInterest = &quot;Male&quot; }, modifier = Modifier.weight(1f).padding(horizontal = 2.dp))&#10;                    FilterSegmentButton(&quot;Both&quot;, selectedInterest == &quot;Both&quot;, onClick = { selectedInterest = &quot;Both&quot; }, modifier = Modifier.weight(1f).padding(horizontal = 2.dp))&#10;                }&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Location&#10;                Text(&quot;Location&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                OutlinedTextField(&#10;                    value = location,&#10;                    onValueChange = { location = it },&#10;                    readOnly = false,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    trailingIcon = {&#10;                        Icon(imageVector = Icons.Default.ArrowForward, contentDescription = &quot;Select location&quot;, tint = AppColors.Text_Pink)&#10;                    },&#10;                    singleLine = true&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Distance&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Distance&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${distance.toInt()}km&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                Slider(&#10;                    value = distance,&#10;                    onValueChange = { distance = it },&#10;                    valueRange = 0f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = AppColors.Text_Pink,&#10;                        activeTrackColor = AppColors.Text_Pink,&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Age&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Age&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${ageRange.start.toInt()}-${ageRange.endInclusive.toInt()}&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                RangeSlider(&#10;                    value = ageRange,&#10;                    onValueChange = { ageRange = it },&#10;                    valueRange = 18f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = AppColors.Text_Pink,&#10;                        activeTrackColor = AppColors.Text_Pink,&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;            }&#10;        },&#10;        shape = RoundedCornerShape(24.dp),&#10;        containerColor = Color.White&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun FilterSegmentButton(text: String, selected: Boolean, onClick: () -&gt; Unit, modifier: Modifier = Modifier) {&#10;    Button(&#10;        onClick = onClick,&#10;        colors = ButtonDefaults.buttonColors(&#10;            containerColor = if (selected) AppColors.Main_Secondary1 else Color.LightGray,&#10;            contentColor = if (selected) AppColors.Main_Primary else Color.Black&#10;        ),&#10;        modifier = modifier.height(36.dp),&#10;        shape = RoundedCornerShape(8.dp)&#10;    ) {&#10;        Text(text, maxLines = 1)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.dating.ui.theme.AppColors&#10;import com.example.dating.viewmodel.UserViewModel&#10;import com.example.dating.data.model.UserFilterPreferences&#10;&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FilterDialog(&#10;    show: Boolean,&#10;    onDismiss: () -&gt; Unit,&#10;    userViewModel: UserViewModel,&#10;    currentUid: String,&#10;    onApply: (selectedInterest: String, location: String, distance: Float, ageRange: ClosedFloatingPointRange&lt;Float&gt;) -&gt; Unit&#10;) {&#10;    if (!show) return&#10;    val userState by userViewModel.user.collectAsState()&#10;    val filterPrefs = userState?.filterPreferences&#10;    var selectedInterest by remember { mutableStateOf(filterPrefs?.preferredGender ?: &quot;Girls&quot;) }&#10;    var location by remember { mutableStateOf(userState?.location ?: &quot;Chicago, USA&quot;) }&#10;    var distance by remember { mutableStateOf(filterPrefs?.maxDistance?.toFloat() ?: 40f) }&#10;    var ageRange by remember { mutableStateOf((filterPrefs?.minAge?.toFloat() ?: 20f)..(filterPrefs?.maxAge?.toFloat() ?: 28f)) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    val prefs = UserFilterPreferences(&#10;                        preferredGender = selectedInterest,&#10;                        minAge = ageRange.start.toInt(),&#10;                        maxAge = ageRange.endInclusive.toInt(),&#10;                        maxDistance = distance.toInt()&#10;                    )&#10;                    userViewModel.updateFilterPreferences(currentUid, prefs) { /* handle result if needed */ }&#10;                    onApply(selectedInterest, location, distance, ageRange)&#10;                    onDismiss()&#10;                },&#10;                modifier = Modifier.fillMaxWidth().height(48.dp),&#10;                colors = ButtonDefaults.buttonColors(containerColor = AppColors.Main_Secondary1),&#10;                shape = RoundedCornerShape(24.dp)&#10;            ) {&#10;                Text(&quot;Continue&quot;, color = AppColors.Main_Primary, fontSize = 16.sp, fontWeight = FontWeight.Bold)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;, color = Color.Gray)&#10;            }&#10;        },&#10;        title = {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&quot;Filters&quot;, fontSize = 20.sp, fontWeight = FontWeight.Bold, color = Color.Black)&#10;                TextButton(onClick = {&#10;                    selectedInterest = &quot;Female&quot;&#10;                    location = &quot;Chicago, USA&quot;&#10;                    distance = 40f&#10;                    ageRange = 20f..28f&#10;                }) {&#10;                    Text(&quot;Clear&quot;, color = Color(0xFFFF69B4), fontSize = 16.sp)&#10;                }&#10;            }&#10;        },&#10;        text = {&#10;            Column(modifier = Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {&#10;                // Interested in&#10;                Text(&quot;Interested in&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Row(modifier = Modifier.fillMaxWidth()) {&#10;                    FilterSegmentButton(&quot;Female&quot;, selectedInterest == &quot;Female&quot;, onClick = { selectedInterest = &quot;Female&quot; }, modifier = Modifier.weight(1f).padding(horizontal = 2.dp))&#10;                    FilterSegmentButton(&quot;Male&quot;, selectedInterest == &quot;Male&quot;, onClick = { selectedInterest = &quot;Male&quot; }, modifier = Modifier.weight(1f).padding(horizontal = 2.dp))&#10;                    FilterSegmentButton(&quot;Both&quot;, selectedInterest == &quot;Both&quot;, onClick = { selectedInterest = &quot;Both&quot; }, modifier = Modifier.weight(1f).padding(horizontal = 2.dp))&#10;                }&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Location&#10;                Text(&quot;Location&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                OutlinedTextField(&#10;                    value = location,&#10;                    onValueChange = { location = it },&#10;                    readOnly = false,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    trailingIcon = {&#10;                        Icon(imageVector = Icons.Default.ArrowForward, contentDescription = &quot;Select location&quot;, tint = AppColors.Text_Pink)&#10;                    },&#10;                    singleLine = true&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Distance&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Distance&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${distance.toInt()}km&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                Slider(&#10;                    value = distance,&#10;                    onValueChange = { distance = it },&#10;                    valueRange = 0f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = AppColors.Text_Pink,&#10;                        activeTrackColor = AppColors.Text_Pink,&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Age&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Age&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${ageRange.start.toInt()}-${ageRange.endInclusive.toInt()}&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                RangeSlider(&#10;                    value = ageRange,&#10;                    onValueChange = { ageRange = it },&#10;                    valueRange = 18f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = AppColors.Text_Pink,&#10;                        activeTrackColor = AppColors.Text_Pink,&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;            }&#10;        },&#10;        shape = RoundedCornerShape(24.dp),&#10;        containerColor = Color.White&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun FilterSegmentButton(text: String, selected: Boolean, onClick: () -&gt; Unit, modifier: Modifier = Modifier) {&#10;    Button(&#10;        onClick = onClick,&#10;        colors = ButtonDefaults.buttonColors(&#10;            containerColor = if (selected) AppColors.Main_Secondary1 else Color.LightGray,&#10;            contentColor = if (selected) AppColors.Main_Primary else Color.Black&#10;        ),&#10;        modifier = modifier.height(36.dp),&#10;        shape = RoundedCornerShape(8.dp)&#10;    ) {&#10;        Text(text, maxLines = 1)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/FilterDialog.kt.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/FilterDialog.kt.kt" />
              <option name="originalContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FilterScreen(navController: NavController) {&#10;    // State variables&#10;    var selectedInterest by remember { mutableStateOf(&quot;Girls&quot;) }&#10;    var location by remember { mutableStateOf(&quot;Chicago, USA&quot;) }&#10;    var distance by remember { mutableFloatStateOf(40f) }&#10;    var ageRange by remember { mutableStateOf(20f..28f) }&#10;&#10;    // Bottom sheet or dialog content&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .wrapContentHeight()&#10;            .clip(RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp))&#10;            .background(Color.White)&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        // Notch&#10;        Box(&#10;            modifier = Modifier&#10;                .width(40.dp)&#10;                .height(4.dp)&#10;                .background(Color.Gray.copy(alpha = 0.5f), CircleShape)&#10;                .align(Alignment.CenterHorizontally)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Title and Clear&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Filters&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.Black&#10;            )&#10;            TextButton(onClick = { /* TODO: Clear filters */ }) {&#10;                Text(&#10;                    text = &quot;Clear&quot;,&#10;                    color = Color(0xFFFF69B4), // Pink&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Interested in&#10;        Text(&#10;            text = &quot;Interested in&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        SegmentedButtonRow(modifier = Modifier.fillMaxWidth()) {&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Girls&quot;,&#10;                onClick = { selectedInterest = &quot;Girls&quot; },&#10;                shape = RoundedCornerShape(topStart = 8.dp, bottomStart = 8.dp)&#10;            ) {&#10;                Text(&quot;Girls&quot;)&#10;            }&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Boys&quot;,&#10;                onClick = { selectedInterest = &quot;Boys&quot; },&#10;                shape = RoundedCornerShape(0.dp)&#10;            ) {&#10;                Text(&quot;Boys&quot;)&#10;            }&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Both&quot;,&#10;                onClick = { selectedInterest = &quot;Both&quot; },&#10;                shape = RoundedCornerShape(topEnd = 8.dp, bottomEnd = 8.dp)&#10;            ) {&#10;                Text(&quot;Both&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Location&#10;        Text(&#10;            text = &quot;Location&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        OutlinedTextField(&#10;            value = location,&#10;            onValueChange = { /* Read-only, tap to select */ },&#10;            readOnly = true,&#10;            modifier = Modifier.fillMaxWidth(),&#10;            trailingIcon = {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowForward,&#10;                    contentDescription = &quot;Select location&quot;,&#10;                    tint = Color(0xFFFF0000) // Red&#10;                )&#10;            },&#10;            singleLine = true,&#10;            interactionSource = remember { MutableInteractionSource() }.also { interactionSource -&gt;&#10;                // TODO: Handle click to open location selector&#10;            }&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Distance&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;Distance&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;            Text(&#10;                text = &quot;${distance.toInt()}km&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;        Slider(&#10;            value = distance,&#10;            onValueChange = { distance = it },&#10;            valueRange = 0f..100f, // Assuming max 100km&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = SliderDefaults.colors(&#10;                thumbColor = Color(0xFFBB86FC), // Purple&#10;                activeTrackColor = Color(0xFFBB86FC),&#10;                inactiveTrackColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Age&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;Age&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;            Text(&#10;                text = &quot;${ageRange.start.toInt()}-${ageRange.endInclusive.toInt()}&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;        RangeSlider(&#10;            value = ageRange,&#10;            onValueChange = { ageRange = it },&#10;            valueRange = 18f..100f, // Assuming age range&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = SliderDefaults.colors(&#10;                thumbColor = Color(0xFFBB86FC), // Purple&#10;                activeTrackColor = Color(0xFFBB86FC),&#10;                inactiveTrackColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // Continue button&#10;        Button(&#10;            onClick = { /* TODO: Apply filters and navigate */ },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(48.dp),&#10;            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFBB86FC).copy(alpha = 0.2f)), // Light purple&#10;            shape = RoundedCornerShape(24.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Continue&quot;,&#10;                color = Color.Black,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FilterDialog(&#10;    show: Boolean,&#10;    onDismiss: () -&gt; Unit,&#10;    onApply: (selectedInterest: String, location: String, distance: Float, ageRange: ClosedFloatingPointRange&lt;Float&gt;) -&gt; Unit&#10;) {&#10;    if (!show) return&#10;    var selectedInterest by remember { mutableStateOf(&quot;Girls&quot;) }&#10;    var location by remember { mutableStateOf(&quot;Chicago, USA&quot;) }&#10;    var distance by remember { mutableStateOf(40f) }&#10;    var ageRange by remember { mutableStateOf(20f..28f) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    onApply(selectedInterest, location, distance, ageRange)&#10;                    onDismiss()&#10;                },&#10;                modifier = Modifier.fillMaxWidth().height(48.dp),&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFBB86FC).copy(alpha = 0.2f)),&#10;                shape = RoundedCornerShape(24.dp)&#10;            ) {&#10;                Text(&quot;Continue&quot;, color = Color.Black, fontSize = 16.sp, fontWeight = FontWeight.Bold)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;, color = Color.Gray)&#10;            }&#10;        },&#10;        title = {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&quot;Filters&quot;, fontSize = 20.sp, fontWeight = FontWeight.Bold, color = Color.Black)&#10;                TextButton(onClick = {&#10;                    selectedInterest = &quot;Girls&quot;&#10;                    location = &quot;Chicago, USA&quot;&#10;                    distance = 40f&#10;                    ageRange = 20f..28f&#10;                }) {&#10;                    Text(&quot;Clear&quot;, color = Color(0xFFFF69B4), fontSize = 16.sp)&#10;                }&#10;            }&#10;        },&#10;        text = {&#10;            Column(modifier = Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {&#10;                // Interested in&#10;                Text(&quot;Interested in&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.Center) {&#10;                    FilterSegmentButton(&quot;Girls&quot;, selectedInterest == &quot;Girls&quot;) { selectedInterest = &quot;Girls&quot; }&#10;                    FilterSegmentButton(&quot;Boys&quot;, selectedInterest == &quot;Boys&quot;) { selectedInterest = &quot;Boys&quot; }&#10;                    FilterSegmentButton(&quot;Both&quot;, selectedInterest == &quot;Both&quot;) { selectedInterest = &quot;Both&quot; }&#10;                }&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Location&#10;                Text(&quot;Location&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                OutlinedTextField(&#10;                    value = location,&#10;                    onValueChange = { location = it },&#10;                    readOnly = false,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    trailingIcon = {&#10;                        Icon(imageVector = Icons.Default.ArrowForward, contentDescription = &quot;Select location&quot;, tint = Color(0xFFFF0000))&#10;                    },&#10;                    singleLine = true&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Distance&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Distance&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${distance.toInt()}km&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                Slider(&#10;                    value = distance,&#10;                    onValueChange = { distance = it },&#10;                    valueRange = 0f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = Color(0xFFBB86FC),&#10;                        activeTrackColor = Color(0xFFBB86FC),&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Age&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Age&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${ageRange.start.toInt()}-${ageRange.endInclusive.toInt()}&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                RangeSlider(&#10;                    value = ageRange,&#10;                    onValueChange = { ageRange = it },&#10;                    valueRange = 18f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = Color(0xFFBB86FC),&#10;                        activeTrackColor = Color(0xFFBB86FC),&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;            }&#10;        },&#10;        shape = RoundedCornerShape(24.dp),&#10;        containerColor = Color.White&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun FilterSegmentButton(text: String, selected: Boolean, onClick: () -&gt; Unit) {&#10;    Button(&#10;        onClick = onClick,&#10;        colors = ButtonDefaults.buttonColors(&#10;            containerColor = if (selected) Color(0xFFBB86FC) else Color.LightGray,&#10;            contentColor = if (selected) Color.White else Color.Black&#10;        ),&#10;        modifier = Modifier&#10;            .weight(1f)&#10;            .height(36.dp)&#10;            .padding(horizontal = 2.dp),&#10;        shape = RoundedCornerShape(8.dp)&#10;    ) {&#10;        Text(text)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/ProfileCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/ProfileCard.kt" />
              <option name="originalContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.snapshots.SnapshotStateList&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.example.dating.data.model.Interest&#10;import com.example.dating.ui.theme.AppColors&#10;&#10;@Composable&#10;fun ProfileCard(&#10;    isEditMode: Boolean,&#10;    onEditToggle: () -&gt; Unit,&#10;    isSaving: Boolean,&#10;    saveError: String?,&#10;    editableFirstName: String,&#10;    editableLastName: String,&#10;    editableBirthday: String,&#10;    editableGender: String,&#10;    editableJob: String,&#10;    editableLocation: String,&#10;    editableDescription: String,&#10;    selectedInterests: SnapshotStateList&lt;String&gt;,&#10;    allInterests: List&lt;Interest&gt;,&#10;    onFirstNameChange: (String) -&gt; Unit,&#10;    onLastNameChange: (String) -&gt; Unit,&#10;    onBirthdayClick: () -&gt; Unit,&#10;    onGenderChange: (String) -&gt; Unit,&#10;    onJobChange: (String) -&gt; Unit,&#10;    onLocationChange: (String) -&gt; Unit,&#10;    onDescriptionChange: (String) -&gt; Unit,&#10;    isEditModeChange: (Boolean) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp, vertical = 16.dp),&#10;        shape = MaterialTheme.shapes.large,&#10;        elevation = CardDefaults.cardElevation(8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                TextButton(onClick = onEditToggle) {&#10;                    Text(&#10;                        text = if (isEditMode) &quot;Done&quot; else &quot;Edit&quot;,&#10;                        color = AppColors.Text_Pink,&#10;                        fontWeight = androidx.compose.ui.text.font.FontWeight.Bold&#10;                    )&#10;                }&#10;            }&#10;            if (isSaving) {&#10;                CircularProgressIndicator(modifier = Modifier.padding(vertical = 8.dp))&#10;            }&#10;            if (saveError != null) {&#10;                Text(&#10;                    text = saveError,&#10;                    color = androidx.compose.ui.graphics.Color.Red,&#10;                    modifier = Modifier.padding(vertical = 8.dp)&#10;                )&#10;            }&#10;            NameFields(&#10;                firstName = editableFirstName,&#10;                lastName = editableLastName,&#10;                isEditMode = isEditMode,&#10;                onFirstNameChange = onFirstNameChange,&#10;                onLastNameChange = onLastNameChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            BirthdayGenderFields(&#10;                birthday = editableBirthday,&#10;                gender = editableGender,&#10;                isEditMode = isEditMode,&#10;                showCalendar = false,&#10;                onShowCalendar = onBirthdayClick,&#10;                onGenderChange = onGenderChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            JobDropdown(&#10;                job = editableJob,&#10;                isEditMode = isEditMode,&#10;                onJobChange = onJobChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            LocationField(&#10;                location = editableLocation,&#10;                isEditMode = isEditMode,&#10;                onLocationChange = onLocationChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            DescriptionField(&#10;                description = editableDescription,&#10;                isEditMode = isEditMode,&#10;                onDescriptionChange = onDescriptionChange&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Interests&quot;,&#10;                fontSize = androidx.compose.ui.unit.sp(20),&#10;                color = AppColors.Text_Pink,&#10;                fontWeight = androidx.compose.ui.text.font.FontWeight.Bold,&#10;                modifier = Modifier&#10;                    .padding(bottom = 8.dp)&#10;                    .fillMaxWidth(),&#10;                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;            )&#10;            InterestsSection(&#10;                allInterests = allInterests,&#10;                selectedInterests = selectedInterests,&#10;                isEditMode = isEditMode&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.snapshots.SnapshotStateList&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.example.dating.data.model.Interest&#10;import com.example.dating.ui.theme.AppColors&#10;&#10;// Add missing imports for field components&#10;import com.example.dating.ui.components.NameFields&#10;import com.example.dating.ui.components.BirthdayGenderFields&#10;import com.example.dating.ui.components.JobDropdown&#10;import com.example.dating.ui.components.LocationField&#10;import com.example.dating.ui.components.DescriptionField&#10;import com.example.dating.ui.components.InterestsSection&#10;&#10;@Composable&#10;fun ProfileCard(&#10;    isEditMode: Boolean,&#10;    onEditToggle: () -&gt; Unit,&#10;    isSaving: Boolean,&#10;    saveError: String?,&#10;    editableFirstName: String,&#10;    editableLastName: String,&#10;    editableBirthday: String,&#10;    editableGender: String,&#10;    editableJob: String,&#10;    editableLocation: String,&#10;    editableDescription: String,&#10;    selectedInterests: SnapshotStateList&lt;String&gt;,&#10;    allInterests: List&lt;Interest&gt;,&#10;    onFirstNameChange: (String) -&gt; Unit,&#10;    onLastNameChange: (String) -&gt; Unit,&#10;    onBirthdayClick: () -&gt; Unit,&#10;    onGenderChange: (String) -&gt; Unit,&#10;    onJobChange: (String) -&gt; Unit,&#10;    onLocationChange: (String) -&gt; Unit,&#10;    onDescriptionChange: (String) -&gt; Unit,&#10;    isEditModeChange: (Boolean) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp, vertical = 16.dp),&#10;        shape = MaterialTheme.shapes.large,&#10;        elevation = CardDefaults.cardElevation(8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                TextButton(onClick = onEditToggle) {&#10;                    Text(&#10;                        text = if (isEditMode) &quot;Done&quot; else &quot;Edit&quot;,&#10;                        color = AppColors.Text_Pink,&#10;                        fontWeight = androidx.compose.ui.text.font.FontWeight.Bold&#10;                    )&#10;                }&#10;            }&#10;            if (isSaving) {&#10;                CircularProgressIndicator(modifier = Modifier.padding(vertical = 8.dp))&#10;            }&#10;            if (saveError != null) {&#10;                Text(&#10;                    text = saveError,&#10;                    color = androidx.compose.ui.graphics.Color.Red,&#10;                    modifier = Modifier.padding(vertical = 8.dp)&#10;                )&#10;            }&#10;            NameFields(&#10;                firstName = editableFirstName,&#10;                lastName = editableLastName,&#10;                isEditMode = isEditMode,&#10;                onFirstNameChange = onFirstNameChange,&#10;                onLastNameChange = onLastNameChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            BirthdayGenderFields(&#10;                birthday = editableBirthday,&#10;                gender = editableGender,&#10;                isEditMode = isEditMode,&#10;                showCalendar = false,&#10;                onShowCalendar = onBirthdayClick,&#10;                onGenderChange = onGenderChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            JobDropdown(&#10;                job = editableJob,&#10;                isEditMode = isEditMode,&#10;                onJobChange = onJobChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            LocationField(&#10;                location = editableLocation,&#10;                isEditMode = isEditMode,&#10;                onLocationChange = onLocationChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            DescriptionField(&#10;                description = editableDescription,&#10;                isEditMode = isEditMode,&#10;                onDescriptionChange = onDescriptionChange&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Interests&quot;,&#10;                fontSize = androidx.compose.ui.unit.sp(20),&#10;                color = AppColors.Text_Pink,&#10;                fontWeight = androidx.compose.ui.text.font.FontWeight.Bold,&#10;                modifier = Modifier&#10;                    .padding(bottom = 8.dp)&#10;                    .fillMaxWidth(),&#10;                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;            )&#10;            InterestsSection(&#10;                allInterests = allInterests,&#10;                selectedInterests = selectedInterests,&#10;                isEditMode = isEditMode&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.gestures.detectDragGestures&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.IntOffset&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.animation.core.Animatable&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import java.util.Calendar&#10;import androidx.compose.runtime.MutableState&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.util.lerp&#10;import androidx.compose.animation.core.Spring&#10;import androidx.compose.animation.core.spring&#10;import androidx.compose.material3.Scaffold&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.viewmodel.HomeViewModel&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.data.model.Resource&#10;import com.example.dating.data.model.User&#10;import com.example.dating.ui.components.BottomNavigationBar&#10;import androidx.compose.foundation.gestures.detectTapGestures&#10;import com.example.dating.navigation.Screen&#10;import coil.compose.rememberAsyncImagePainter&#10;import com.example.dating.viewmodel.UserViewModel&#10;&#10;@Composable&#10;fun HomeScreen(navController: NavController, homeViewModel: HomeViewModel = hiltViewModel()) {&#10;    val usersResource by homeViewModel.usersState.collectAsState()&#10;    val profileIndex = rememberSaveable { mutableStateOf(0) }&#10;&#10;    // Helper functions&#10;    fun handleProfileAction(isLike: Boolean, profileIndex: MutableState&lt;Int&gt;, profiles: List&lt;User&gt;, homeViewModel: HomeViewModel, navController: NavController) {&#10;        val currentProfile = profiles.getOrNull(profileIndex.value)&#10;        if (currentProfile != null) {&#10;            if (isLike) {&#10;                val likedUserId = currentProfile.uid&#10;                if (likedUserId != null) {&#10;                    homeViewModel.likeProfile(likedUserId)&#10;                    // Check for match and navigate if found&#10;                    val matchId = homeViewModel.matchFoundUserId.value&#10;                    if (matchId != null) {&#10;                        navController.navigate(&quot;match&quot;)&#10;                    }&#10;                }&#10;            }&#10;            profileIndex.value++&#10;        }&#10;    }&#10;    suspend fun animateSwipe(offsetX: Animatable&lt;Float, *&gt;, direction: Float) {&#10;        offsetX.animateTo(direction * 400f, tween(300))&#10;        offsetX.snapTo(0f)&#10;    }&#10;&#10;    // Observe matchFoundUserId and navigate if a match is found&#10;    val matchFoundUserId by homeViewModel.matchFoundUserId.collectAsState()&#10;    LaunchedEffect(matchFoundUserId) {&#10;        if (matchFoundUserId != null) {&#10;            navController.navigate(&quot;match/${matchFoundUserId}&quot;)&#10;            homeViewModel.resetMatchFoundUserId()&#10;        }&#10;    }&#10;&#10;&#10;    // Use Box to overlay BottomNavigationBar and keep it fixed at the bottom&#10;    Scaffold(&#10;        bottomBar = {&#10;            BottomNavigationBar(navController, 0)&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .background(AppColors.MainBackground)&#10;        ) {&#10;            HomeHeader(navController)&#10;            when (usersResource) {&#10;                is Resource.Loading -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxWidth().height(200.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        CircularProgressIndicator()&#10;                    }&#10;                }&#10;&#10;                is Resource.Failure -&gt; {&#10;                    val error =&#10;                        (usersResource as Resource.Failure).exception?.message ?: &quot;Unknown error&quot;&#10;                    Box(&#10;                        modifier = Modifier.fillMaxWidth().height(200.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Text(&quot;Error: $error&quot;, color = Color.Red)&#10;                    }&#10;                }&#10;&#10;                is Resource.Success -&gt; {&#10;                    val users = (usersResource as Resource.Success&lt;List&lt;User&gt;&gt;).result&#10;                    // You can use your ProfileCard and ActionButtons here, or a grid like FavoriteScreen&#10;                    Box(modifier = Modifier.weight(1f)) {&#10;                        ProfileCard(&#10;                            profiles = users,&#10;                            profileIndex = profileIndex,&#10;                            handleProfileAction = { isLike, profileIndex, profiles, homeViewModel -&gt;&#10;                                handleProfileAction(&#10;                                    isLike,&#10;                                    profileIndex,&#10;                                    profiles,&#10;                                    homeViewModel,&#10;                                    navController&#10;                                )&#10;                            },&#10;                            animateSwipe = ::animateSwipe,&#10;                            navController = navController // Pass navController here&#10;                        )&#10;                    }&#10;&#10;                    ActionButtons(&#10;                        profiles = users,&#10;                        profileIndex = profileIndex,&#10;                        handleProfileAction = { isLike, profileIndex, profiles, homeViewModel -&gt;&#10;                            handleProfileAction(&#10;                                isLike,&#10;                                profileIndex,&#10;                                profiles,&#10;                                homeViewModel,&#10;                                navController&#10;                            )&#10;                        },&#10;                        animateSwipe = ::animateSwipe&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;}&#10;&#10;@Composable&#10;fun HomeHeader(navController: NavController) {&#10;    val showFilterDialog = remember { mutableStateOf(false) }&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(start = 48.dp, end = 48.dp, top = 40.dp, bottom = 30.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;&#10;        Text(&#10;            text = &quot;Discover&quot;,&#10;            color = Color.Black,&#10;            fontWeight = FontWeight.Bold,&#10;            fontSize = 30.sp&#10;        )&#10;&#10;        IconButton(onClick = { showFilterDialog.value = true }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = &quot;Filter&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;    }&#10;    val userViewModel: UserViewModel = hiltViewModel()&#10;    val currentUid = userViewModel.user.value?.uid ?: &quot;&quot;&#10;    android.util.Log.d(&quot;HomeHeader&quot;, &quot;Current UID: $currentUid&quot;)&#10;    if (showFilterDialog.value) {&#10;        com.example.dating.ui.components.FilterDialog(&#10;            show = showFilterDialog.value,&#10;            onDismiss = { showFilterDialog.value = false },&#10;            userViewModel = userViewModel,&#10;            currentUid = currentUid,&#10;            onApply = { selectedInterest, location, distance, ageRange -&gt;&#10;                // TODO: Apply filter logic here&#10;                showFilterDialog.value = false&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileCard(&#10;    profiles: List&lt;User&gt;,&#10;    profileIndex: MutableState&lt;Int&gt;,&#10;    handleProfileAction: suspend (Boolean, MutableState&lt;Int&gt;, List&lt;User&gt;, HomeViewModel) -&gt; Unit,&#10;    animateSwipe: suspend (Animatable&lt;Float, *&gt;, Float) -&gt; Unit,&#10;    homeViewModel: HomeViewModel = viewModel(),&#10;    navController: NavController&#10;) {&#10;    val currentProfile = profiles.getOrNull(profileIndex.value)&#10;    val nextProfile = profiles.getOrNull(profileIndex.value + 1)&#10;    val currentUid = currentProfile?.uid&#10;&#10;    if (currentProfile == null &amp;&amp; nextProfile == null) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(900.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Text(&quot;No profiles available&quot;, color = Color.Gray)&#10;        }&#10;        return&#10;    }&#10;&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;    val offsetY = remember { Animatable(0f) }&#10;    val isDragging = remember { mutableStateOf(false) }&#10;    val likeProgress = (offsetX.value / 200f).coerceIn(0f, 1f)&#10;    val dislikeProgress = (-offsetX.value / 200f).coerceIn(0f, 1f)&#10;    val iconAlpha = maxOf(likeProgress, dislikeProgress)&#10;    val iconScale = 1f + 0.3f * iconAlpha&#10;    val cardRotation = (offsetX.value / 15).coerceIn(-25f, 25f)&#10;    val threshold = 200f&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(550.dp)&#10;            .padding(horizontal = 30.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Render next card first (always present if available)&#10;        if (nextProfile != null) {&#10;            ProfileCardContent(&#10;                profile = nextProfile,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(550.dp)&#10;                    .clip(RoundedCornerShape(32.dp))&#10;                    .background(Color(0xFF23222B))&#10;                    .graphicsLayer(&#10;                        scaleX = lerp(0.95f, 1f, iconAlpha),&#10;                        scaleY = lerp(0.95f, 1f, iconAlpha),&#10;                        alpha = lerp(0.7f, 1f, iconAlpha)&#10;                    ),&#10;                navController = navController&#10;            )&#10;        }&#10;        // Top card (draggable, always present if available)&#10;        if (currentProfile != null) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(550.dp)&#10;                    .offset { IntOffset(offsetX.value.toInt(), offsetY.value.toInt()) }&#10;                    .rotate(cardRotation)&#10;                    .clip(RoundedCornerShape(32.dp))&#10;                    .background(Color(0xFF23222B))&#10;                    .pointerInput(currentUid) {&#10;                        detectTapGestures(&#10;                            onDoubleTap = {&#10;                                currentUid?.let { uid -&gt;&#10;                                    navController.navigate(Screen.UserProfile.route(uid))&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                    .pointerInput(profileIndex.value) {&#10;                        detectDragGestures(&#10;                            onDragStart = { isDragging.value = true },&#10;                            onDragEnd = {&#10;                                isDragging.value = false&#10;                                scope.launch {&#10;                                    when {&#10;                                        offsetX.value &gt; threshold -&gt; {&#10;                                            animateSwipe(offsetX, 1f)&#10;                                            offsetY.snapTo(0f)&#10;                                            handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                                        }&#10;                                        offsetX.value &lt; -threshold -&gt; {&#10;                                            animateSwipe(offsetX, -1f)&#10;                                            offsetY.snapTo(0f)&#10;                                            handleProfileAction(false, profileIndex, profiles, homeViewModel)&#10;&#10;                                        }&#10;                                        else -&gt; {&#10;                                            offsetX.animateTo(0f, spring(stiffness = Spring.StiffnessMedium))&#10;                                            offsetY.animateTo(0f, spring(stiffness = Spring.StiffnessMedium))&#10;                                        }&#10;                                    }&#10;                                }&#10;                            },&#10;                            onDrag = { change, dragAmount -&gt;&#10;                                scope.launch {&#10;                                    offsetX.snapTo(offsetX.value + dragAmount.x)&#10;                                    offsetY.snapTo(offsetY.value + dragAmount.y)&#10;                                }&#10;                            }&#10;                        )&#10;                    },&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                ProfileCardContent(&#10;                    profile = currentProfile,&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    navController = navController,&#10;                    likeProgress = likeProgress,&#10;                    dislikeProgress = dislikeProgress,&#10;                    iconAlpha = iconAlpha,&#10;                    iconScale = iconScale&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ProfileCardContent(&#10;    profile: User?,&#10;    modifier: Modifier = Modifier,&#10;    navController: NavController,&#10;    likeProgress: Float = 0f,&#10;    dislikeProgress: Float = 0f,&#10;    iconAlpha: Float = 0f,&#10;    iconScale: Float = 1f&#10;) {&#10;    if (profile == null) return&#10;    val firstName = profile.firstName ?: &quot;&quot;&#10;    val lastName = profile.lastName ?: &quot;&quot;&#10;    val name = (firstName + &quot; &quot; + lastName).trim().ifEmpty { &quot;Unknown&quot; }&#10;    val birthday = profile.birthday&#10;    val age = birthday?.let {&#10;        try {&#10;            val year = it.split(&quot;/&quot;).getOrNull(2)?.toInt() ?: throw Exception(&quot;Invalid date&quot;)&#10;            val currentYear = Calendar.getInstance().get(Calendar.YEAR)&#10;            (currentYear - year).toString()&#10;        } catch (e: Exception) {&#10;            &quot;?&quot;&#10;        }&#10;    } ?: &quot;?&quot;&#10;    val description = profile.description ?: &quot;No description&quot;&#10;    val distance = profile.distance?.toString() ?: &quot;1 km&quot;&#10;&#10;    Box(modifier = modifier) {&#10;        if (profile.avatarUrl != null &amp;&amp; profile.avatarUrl.isNotBlank()) {&#10;            Image(&#10;                painter = rememberAsyncImagePainter(model = profile.avatarUrl),&#10;                contentDescription = &quot;Profile Image&quot;,&#10;                contentScale = ContentScale.Crop,&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .clip(RoundedCornerShape(32.dp))&#10;            )&#10;        } else {&#10;            Image(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile Image&quot;,&#10;                contentScale = ContentScale.Crop,&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .clip(RoundedCornerShape(32.dp))&#10;            )&#10;        }&#10;        Box(&#10;            modifier = Modifier&#10;                .padding(16.dp)&#10;                .align(Alignment.TopStart)&#10;                .background(Color.White.copy(alpha = 0.85f), RoundedCornerShape(50))&#10;                .padding(horizontal = 16.dp, vertical = 6.dp)&#10;        ) {&#10;            Text(distance, color = Color.Black, fontWeight = FontWeight.Bold, fontSize = 14.sp)&#10;        }&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(120.dp)&#10;                .align(Alignment.BottomCenter)&#10;                .background(&#10;                    Brush.verticalGradient(&#10;                        colors = listOf(Color.Transparent, Color.Black),&#10;                        startY = 0f,&#10;                        endY = 300f&#10;                    ),&#10;                    shape = RoundedCornerShape(bottomStart = 32.dp, bottomEnd = 32.dp)&#10;                )&#10;        )&#10;        Column(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.Center,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;$name, $age&quot;,&#10;                color = Color.White,&#10;                fontWeight = FontWeight.Bold,&#10;                fontSize = 28.sp,&#10;                maxLines = 1,&#10;                modifier = Modifier.fillMaxWidth(),&#10;                textAlign = TextAlign.Center&#10;            )&#10;            Text(&#10;                text = description,&#10;                color = Color(0xFFCCCCCC),&#10;                fontSize = 16.sp,&#10;                maxLines = 1,&#10;                modifier = Modifier.fillMaxWidth(),&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;        if (likeProgress &gt; 0.05f) {&#10;            Icon(&#10;                imageVector = Icons.Default.Favorite,&#10;                contentDescription = &quot;Like&quot;,&#10;                tint = Color.Red.copy(alpha = iconAlpha),&#10;                modifier = Modifier&#10;                    .size((96f * iconScale).dp)&#10;                    .align(Alignment.Center)&#10;            )&#10;        } else if (dislikeProgress &gt; 0.05f) {&#10;            Icon(&#10;                imageVector = Icons.Default.Close,&#10;                contentDescription = &quot;Dislike&quot;,&#10;                tint = Color.White.copy(alpha = iconAlpha),&#10;                modifier = Modifier&#10;                    .size((96f * iconScale).dp)&#10;                    .align(Alignment.Center)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionButtons(&#10;    profiles: List&lt;User&gt;,&#10;    profileIndex: MutableState&lt;Int&gt;,&#10;    handleProfileAction: suspend (Boolean, MutableState&lt;Int&gt;, List&lt;User&gt;, HomeViewModel) -&gt; Unit,&#10;    animateSwipe: suspend (Animatable&lt;Float, *&gt;, Float) -&gt; Unit,&#10;    homeViewModel: HomeViewModel = viewModel()&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 24.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(25.dp, Alignment.CenterHorizontally),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        // Dislike Button&#10;        ActionButton(&#10;            icon = Icons.Default.Close,&#10;            background = Color.White,&#10;            iconTint = Color.Black,&#10;            size = 75.dp,&#10;            shadow = 8.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(false, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, -1f) // Pass direction explicitly&#10;            }&#10;        }&#10;        // Super Like Button&#10;        ActionButton(&#10;            icon = Icons.Default.Favorite,&#10;            background = AppColors.Text_Pink,&#10;            iconTint = Color.White,&#10;            size = 95.dp,&#10;            shadow = 12.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;            }&#10;        }&#10;        // Like Button (calls a different method for clarity)&#10;        ActionButton(&#10;            icon = Icons.Default.Star,&#10;            background = Color(0xFF4A154B),&#10;            iconTint = Color.White,&#10;            size = 75.dp,&#10;            shadow = 8.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionButton(&#10;    icon: ImageVector,&#10;    background: Color,&#10;    iconTint: Color,&#10;    size: Dp,&#10;    shadow: Dp,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .size(size)&#10;            .shadow(shadow, CircleShape)&#10;            .clip(CircleShape)&#10;            .background(background)&#10;            .clickable { onClick() },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = iconTint,&#10;            modifier = Modifier.size(size * 0.5f)&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.gestures.detectDragGestures&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.IntOffset&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.animation.core.Animatable&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import java.util.Calendar&#10;import androidx.compose.runtime.MutableState&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.util.lerp&#10;import androidx.compose.animation.core.Spring&#10;import androidx.compose.animation.core.spring&#10;import androidx.compose.material3.Scaffold&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.viewmodel.HomeViewModel&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.data.model.Resource&#10;import com.example.dating.data.model.User&#10;import com.example.dating.ui.components.BottomNavigationBar&#10;import androidx.compose.foundation.gestures.detectTapGestures&#10;import com.example.dating.navigation.Screen&#10;import coil.compose.rememberAsyncImagePainter&#10;import com.example.dating.viewmodel.UserViewModel&#10;&#10;@Composable&#10;fun HomeScreen(navController: NavController, homeViewModel: HomeViewModel = hiltViewModel()) {&#10;    val usersResource by homeViewModel.usersState.collectAsState()&#10;    val profileIndex = rememberSaveable { mutableStateOf(0) }&#10;&#10;    // Helper functions&#10;    fun handleProfileAction(isLike: Boolean, profileIndex: MutableState&lt;Int&gt;, profiles: List&lt;User&gt;, homeViewModel: HomeViewModel, navController: NavController) {&#10;        val currentProfile = profiles.getOrNull(profileIndex.value)&#10;        if (currentProfile != null) {&#10;            if (isLike) {&#10;                val likedUserId = currentProfile.uid&#10;                if (likedUserId != null) {&#10;                    homeViewModel.likeProfile(likedUserId)&#10;                    // Check for match and navigate if found&#10;                    val matchId = homeViewModel.matchFoundUserId.value&#10;                    if (matchId != null) {&#10;                        navController.navigate(&quot;match&quot;)&#10;                    }&#10;                }&#10;            }&#10;            profileIndex.value++&#10;        }&#10;    }&#10;    suspend fun animateSwipe(offsetX: Animatable&lt;Float, *&gt;, direction: Float) {&#10;        offsetX.animateTo(direction * 400f, tween(300))&#10;        offsetX.snapTo(0f)&#10;    }&#10;&#10;    // Observe matchFoundUserId and navigate if a match is found&#10;    val matchFoundUserId by homeViewModel.matchFoundUserId.collectAsState()&#10;    LaunchedEffect(matchFoundUserId) {&#10;        if (matchFoundUserId != null) {&#10;            navController.navigate(&quot;match/${matchFoundUserId}&quot;)&#10;            homeViewModel.resetMatchFoundUserId()&#10;        }&#10;    }&#10;&#10;&#10;    // Use Box to overlay BottomNavigationBar and keep it fixed at the bottom&#10;    Scaffold(&#10;        bottomBar = {&#10;            BottomNavigationBar(navController, 0)&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .background(AppColors.MainBackground)&#10;        ) {&#10;            HomeHeader(navController)&#10;            when (usersResource) {&#10;                is Resource.Loading -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxWidth().height(200.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        CircularProgressIndicator()&#10;                    }&#10;                }&#10;&#10;                is Resource.Failure -&gt; {&#10;                    val error =&#10;                        (usersResource as Resource.Failure).exception?.message ?: &quot;Unknown error&quot;&#10;                    Box(&#10;                        modifier = Modifier.fillMaxWidth().height(200.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Text(&quot;Error: $error&quot;, color = Color.Red)&#10;                    }&#10;                }&#10;&#10;                is Resource.Success -&gt; {&#10;                    val users = (usersResource as Resource.Success&lt;List&lt;User&gt;&gt;).result&#10;                    // You can use your ProfileCard and ActionButtons here, or a grid like FavoriteScreen&#10;                    Box(modifier = Modifier.weight(1f)) {&#10;                        ProfileCard(&#10;                            profiles = users,&#10;                            profileIndex = profileIndex,&#10;                            handleProfileAction = { isLike, profileIndex, profiles, homeViewModel -&gt;&#10;                                handleProfileAction(&#10;                                    isLike,&#10;                                    profileIndex,&#10;                                    profiles,&#10;                                    homeViewModel,&#10;                                    navController&#10;                                )&#10;                            },&#10;                            animateSwipe = ::animateSwipe,&#10;                            navController = navController // Pass navController here&#10;                        )&#10;                    }&#10;&#10;                    ActionButtons(&#10;                        profiles = users,&#10;                        profileIndex = profileIndex,&#10;                        handleProfileAction = { isLike, profileIndex, profiles, homeViewModel -&gt;&#10;                            handleProfileAction(&#10;                                isLike,&#10;                                profileIndex,&#10;                                profiles,&#10;                                homeViewModel,&#10;                                navController&#10;                            )&#10;                        },&#10;                        animateSwipe = ::animateSwipe&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;}&#10;&#10;@Composable&#10;fun HomeHeader(navController: NavController) {&#10;    val showFilterDialog = remember { mutableStateOf(false) }&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(start = 48.dp, end = 48.dp, top = 40.dp, bottom = 30.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;&#10;        Text(&#10;            text = &quot;Discover&quot;,&#10;            color = Color.Black,&#10;            fontWeight = FontWeight.Bold,&#10;            fontSize = 30.sp&#10;        )&#10;&#10;        IconButton(onClick = { showFilterDialog.value = true }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = &quot;Filter&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;    }&#10;    val userViewModel: UserViewModel = hiltViewModel()&#10;    val currentUid = userViewModel.getCurrentUserId().orEmpty()&#10;    android.util.Log.d(&quot;HomeHeader&quot;, &quot;Current UID: $currentUid&quot;)&#10;    if (showFilterDialog.value) {&#10;        com.example.dating.ui.components.FilterDialog(&#10;            show = showFilterDialog.value,&#10;            onDismiss = { showFilterDialog.value = false },&#10;            userViewModel = userViewModel,&#10;            currentUid = currentUid,&#10;            onApply = { selectedInterest, location, distance, ageRange -&gt;&#10;                // TODO: Apply filter logic here&#10;                showFilterDialog.value = false&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileCard(&#10;    profiles: List&lt;User&gt;,&#10;    profileIndex: MutableState&lt;Int&gt;,&#10;    handleProfileAction: suspend (Boolean, MutableState&lt;Int&gt;, List&lt;User&gt;, HomeViewModel) -&gt; Unit,&#10;    animateSwipe: suspend (Animatable&lt;Float, *&gt;, Float) -&gt; Unit,&#10;    homeViewModel: HomeViewModel = viewModel(),&#10;    navController: NavController&#10;) {&#10;    val currentProfile = profiles.getOrNull(profileIndex.value)&#10;    val nextProfile = profiles.getOrNull(profileIndex.value + 1)&#10;    val currentUid = currentProfile?.uid&#10;&#10;    if (currentProfile == null &amp;&amp; nextProfile == null) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(900.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Text(&quot;No profiles available&quot;, color = Color.Gray)&#10;        }&#10;        return&#10;    }&#10;&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;    val offsetY = remember { Animatable(0f) }&#10;    val isDragging = remember { mutableStateOf(false) }&#10;    val likeProgress = (offsetX.value / 200f).coerceIn(0f, 1f)&#10;    val dislikeProgress = (-offsetX.value / 200f).coerceIn(0f, 1f)&#10;    val iconAlpha = maxOf(likeProgress, dislikeProgress)&#10;    val iconScale = 1f + 0.3f * iconAlpha&#10;    val cardRotation = (offsetX.value / 15).coerceIn(-25f, 25f)&#10;    val threshold = 200f&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(550.dp)&#10;            .padding(horizontal = 30.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Render next card first (always present if available)&#10;        if (nextProfile != null) {&#10;            ProfileCardContent(&#10;                profile = nextProfile,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(550.dp)&#10;                    .clip(RoundedCornerShape(32.dp))&#10;                    .background(Color(0xFF23222B))&#10;                    .graphicsLayer(&#10;                        scaleX = lerp(0.95f, 1f, iconAlpha),&#10;                        scaleY = lerp(0.95f, 1f, iconAlpha),&#10;                        alpha = lerp(0.7f, 1f, iconAlpha)&#10;                    ),&#10;                navController = navController&#10;            )&#10;        }&#10;        // Top card (draggable, always present if available)&#10;        if (currentProfile != null) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(550.dp)&#10;                    .offset { IntOffset(offsetX.value.toInt(), offsetY.value.toInt()) }&#10;                    .rotate(cardRotation)&#10;                    .clip(RoundedCornerShape(32.dp))&#10;                    .background(Color(0xFF23222B))&#10;                    .pointerInput(currentUid) {&#10;                        detectTapGestures(&#10;                            onDoubleTap = {&#10;                                currentUid?.let { uid -&gt;&#10;                                    navController.navigate(Screen.UserProfile.route(uid))&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                    .pointerInput(profileIndex.value) {&#10;                        detectDragGestures(&#10;                            onDragStart = { isDragging.value = true },&#10;                            onDragEnd = {&#10;                                isDragging.value = false&#10;                                scope.launch {&#10;                                    when {&#10;                                        offsetX.value &gt; threshold -&gt; {&#10;                                            animateSwipe(offsetX, 1f)&#10;                                            offsetY.snapTo(0f)&#10;                                            handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                                        }&#10;                                        offsetX.value &lt; -threshold -&gt; {&#10;                                            animateSwipe(offsetX, -1f)&#10;                                            offsetY.snapTo(0f)&#10;                                            handleProfileAction(false, profileIndex, profiles, homeViewModel)&#10;&#10;                                        }&#10;                                        else -&gt; {&#10;                                            offsetX.animateTo(0f, spring(stiffness = Spring.StiffnessMedium))&#10;                                            offsetY.animateTo(0f, spring(stiffness = Spring.StiffnessMedium))&#10;                                        }&#10;                                    }&#10;                                }&#10;                            },&#10;                            onDrag = { change, dragAmount -&gt;&#10;                                scope.launch {&#10;                                    offsetX.snapTo(offsetX.value + dragAmount.x)&#10;                                    offsetY.snapTo(offsetY.value + dragAmount.y)&#10;                                }&#10;                            }&#10;                        )&#10;                    },&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                ProfileCardContent(&#10;                    profile = currentProfile,&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    navController = navController,&#10;                    likeProgress = likeProgress,&#10;                    dislikeProgress = dislikeProgress,&#10;                    iconAlpha = iconAlpha,&#10;                    iconScale = iconScale&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ProfileCardContent(&#10;    profile: User?,&#10;    modifier: Modifier = Modifier,&#10;    navController: NavController,&#10;    likeProgress: Float = 0f,&#10;    dislikeProgress: Float = 0f,&#10;    iconAlpha: Float = 0f,&#10;    iconScale: Float = 1f&#10;) {&#10;    if (profile == null) return&#10;    val firstName = profile.firstName ?: &quot;&quot;&#10;    val lastName = profile.lastName ?: &quot;&quot;&#10;    val name = (firstName + &quot; &quot; + lastName).trim().ifEmpty { &quot;Unknown&quot; }&#10;    val birthday = profile.birthday&#10;    val age = birthday?.let {&#10;        try {&#10;            val year = it.split(&quot;/&quot;).getOrNull(2)?.toInt() ?: throw Exception(&quot;Invalid date&quot;)&#10;            val currentYear = Calendar.getInstance().get(Calendar.YEAR)&#10;            (currentYear - year).toString()&#10;        } catch (e: Exception) {&#10;            &quot;?&quot;&#10;        }&#10;    } ?: &quot;?&quot;&#10;    val description = profile.description ?: &quot;No description&quot;&#10;    val distance = profile.distance?.toString() ?: &quot;1 km&quot;&#10;&#10;    Box(modifier = modifier) {&#10;        if (profile.avatarUrl != null &amp;&amp; profile.avatarUrl.isNotBlank()) {&#10;            Image(&#10;                painter = rememberAsyncImagePainter(model = profile.avatarUrl),&#10;                contentDescription = &quot;Profile Image&quot;,&#10;                contentScale = ContentScale.Crop,&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .clip(RoundedCornerShape(32.dp))&#10;            )&#10;        } else {&#10;            Image(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile Image&quot;,&#10;                contentScale = ContentScale.Crop,&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .clip(RoundedCornerShape(32.dp))&#10;            )&#10;        }&#10;        Box(&#10;            modifier = Modifier&#10;                .padding(16.dp)&#10;                .align(Alignment.TopStart)&#10;                .background(Color.White.copy(alpha = 0.85f), RoundedCornerShape(50))&#10;                .padding(horizontal = 16.dp, vertical = 6.dp)&#10;        ) {&#10;            Text(distance, color = Color.Black, fontWeight = FontWeight.Bold, fontSize = 14.sp)&#10;        }&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(120.dp)&#10;                .align(Alignment.BottomCenter)&#10;                .background(&#10;                    Brush.verticalGradient(&#10;                        colors = listOf(Color.Transparent, Color.Black),&#10;                        startY = 0f,&#10;                        endY = 300f&#10;                    ),&#10;                    shape = RoundedCornerShape(bottomStart = 32.dp, bottomEnd = 32.dp)&#10;                )&#10;        )&#10;        Column(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.Center,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;$name, $age&quot;,&#10;                color = Color.White,&#10;                fontWeight = FontWeight.Bold,&#10;                fontSize = 28.sp,&#10;                maxLines = 1,&#10;                modifier = Modifier.fillMaxWidth(),&#10;                textAlign = TextAlign.Center&#10;            )&#10;            Text(&#10;                text = description,&#10;                color = Color(0xFFCCCCCC),&#10;                fontSize = 16.sp,&#10;                maxLines = 1,&#10;                modifier = Modifier.fillMaxWidth(),&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;        if (likeProgress &gt; 0.05f) {&#10;            Icon(&#10;                imageVector = Icons.Default.Favorite,&#10;                contentDescription = &quot;Like&quot;,&#10;                tint = Color.Red.copy(alpha = iconAlpha),&#10;                modifier = Modifier&#10;                    .size((96f * iconScale).dp)&#10;                    .align(Alignment.Center)&#10;            )&#10;        } else if (dislikeProgress &gt; 0.05f) {&#10;            Icon(&#10;                imageVector = Icons.Default.Close,&#10;                contentDescription = &quot;Dislike&quot;,&#10;                tint = Color.White.copy(alpha = iconAlpha),&#10;                modifier = Modifier&#10;                    .size((96f * iconScale).dp)&#10;                    .align(Alignment.Center)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionButtons(&#10;    profiles: List&lt;User&gt;,&#10;    profileIndex: MutableState&lt;Int&gt;,&#10;    handleProfileAction: suspend (Boolean, MutableState&lt;Int&gt;, List&lt;User&gt;, HomeViewModel) -&gt; Unit,&#10;    animateSwipe: suspend (Animatable&lt;Float, *&gt;, Float) -&gt; Unit,&#10;    homeViewModel: HomeViewModel = viewModel()&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 24.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(25.dp, Alignment.CenterHorizontally),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        // Dislike Button&#10;        ActionButton(&#10;            icon = Icons.Default.Close,&#10;            background = Color.White,&#10;            iconTint = Color.Black,&#10;            size = 75.dp,&#10;            shadow = 8.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(false, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, -1f) // Pass direction explicitly&#10;            }&#10;        }&#10;        // Super Like Button&#10;        ActionButton(&#10;            icon = Icons.Default.Favorite,&#10;            background = AppColors.Text_Pink,&#10;            iconTint = Color.White,&#10;            size = 95.dp,&#10;            shadow = 12.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;            }&#10;        }&#10;        // Like Button (calls a different method for clarity)&#10;        ActionButton(&#10;            icon = Icons.Default.Star,&#10;            background = Color(0xFF4A154B),&#10;            iconTint = Color.White,&#10;            size = 75.dp,&#10;            shadow = 8.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionButton(&#10;    icon: ImageVector,&#10;    background: Color,&#10;    iconTint: Color,&#10;    size: Dp,&#10;    shadow: Dp,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .size(size)&#10;            .shadow(shadow, CircleShape)&#10;            .clip(CircleShape)&#10;            .background(background)&#10;            .clickable { onClick() },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = iconTint,&#10;            modifier = Modifier.size(size * 0.5f)&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class HomeViewModel : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val _addFavoriteState = MutableStateFlow&lt;Result&lt;Unit&gt;?&gt;(null)&#10;    val addFavoriteState: StateFlow&lt;Result&lt;Unit&gt;?&gt; = _addFavoriteState&#10;&#10;    fun addFavorite(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        val favorite = hashMapOf(&#10;            &quot;likerId&quot; to likerId,&#10;            &quot;likedId&quot; to likedId,&#10;            &quot;timestamp&quot; to Timestamp.now()&#10;        )&#10;        viewModelScope.launch {&#10;            try {&#10;                db.collection(&quot;favorites&quot;).add(favorite)&#10;                _addFavoriteState.value = Result.success(Unit)&#10;            } catch (e: Exception) {&#10;                _addFavoriteState.value = Result.failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearAddFavoriteState() {&#10;        _addFavoriteState.value = null&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/HomeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/HomeViewModel.kt" />
              <option name="originalContent" value="package com.example.dating.viewmodel&#10;&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.FavoriteRepository&#10;import com.example.dating.data.model.repository.MatchRepository&#10;import com.example.dating.data.model.repository.HomeRepository&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;&#10;@HiltViewModel&#10;class HomeViewModel @Inject constructor(&#10;    private val favoriteRepository: FavoriteRepository,&#10;    private val homeRepository: HomeRepository&#10;) : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    private val _matchFoundUserId = MutableStateFlow&lt;String?&gt;(null)&#10;    val matchFoundUserId: StateFlow&lt;String?&gt; = _matchFoundUserId&#10;&#10;    private val _usersState = MutableStateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt;(Resource.Loading)&#10;    val usersState: StateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt; = _usersState&#10;&#10;    init {&#10;        fetchHome()&#10;    }&#10;&#10;    private fun fetchHome() {&#10;        val currentUserId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            try {&#10;                _usersState.value = Resource.Loading&#10;                // Get list of user IDs for home (excluding current user)&#10;                val profileIds = homeRepository.fetchProfiles().filter { it != currentUserId }&#10;                if (profileIds.isEmpty()) {&#10;                    _usersState.value = Resource.Success(emptyList())&#10;                    return@launch&#10;                }&#10;                // Fetch user profiles&#10;                val users = homeRepository.getUserProfilesByIds(profileIds)&#10;                _usersState.value = Resource.Success(users)&#10;            } catch (e: Exception) {&#10;                _usersState.value = Resource.Failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun likeProfile(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            try {&#10;                // Add favorite using repository&#10;                favoriteRepository.addFavorite(likerId, likedId)&#10;                // Check for match using repository&#10;                val isMatch = favoriteRepository.isMatch(likerId, likedId)&#10;                if (isMatch) {&#10;                    _matchFoundUserId.value = likedId&#10;                    android.util.Log.d(&quot;HomeViewModel&quot;, &quot;Calling MatchRepository.saveMatch with $likerId and $likedId&quot;)&#10;                } else {&#10;                    _matchFoundUserId.value = null&#10;                    android.util.Log.d(&quot;HomeViewModel&quot;, &quot;Calling MatchRepository.saveMatch with $likerId and $likedId, status=false&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                _usersState.value = Resource.Failure(e as? Exception ?: Exception(e.message))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun resetMatchFoundUserId() {&#10;        _matchFoundUserId.value = null&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.viewmodel&#10;&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.FavoriteRepository&#10;import com.example.dating.data.model.repository.MatchRepository&#10;import com.example.dating.data.model.repository.HomeRepository&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;&#10;@HiltViewModel&#10;class HomeViewModel @Inject constructor(&#10;    private val favoriteRepository: FavoriteRepository,&#10;    private val homeRepository: HomeRepository&#10;) : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    private val _matchFoundUserId = MutableStateFlow&lt;String?&gt;(null)&#10;    val matchFoundUserId: StateFlow&lt;String?&gt; = _matchFoundUserId&#10;&#10;    private val _usersState = MutableStateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt;(Resource.Loading)&#10;    val usersState: StateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt; = _usersState&#10;&#10;    init {&#10;        fetchHome()&#10;    }&#10;&#10;    private fun getCurrentUserId(): String? {&#10;        return FirebaseAuth.getInstance().currentUser?.uid&#10;    }&#10;&#10;    private fun fetchHome() {&#10;        val currentUserId = getCurrentUserId() ?: return&#10;        viewModelScope.launch {&#10;            try {&#10;                _usersState.value = Resource.Loading&#10;                // Get list of user IDs for home (excluding current user)&#10;                val profileIds = homeRepository.fetchProfiles().filter { it != currentUserId }&#10;                if (profileIds.isEmpty()) {&#10;                    _usersState.value = Resource.Success(emptyList())&#10;                    return@launch&#10;                }&#10;                // Fetch user profiles&#10;                val users = homeRepository.getUserProfilesByIds(profileIds)&#10;                _usersState.value = Resource.Success(users)&#10;            } catch (e: Exception) {&#10;                _usersState.value = Resource.Failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun likeProfile(likedId: String) {&#10;        val likerId = getCurrentUserId() ?: return&#10;        viewModelScope.launch {&#10;            try {&#10;                // Add favorite using repository&#10;                favoriteRepository.addFavorite(likerId, likedId)&#10;                // Check for match using repository&#10;                val isMatch = favoriteRepository.isMatch(likerId, likedId)&#10;                if (isMatch) {&#10;                    _matchFoundUserId.value = likedId&#10;                    android.util.Log.d(&quot;HomeViewModel&quot;, &quot;Calling MatchRepository.saveMatch with $likerId and $likedId&quot;)&#10;                } else {&#10;                    _matchFoundUserId.value = null&#10;                    android.util.Log.d(&quot;HomeViewModel&quot;, &quot;Calling MatchRepository.saveMatch with $likerId and $likedId, status=false&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                _usersState.value = Resource.Failure(e as? Exception ?: Exception(e.message))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun resetMatchFoundUserId() {&#10;        _matchFoundUserId.value = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/UserViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/UserViewModel.kt" />
              <option name="originalContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.UserFilterPreferences&#10;import com.example.dating.data.model.repository.UserRepository&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.DocumentSnapshot&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.firestore.ListenerRegistration&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class UserViewModel @Inject constructor(&#10;    private val firestore: FirebaseFirestore,&#10;    private val auth: FirebaseAuth&#10;) : ViewModel() {&#10;&#10;    @Inject lateinit var userRepository: UserRepository&#10;&#10;    private val _user = MutableStateFlow&lt;User?&gt;(null)&#10;    val user: StateFlow&lt;User?&gt; = _user&#10;&#10;    private val _isLoading = MutableStateFlow(true)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading&#10;&#10;    private var registration: ListenerRegistration? = null&#10;&#10;    /**&#10;     * Gọi từ UserProfileScreen. Nếu uid=null -&gt; lấy current user;&#10;     * nếu vẫn null -&gt; fallback dummy để test UI.&#10;     */&#10;    fun observeUser(uid: String?) {&#10;        registration?.remove()&#10;        _isLoading.value = true&#10;&#10;        val targetUid = uid ?: auth.currentUser?.uid&#10;        if (targetUid.isNullOrBlank()) {&#10;            _user.value = createDummyUser()&#10;            _isLoading.value = false&#10;            return&#10;        }&#10;&#10;        registration = firestore.collection(&quot;users&quot;)&#10;            .document(targetUid)&#10;            .addSnapshotListener { snap, err -&gt;&#10;                if (err != null || snap == null || !snap.exists()) {&#10;                    _user.value = createDummyUser()&#10;                    _isLoading.value = false&#10;                    return@addSnapshotListener&#10;                }&#10;                _user.value = snapshotToUser(snap, targetUid)&#10;                _isLoading.value = false&#10;            }&#10;    }&#10;&#10;    fun updateFilterPreferences(uid: String, prefs: UserFilterPreferences, onResult: (Resource&lt;Unit&gt;) -&gt; Unit) {&#10;        android.util.Log.d(&quot;UserViewModel&quot;, &quot;updateFilterPreferences called: uid=$uid, prefs=$prefs&quot;)&#10;        CoroutineScope(Dispatchers.IO).launch {&#10;            val result = userRepository.updateFilterPreferences(uid, prefs)&#10;            android.util.Log.d(&quot;UserViewModel&quot;, &quot;updateFilterPreferences result: $result for uid=$uid&quot;)&#10;            onResult(result)&#10;        }&#10;    }&#10;&#10;    fun getCurrentUserId(): String? {&#10;        return FirebaseAuth.getInstance().currentUser?.uid&#10;    }&#10;&#10;    override fun onCleared() {&#10;        super.onCleared()&#10;        registration?.remove()&#10;    }&#10;&#10;    // ---- Helper: đọc an toàn, lọc null ----&#10;    private fun snapshotToUser(doc: DocumentSnapshot, uid: String): User {&#10;        val imageUrl = (doc.get(&quot;imageUrl&quot;) as? List&lt;*&gt;)?.filterIsInstance&lt;String&gt;() ?: emptyList()&#10;        val interests = (doc.get(&quot;interests&quot;) as? List&lt;*&gt;)?.filterIsInstance&lt;String&gt;() ?: emptyList()&#10;&#10;        return User(&#10;            uid = uid,&#10;            firstName = doc.getString(&quot;firstName&quot;).orEmpty(),&#10;            lastName  = doc.getString(&quot;lastName&quot;).orEmpty(),&#10;            birthday  = doc.getString(&quot;birthday&quot;),&#10;            imageUrl  = imageUrl,&#10;            avatarUrl = doc.getString(&quot;avatarUrl&quot;) ?: imageUrl.firstOrNull(),&#10;            gender    = doc.getString(&quot;gender&quot;),&#10;            job       = doc.getString(&quot;job&quot;) ?: &quot;Professional model&quot;,&#10;            location  = doc.getString(&quot;location&quot;) ?: &quot;Chicago, IL, United States&quot;,&#10;            description = doc.getString(&quot;description&quot;),&#10;            interests   = interests&#10;        )&#10;    }&#10;&#10;    private fun createDummyUser(): User {&#10;        val demoImages = listOf(&#10;            &quot;https://images.unsplash.com/photo-1524504388940-b1c1722653e1&quot;,&#10;            &quot;https://images.unsplash.com/photo-1544005313-94ddf0286df2&quot;,&#10;            &quot;https://images.unsplash.com/photo-1517841905240-472988babdf9&quot;,&#10;            &quot;https://images.unsplash.com/photo-1512436991641-6745cdb1723f&quot;&#10;        )&#10;        return User(&#10;            uid = &quot;dummy&quot;,&#10;            firstName = &quot;Jessica&quot;,&#10;            lastName = &quot;Parker&quot;,&#10;            birthday = &quot;1995-06-15&quot;,&#10;            imageUrl = demoImages,&#10;            avatarUrl = demoImages.first(),&#10;            job = &quot;Professional model&quot;,&#10;            location = &quot;Chicago, IL, United States&quot;,&#10;            description = &quot;My name is Jessica Parker and I enjoy meeting new people and finding ways to help them have an uplifting experience.&quot;,&#10;            interests = listOf(&quot;Traveling&quot;, &quot;Books&quot;, &quot;Music&quot;, &quot;Dancing&quot;, &quot;Modeling&quot;)&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.UserFilterPreferences&#10;import com.example.dating.data.model.repository.UserRepository&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.DocumentSnapshot&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.firestore.ListenerRegistration&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class UserViewModel @Inject constructor(&#10;    private val firestore: FirebaseFirestore,&#10;    private val auth: FirebaseAuth&#10;) : ViewModel() {&#10;&#10;    @Inject lateinit var userRepository: UserRepository&#10;&#10;    private val _user = MutableStateFlow&lt;User?&gt;(null)&#10;    val user: StateFlow&lt;User?&gt; = _user&#10;&#10;    private val _isLoading = MutableStateFlow(true)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading&#10;&#10;    private var registration: ListenerRegistration? = null&#10;&#10;    /**&#10;     * Gọi từ UserProfileScreen. Nếu uid=null -&gt; lấy current user;&#10;     * nếu vẫn null -&gt; fallback dummy để test UI.&#10;     */&#10;    fun observeUser(uid: String?) {&#10;        registration?.remove()&#10;        _isLoading.value = true&#10;&#10;        val targetUid = uid ?: auth.currentUser?.uid&#10;        if (targetUid.isNullOrBlank()) {&#10;            _user.value = createDummyUser()&#10;            _isLoading.value = false&#10;            return&#10;        }&#10;&#10;        registration = firestore.collection(&quot;users&quot;)&#10;            .document(targetUid)&#10;            .addSnapshotListener { snap, err -&gt;&#10;                if (err != null || snap == null || !snap.exists()) {&#10;                    _user.value = createDummyUser()&#10;                    _isLoading.value = false&#10;                    return@addSnapshotListener&#10;                }&#10;                _user.value = snapshotToUser(snap, targetUid)&#10;                _isLoading.value = false&#10;            }&#10;    }&#10;&#10;    fun updateFilterPreferences(uid: String, prefs: UserFilterPreferences, onResult: (Resource&lt;Unit&gt;) -&gt; Unit) {&#10;        android.util.Log.d(&quot;UserViewModel&quot;, &quot;updateFilterPreferences called: uid=$uid, prefs=$prefs&quot;)&#10;        CoroutineScope(Dispatchers.IO).launch {&#10;            val result = userRepository.updateFilterPreferences(uid, prefs)&#10;            android.util.Log.d(&quot;UserViewModel&quot;, &quot;updateFilterPreferences result: $result for uid=$uid&quot;)&#10;            onResult(result)&#10;        }&#10;    }&#10;&#10;    fun getCurrentUserId(): String? {&#10;        return FirebaseAuth.getInstance().currentUser?.uid&#10;    }&#10;&#10;    override fun onCleared() {&#10;        super.onCleared()&#10;        registration?.remove()&#10;    }&#10;&#10;    // ---- Helper: đọc an toàn, lọc null ----&#10;    private fun snapshotToUser(doc: DocumentSnapshot, uid: String): User {&#10;        val imageUrl = (doc.get(&quot;imageUrl&quot;) as? List&lt;*&gt;)?.filterIsInstance&lt;String&gt;() ?: emptyList()&#10;        val interests = (doc.get(&quot;interests&quot;) as? List&lt;*&gt;)?.filterIsInstance&lt;String&gt;() ?: emptyList()&#10;&#10;        return User(&#10;            uid = uid,&#10;            firstName = doc.getString(&quot;firstName&quot;).orEmpty(),&#10;            lastName  = doc.getString(&quot;lastName&quot;).orEmpty(),&#10;            birthday  = doc.getString(&quot;birthday&quot;),&#10;            imageUrl  = imageUrl,&#10;            avatarUrl = doc.getString(&quot;avatarUrl&quot;) ?: imageUrl.firstOrNull(),&#10;            gender    = doc.getString(&quot;gender&quot;),&#10;            job       = doc.getString(&quot;job&quot;) ?: &quot;Professional model&quot;,&#10;            location  = doc.getString(&quot;location&quot;) ?: &quot;Chicago, IL, United States&quot;,&#10;            description = doc.getString(&quot;description&quot;),&#10;            interests   = interests,&#10;            filterPreferences = doc.get(&quot;filterPreferences&quot;)?.let {&#10;                // Firestore returns a Map, so we need to convert it to UserFilterPreferences&#10;                val prefsMap = it as? Map&lt;*, *&gt;&#10;                UserFilterPreferences(&#10;                    preferredGender = prefsMap?.get(&quot;preferredGender&quot;) as? String,&#10;                    minAge = (prefsMap?.get(&quot;minAge&quot;) as? Long)?.toInt(),&#10;                    maxAge = (prefsMap?.get(&quot;maxAge&quot;) as? Long)?.toInt(),&#10;                    maxDistance = (prefsMap?.get(&quot;maxDistance&quot;) as? Long)?.toInt()&#10;                )&#10;            }&#10;        )&#10;    }&#10;&#10;    private fun createDummyUser(): User {&#10;        val demoImages = listOf(&#10;            &quot;https://images.unsplash.com/photo-1524504388940-b1c1722653e1&quot;,&#10;            &quot;https://images.unsplash.com/photo-1544005313-94ddf0286df2&quot;,&#10;            &quot;https://images.unsplash.com/photo-1517841905240-472988babdf9&quot;,&#10;            &quot;https://images.unsplash.com/photo-1512436991641-6745cdb1723f&quot;&#10;        )&#10;        return User(&#10;            uid = &quot;dummy&quot;,&#10;            firstName = &quot;Jessica&quot;,&#10;            lastName = &quot;Parker&quot;,&#10;            birthday = &quot;1995-06-15&quot;,&#10;            imageUrl = demoImages,&#10;            avatarUrl = demoImages.first(),&#10;            job = &quot;Professional model&quot;,&#10;            location = &quot;Chicago, IL, United States&quot;,&#10;            description = &quot;My name is Jessica Parker and I enjoy meeting new people and finding ways to help them have an uplifting experience.&quot;,&#10;            interests = listOf(&quot;Traveling&quot;, &quot;Books&quot;, &quot;Music&quot;, &quot;Dancing&quot;, &quot;Modeling&quot;)&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>