<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/MatchRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/MatchRepository.kt" />
              <option name="updatedContent" value="package com.example.dating.data&#10;&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class MatchRepository {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    suspend fun saveMatch(userId1: String, userId2: String, status: Boolean) {&#10;        // Ensure userId1 &lt; userId2 alphabetically&#10;        val (firstId, secondId) = if (userId1 &lt; userId2) userId1 to userId2 else userId2 to userId1&#10;        val matchData = hashMapOf(&#10;            &quot;userId1&quot; to firstId,&#10;            &quot;userId2&quot; to secondId,&#10;            &quot;timestamp&quot; to Timestamp.now(),&#10;            &quot;status&quot; to status&#10;        )&#10;        // Check for duplicate (userId1/userId2 only)&#10;        val query = db.collection(&quot;match&quot;)&#10;            .whereEqualTo(&quot;userId1&quot;, firstId)&#10;            .whereEqualTo(&quot;userId2&quot;, secondId)&#10;            .get().await()&#10;        android.util.Log.d(&quot;MatchRepository&quot;, &quot;MatchQuery: userId1=$firstId, userId2=$secondId, resultCount=${query.size()}&quot;)&#10;        if (query.isEmpty) {&#10;            db.collection(&quot;match&quot;).add(matchData)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/FavoriteRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/FavoriteRepository.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.firestore.ListenerRegistration&#10;import kotlinx.coroutines.tasks.await&#10;import com.example.dating.data.model.User&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;&#10;@Singleton&#10;class FavoriteRepository @Inject constructor() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    suspend fun addFavorite(likerId: String, likedId: String): Boolean {&#10;        val favorite = hashMapOf(&#10;            &quot;likerId&quot; to likerId,&#10;            &quot;likedId&quot; to likedId,&#10;            &quot;timestamp&quot; to Timestamp.now()&#10;        )&#10;        val query = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likerId&quot;, likerId)&#10;            .whereEqualTo(&quot;likedId&quot;, likedId)&#10;            .get().await()&#10;        return if (query.isEmpty) {&#10;            db.collection(&quot;favorites&quot;).add(favorite)&#10;            true&#10;        } else {&#10;            false&#10;        }&#10;    }&#10;&#10;    suspend fun isMatch(likerId: String, likedId: String): Boolean {&#10;        val matchQuery = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likerId&quot;, likedId)&#10;            .whereEqualTo(&quot;likedId&quot;, likerId)&#10;            .get().await()&#10;        return !matchQuery.isEmpty&#10;    }&#10;&#10;    suspend fun deleteFavorite(likerId: String, likedId: String) {&#10;        val query = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likerId&quot;, likerId)&#10;            .whereEqualTo(&quot;likedId&quot;, likedId)&#10;            .get().await()&#10;        for (doc in query.documents) {&#10;            db.collection(&quot;favorites&quot;).document(doc.id).delete().await()&#10;        }&#10;    }&#10;&#10;    fun listenFavorites(likedId: String): Flow&lt;List&lt;User&gt;&gt; = callbackFlow {&#10;        val query = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likedId&quot;, likedId)&#10;&#10;        val listener = query.addSnapshotListener { snapshot, e -&gt;&#10;            if (e != null || snapshot == null) return@addSnapshotListener&#10;&#10;            val likerIds = snapshot.documents.mapNotNull { it[&quot;likerId&quot;] as? String }&#10;            trySend(likerIds)&#10;        }&#10;&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;&#10;    suspend fun getFavoritesByLikedId(likedId: String): List&lt;Map&lt;String, Any&gt;&gt; {&#10;        val query = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likedId&quot;, likedId)&#10;            .get().await()&#10;        return query.documents.mapNotNull { it.data }&#10;    }&#10;&#10;    suspend fun getUserProfilesByIds(userIds: List&lt;String&gt;): List&lt;User&gt; {&#10;        if (userIds.isEmpty()) return emptyList()&#10;        val snapshot = db.collection(&quot;users&quot;)&#10;            .whereIn(com.google.firebase.firestore.FieldPath.documentId(), userIds.take(9))&#10;            .get().await()&#10;        return snapshot.documents.mapNotNull { doc -&gt;&#10;            val data = doc.data ?: return@mapNotNull null&#10;            User(&#10;                uid = doc.id,&#10;                firstName = data[&quot;firstName&quot;] as? String ?: &quot;&quot;,&#10;                lastName = data[&quot;lastName&quot;] as? String ?: &quot;&quot;,&#10;                birthday = data[&quot;birthday&quot;] as? String,&#10;                imageUrl = (data[&quot;imageUrl&quot;] as? List&lt;String&gt;) ?: emptyList(),&#10;                avatarUrl = data[&quot;avatarUrl&quot;] as? String,&#10;                gender = data[&quot;gender&quot;] as? String,&#10;                job = data[&quot;job&quot;] as? String,&#10;                location = data[&quot;location&quot;] as? String,&#10;                description = data[&quot;description&quot;] as? String,&#10;                interests = (data[&quot;interests&quot;] as? List&lt;String&gt;) ?: emptyList(),&#10;                distance = (data[&quot;distance&quot;] as? Long)?.toInt()&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.firestore.ListenerRegistration&#10;import kotlinx.coroutines.tasks.await&#10;import com.example.dating.data.model.User&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;&#10;@Singleton&#10;class FavoriteRepository @Inject constructor() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    suspend fun addFavorite(likerId: String, likedId: String): Boolean {&#10;        val favorite = hashMapOf(&#10;            &quot;likerId&quot; to likerId,&#10;            &quot;likedId&quot; to likedId,&#10;            &quot;timestamp&quot; to Timestamp.now()&#10;        )&#10;        val query = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likerId&quot;, likerId)&#10;            .whereEqualTo(&quot;likedId&quot;, likedId)&#10;            .get().await()&#10;        return if (query.isEmpty) {&#10;            db.collection(&quot;favorites&quot;).add(favorite)&#10;            true&#10;        } else {&#10;            false&#10;        }&#10;    }&#10;&#10;    suspend fun isMatch(likerId: String, likedId: String): Boolean {&#10;        val matchQuery = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likerId&quot;, likedId)&#10;            .whereEqualTo(&quot;likedId&quot;, likerId)&#10;            .get().await()&#10;        return !matchQuery.isEmpty&#10;    }&#10;&#10;    suspend fun deleteFavorite(likerId: String, likedId: String) {&#10;        val query = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likerId&quot;, likerId)&#10;            .whereEqualTo(&quot;likedId&quot;, likedId)&#10;            .get().await()&#10;        for (doc in query.documents) {&#10;            db.collection(&quot;favorites&quot;).document(doc.id).delete().await()&#10;        }&#10;    }&#10;&#10;    fun listenFavorites(likedId: String): Flow&lt;List&lt;User&gt;&gt; = callbackFlow {&#10;        val query = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likedId&quot;, likedId)&#10;&#10;        val listener = query.addSnapshotListener { snapshot, e -&gt;&#10;            if (e != null || snapshot == null) return@addSnapshotListener&#10;&#10;            val likerIds = snapshot.documents.mapNotNull { it[&quot;likerId&quot;] as? String }&#10;            if (likerIds.isEmpty()) {&#10;                trySend(emptyList())&#10;                return@addSnapshotListener&#10;            }&#10;            db.collection(&quot;users&quot;)&#10;                .whereIn(com.google.firebase.firestore.FieldPath.documentId(), likerIds.take(9))&#10;                .get()&#10;                .addOnSuccessListener { userSnap -&gt;&#10;                    val users = userSnap.documents.mapNotNull { doc -&gt;&#10;                        val data = doc.data ?: return@mapNotNull null&#10;                        User(&#10;                            uid = doc.id,&#10;                            firstName = data[&quot;firstName&quot;] as? String ?: &quot;&quot;,&#10;                            lastName = data[&quot;lastName&quot;] as? String ?: &quot;&quot;,&#10;                            birthday = data[&quot;birthday&quot;] as? String,&#10;                            imageUrl = (data[&quot;imageUrl&quot;] as? List&lt;String&gt;) ?: emptyList(),&#10;                            avatarUrl = data[&quot;avatarUrl&quot;] as? String,&#10;                            gender = data[&quot;gender&quot;] as? String,&#10;                            job = data[&quot;job&quot;] as? String,&#10;                            location = data[&quot;location&quot;] as? String,&#10;                            description = data[&quot;description&quot;] as? String,&#10;                            interests = (data[&quot;interests&quot;] as? List&lt;String&gt;) ?: emptyList(),&#10;                            distance = (data[&quot;distance&quot;] as? Long)?.toInt()&#10;                        )&#10;                    }&#10;                    trySend(users)&#10;                }&#10;                .addOnFailureListener {&#10;                    trySend(emptyList())&#10;                }&#10;        }&#10;&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;&#10;    suspend fun getFavoritesByLikedId(likedId: String): List&lt;Map&lt;String, Any&gt;&gt; {&#10;        val query = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likedId&quot;, likedId)&#10;            .get().await()&#10;        return query.documents.mapNotNull { it.data }&#10;    }&#10;&#10;    suspend fun getUserProfilesByIds(userIds: List&lt;String&gt;): List&lt;User&gt; {&#10;        if (userIds.isEmpty()) return emptyList()&#10;        val snapshot = db.collection(&quot;users&quot;)&#10;            .whereIn(com.google.firebase.firestore.FieldPath.documentId(), userIds.take(9))&#10;            .get().await()&#10;        return snapshot.documents.mapNotNull { doc -&gt;&#10;            val data = doc.data ?: return@mapNotNull null&#10;            User(&#10;                uid = doc.id,&#10;                firstName = data[&quot;firstName&quot;] as? String ?: &quot;&quot;,&#10;                lastName = data[&quot;lastName&quot;] as? String ?: &quot;&quot;,&#10;                birthday = data[&quot;birthday&quot;] as? String,&#10;                imageUrl = (data[&quot;imageUrl&quot;] as? List&lt;String&gt;) ?: emptyList(),&#10;                avatarUrl = data[&quot;avatarUrl&quot;] as? String,&#10;                gender = data[&quot;gender&quot;] as? String,&#10;                job = data[&quot;job&quot;] as? String,&#10;                location = data[&quot;location&quot;] as? String,&#10;                description = data[&quot;description&quot;] as? String,&#10;                interests = (data[&quot;interests&quot;] as? List&lt;String&gt;) ?: emptyList(),&#10;                distance = (data[&quot;distance&quot;] as? Long)?.toInt()&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/FirebaseMessagesRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/FirebaseMessagesRepository.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.ConversationPreview&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.MessagePreview&#10;import com.google.android.gms.tasks.Tasks&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.firestore.Query&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import android.util.Log&#10;&#10;class FirebaseMessagesRepository @Inject constructor(&#10;    private val db: FirebaseFirestore&#10;) {&#10;    fun getConversations(currentUid: String): Flow&lt;List&lt;ConversationPreview&gt;&gt; = callbackFlow {&#10;        if (currentUid.isBlank()) {&#10;            trySend(emptyList())&#10;            awaitClose { }&#10;            return@callbackFlow&#10;        }&#10;&#10;        val query = db.collection(&quot;conversations&quot;)&#10;            .whereArrayContains(&quot;participants&quot;, currentUid)&#10;            .orderBy(&quot;lastTimestamp&quot;, Query.Direction.DESCENDING)&#10;&#10;        val listener = query.addSnapshotListener { snapshot, _ -&gt;&#10;            if (snapshot == null) {&#10;                trySend(emptyList())&#10;                return@addSnapshotListener&#10;            }&#10;&#10;            // launch coroutine để fetch peer users&#10;            kotlinx.coroutines.GlobalScope.launch {&#10;                val list = snapshot.documents.mapNotNull { doc -&gt;&#10;                    val data = doc.data ?: return@mapNotNull null&#10;                    val cid = doc.id&#10;                    val participants = data[&quot;participants&quot;] as List&lt;String&gt;&#10;                    val peerUid = participants.first { it != currentUid }&#10;&#10;                    val userSnap = db.collection(&quot;users&quot;).document(peerUid).get().await()&#10;                    val user = userSnap.toObject(User::class.java) ?: User(uid = peerUid)&#10;&#10;                    val lastMessage = (data[&quot;lastMessage&quot;] as? Map&lt;*, *&gt;)?.let { msgMap -&gt;&#10;                        MessagePreview(&#10;                            fromUid = msgMap[&quot;fromUid&quot;] as? String ?: &quot;&quot;,&#10;                            text = msgMap[&quot;text&quot;] as? String ?: &quot;&quot;,&#10;                            timestamp = (msgMap[&quot;timestamp&quot;] as? Number)?.toLong() ?: 0L&#10;                        )&#10;                    }&#10;&#10;                    val timestamp = when(val t = data[&quot;lastTimestamp&quot;]) {&#10;                        is Number -&gt; t.toLong()&#10;                        is Timestamp -&gt; t.toDate().time&#10;                        else -&gt; 0L&#10;                    }&#10;&#10;                    val unread = (data[&quot;unread&quot;] as? Map&lt;*, *&gt;)?.get(currentUid) as? Long ?: 0L&#10;                    val typing = (data[&quot;typing&quot;] as? Map&lt;*, *&gt;)?.get(peerUid) as? Boolean ?: false&#10;&#10;                    ConversationPreview(&#10;                        currentUid = currentUid,&#10;                        id = cid,&#10;                        peer = user,&#10;                        lastMessage = lastMessage,&#10;                        lastMessageTimestamp = timestamp,&#10;                        timeAgo = formatTimeAgo(timestamp),&#10;                        unreadCount = unread.toInt(),&#10;                        isTyping = typing&#10;                    )&#10;                }&#10;                trySend(list)&#10;            }&#10;        }&#10;&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;&#10;    private fun formatTimeAgo(ms: Long): String {&#10;        val now = System.currentTimeMillis()&#10;        android.util.Log.d(&quot;formatTimeAgo&quot;, &quot;now: $now, ms: $ms&quot;)&#10;        val diff = now - ms&#10;&#10;        val seconds = diff / 1000&#10;        val minutes = seconds / 60&#10;        val hours = minutes / 60&#10;        val days = hours / 24&#10;        val weeks = days / 7&#10;        val months = days / 30&#10;        val years = days / 365&#10;&#10;        return when {&#10;            seconds &lt; 60 -&gt; &quot;Just now&quot;&#10;            minutes &lt; 60 -&gt; &quot;$minutes min&quot;&#10;            hours &lt; 24 -&gt; &quot;$hours hour${if (hours &gt; 1) &quot;s&quot; else &quot;&quot;}&quot;&#10;            days &lt; 7 -&gt; &quot;$days day${if (days &gt; 1) &quot;s&quot; else &quot;&quot;}&quot;&#10;            weeks &lt; 4 -&gt; &quot;$weeks week${if (weeks &gt; 1) &quot;s&quot; else &quot;&quot;}&quot;&#10;            months &lt; 12 -&gt; &quot;$months month${if (months &gt; 1) &quot;s&quot; else &quot;&quot;}&quot;&#10;            else -&gt; &quot;$years year${if (years &gt; 1) &quot;s&quot; else &quot;&quot;}&quot;&#10;        }&#10;    }&#10;&#10;&#10;    suspend fun createConversation(userId1: String, userId2: String) {&#10;        // Check for existing conversation with both participants&#10;        val existing = db.collection(&quot;conversations&quot;)&#10;            .whereEqualTo(&quot;participants&quot;, listOf(userId1, userId2))&#10;            .get().await()&#10;        if (!existing.isEmpty) return // Already exists, do not add&#10;        val existingReverse = db.collection(&quot;conversations&quot;)&#10;            .whereEqualTo(&quot;participants&quot;, listOf(userId2, userId1))&#10;            .get().await()&#10;        if (!existingReverse.isEmpty) return // Already exists in reverse order&#10;&#10;        val conversationData = hashMapOf(&#10;            &quot;participants&quot; to listOf(userId1, userId2),&#10;            &quot;lastMessage&quot; to &quot;&quot;,&#10;            &quot;lastTimestamp&quot; to System.currentTimeMillis(),&#10;            &quot;unread&quot; to mapOf(userId1 to 0, userId2 to 0)&#10;        )&#10;        db.collection(&quot;conversations&quot;).add(conversationData).await()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.ConversationPreview&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.MessagePreview&#10;import com.google.android.gms.tasks.Tasks&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.firestore.Query&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import android.util.Log&#10;import kotlinx.coroutines.launch&#10;&#10;class FirebaseMessagesRepository @Inject constructor(&#10;    private val db: FirebaseFirestore&#10;) {&#10;    fun getConversations(currentUid: String): Flow&lt;List&lt;ConversationPreview&gt;&gt; = callbackFlow {&#10;        if (currentUid.isBlank()) {&#10;            trySend(emptyList())&#10;            awaitClose { }&#10;            return@callbackFlow&#10;        }&#10;&#10;        val query = db.collection(&quot;conversations&quot;)&#10;            .whereArrayContains(&quot;participants&quot;, currentUid)&#10;            .orderBy(&quot;lastTimestamp&quot;, Query.Direction.DESCENDING)&#10;&#10;        val listener = query.addSnapshotListener { snapshot, _ -&gt;&#10;            if (snapshot == null) {&#10;                trySend(emptyList())&#10;                return@addSnapshotListener&#10;            }&#10;&#10;            // launch coroutine để fetch peer users&#10;            kotlinx.coroutines.GlobalScope.launch {&#10;                val list = snapshot.documents.mapNotNull { doc -&gt;&#10;                    val data = doc.data ?: return@mapNotNull null&#10;                    val cid = doc.id&#10;                    val participants = data[&quot;participants&quot;] as List&lt;String&gt;&#10;                    val peerUid = participants.first { it != currentUid }&#10;&#10;                    val userSnap = db.collection(&quot;users&quot;).document(peerUid).get().await()&#10;                    val user = userSnap.toObject(User::class.java) ?: User(uid = peerUid)&#10;&#10;                    val lastMessage = (data[&quot;lastMessage&quot;] as? Map&lt;*, *&gt;)?.let { msgMap -&gt;&#10;                        MessagePreview(&#10;                            fromUid = msgMap[&quot;fromUid&quot;] as? String ?: &quot;&quot;,&#10;                            text = msgMap[&quot;text&quot;] as? String ?: &quot;&quot;,&#10;                            timestamp = (msgMap[&quot;timestamp&quot;] as? Number)?.toLong() ?: 0L&#10;                        )&#10;                    }&#10;&#10;                    val timestamp = when(val t = data[&quot;lastTimestamp&quot;]) {&#10;                        is Number -&gt; t.toLong()&#10;                        is Timestamp -&gt; t.toDate().time&#10;                        else -&gt; 0L&#10;                    }&#10;&#10;                    val unread = (data[&quot;unread&quot;] as? Map&lt;*, *&gt;)?.get(currentUid) as? Long ?: 0L&#10;                    val typing = (data[&quot;typing&quot;] as? Map&lt;*, *&gt;)?.get(peerUid) as? Boolean ?: false&#10;&#10;                    ConversationPreview(&#10;                        currentUid = currentUid,&#10;                        id = cid,&#10;                        peer = user,&#10;                        lastMessage = lastMessage,&#10;                        lastMessageTimestamp = timestamp,&#10;                        timeAgo = formatTimeAgo(timestamp),&#10;                        unreadCount = unread.toInt(),&#10;                        isTyping = typing&#10;                    )&#10;                }&#10;                trySend(list)&#10;            }&#10;        }&#10;&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;&#10;    private fun formatTimeAgo(ms: Long): String {&#10;        val now = System.currentTimeMillis()&#10;        android.util.Log.d(&quot;formatTimeAgo&quot;, &quot;now: $now, ms: $ms&quot;)&#10;        val diff = now - ms&#10;&#10;        val seconds = diff / 1000&#10;        val minutes = seconds / 60&#10;        val hours = minutes / 60&#10;        val days = hours / 24&#10;        val weeks = days / 7&#10;        val months = days / 30&#10;        val years = days / 365&#10;&#10;        return when {&#10;            seconds &lt; 60 -&gt; &quot;Just now&quot;&#10;            minutes &lt; 60 -&gt; &quot;$minutes min&quot;&#10;            hours &lt; 24 -&gt; &quot;$hours hour${if (hours &gt; 1) &quot;s&quot; else &quot;&quot;}&quot;&#10;            days &lt; 7 -&gt; &quot;$days day${if (days &gt; 1) &quot;s&quot; else &quot;&quot;}&quot;&#10;            weeks &lt; 4 -&gt; &quot;$weeks week${if (weeks &gt; 1) &quot;s&quot; else &quot;&quot;}&quot;&#10;            months &lt; 12 -&gt; &quot;$months month${if (months &gt; 1) &quot;s&quot; else &quot;&quot;}&quot;&#10;            else -&gt; &quot;$years year${if (years &gt; 1) &quot;s&quot; else &quot;&quot;}&quot;&#10;        }&#10;    }&#10;&#10;&#10;    suspend fun createConversation(userId1: String, userId2: String) {&#10;        // Check for existing conversation with both participants&#10;        val existing = db.collection(&quot;conversations&quot;)&#10;            .whereEqualTo(&quot;participants&quot;, listOf(userId1, userId2))&#10;            .get().await()&#10;        if (!existing.isEmpty) return // Already exists, do not add&#10;        val existingReverse = db.collection(&quot;conversations&quot;)&#10;            .whereEqualTo(&quot;participants&quot;, listOf(userId2, userId1))&#10;            .get().await()&#10;        if (!existingReverse.isEmpty) return // Already exists in reverse order&#10;&#10;        val conversationData = hashMapOf(&#10;            &quot;participants&quot; to listOf(userId1, userId2),&#10;            &quot;lastMessage&quot; to &quot;&quot;,&#10;            &quot;lastTimestamp&quot; to System.currentTimeMillis(),&#10;            &quot;unread&quot; to mapOf(userId1 to 0, userId2 to 0)&#10;        )&#10;        db.collection(&quot;conversations&quot;).add(conversationData).await()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepository.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;&#10;&#10;class UserRepository @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;)  {&#10;&#10;    fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        android.util.Log.d(&quot;UserRepository&quot;, &quot;getUser: docRef=$docRef &quot; +&#10;                &quot;for uid=$uid&quot;)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            val user = snapshot?.toObject(User::class.java)&#10;            // Ensure uid and imageUrl are set from document id and default if missing&#10;            val userWithUid = user?.copy(&#10;                uid = snapshot.id,&#10;                imageUrl = user.imageUrl ?: emptyList()&#10;            )&#10;            android.util.Log.d(&quot;UserRepository&quot;, &quot;getUser: uid=$uid, user=$userWithUid&quot;)&#10;            trySend(userWithUid)&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    suspend fun updateUser(user: User): Resource&lt;Unit&gt; {&#10;        return try {&#10;            android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;updateProfile called with: $user&quot;)&#10;            firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateGender(uid: String, gender: String): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&quot;gender&quot;, gender).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateInterests(uid: String, interests: List&lt;String&gt;): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&quot;interests&quot;, interests).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateJobLocationDescription(uid: String, job: String?, location: String?, description: String?): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&#10;                mapOf(&#10;                    &quot;job&quot; to job,&#10;                    &quot;location&quot; to location,&#10;                    &quot;description&quot; to description&#10;                )&#10;            ).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun uploadAvatar(uid: String, uri: android.net.Uri): String {&#10;        // TODO: Implement Firebase Storage upload and return the URL&#10;        return &quot;&quot;&#10;    }&#10;&#10;    suspend fun createUser(user: User): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;&#10;&#10;class UserRepository @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;)  {&#10;&#10;    fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        android.util.Log.d(&quot;UserRepository&quot;, &quot;getUser: docRef=$docRef &quot; +&#10;                &quot;for uid=$uid&quot;)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            val user = snapshot?.toObject(User::class.java)&#10;            // Ensure uid and imageUrl are set from document id and default if missing&#10;            val userWithUid = user?.copy(&#10;                uid = snapshot.id,&#10;                imageUrl = user.imageUrl ?: emptyList()&#10;            )&#10;            android.util.Log.d(&quot;UserRepository&quot;, &quot;getUser: uid=$uid, user=$userWithUid&quot;)&#10;            trySend(userWithUid)&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    suspend fun updateUser(user: User): Resource&lt;Unit&gt; {&#10;        return try {&#10;            android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;updateProfile called with: $user&quot;)&#10;            firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateGender(uid: String, gender: String): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&quot;gender&quot;, gender).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateInterests(uid: String, interests: List&lt;String&gt;): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&quot;interests&quot;, interests).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateJobLocationDescription(uid: String, job: String?, location: String?, description: String?): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&#10;                mapOf(&#10;                    &quot;job&quot; to job,&#10;                    &quot;location&quot; to location,&#10;                    &quot;description&quot; to description&#10;                )&#10;            ).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun uploadAvatar(uid: String, uri: android.net.Uri): String {&#10;        // TODO: Implement Firebase Storage upload and return the URL&#10;        return &quot;&quot;&#10;    }&#10;&#10;    suspend fun createUser(user: User): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateAvatarUrl(uid: String, avatarUrl: String) {&#10;        firestore.collection(&quot;users&quot;).document(uid)&#10;            .update(&quot;avatarUrl&quot;, avatarUrl)&#10;            .await()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepositoryImpl.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;) : UserRepository {&#10;&#10;    fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            offer(snapshot?.toObject(User::class.java))&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    override suspend fun updateUser(user: User) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun saveProfile(&#10;        userId: String,&#10;        firstName: String,&#10;        lastName: String,&#10;        birthday: String?,&#10;        imageUrl: String?&#10;    ): Resource&lt;Unit&gt; {&#10;        return try {&#10;            val userMap = hashMapOf(&#10;                &quot;firstName&quot; to firstName,&#10;                &quot;lastName&quot; to lastName,&#10;                &quot;birthday&quot; to birthday,&#10;                &quot;imageUrl&quot; to imageUrl&#10;            )&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .set(userMap)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateGender(userId: String, gender: String): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;gender&quot;, gender)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateInterests(userId: String, interests: List&lt;String&gt;): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;interests&quot;, interests)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateJobLocationDescription(&#10;        userId: String,&#10;        job: String?,&#10;        location: String?,&#10;        description: String?&#10;    ): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(mapOf(&#10;                    &quot;job&quot; to job,&#10;                    &quot;location&quot; to location,&#10;                    &quot;description&quot; to description&#10;                ))&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;) : UserRepository {&#10;&#10;    override fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            trySend(snapshot?.toObject(User::class.java))&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    override suspend fun updateUser(user: User) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun saveProfile(&#10;        user: User&#10;    ) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun updateGender(uid: String, gender: String) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&quot;gender&quot;, gender).await()&#10;    }&#10;&#10;    override suspend fun updateInterests(uid: String, interests: List&lt;String&gt;) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&quot;interests&quot;, interests).await()&#10;    }&#10;&#10;    override suspend fun updateJobLocationDescription(uid: String, job: String?, location: String?, description: String?) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&#10;            mapOf(&#10;                &quot;job&quot; to job,&#10;                &quot;location&quot; to location,&#10;                &quot;description&quot; to description&#10;            )&#10;        ).await()&#10;    }&#10;&#10;    override suspend fun uploadAvatar(uid: String, uri: android.net.Uri): String {&#10;        // TODO: Implement Firebase Storage upload and return the URL&#10;        return &quot;&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/chat/MessagesScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/chat/MessagesScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.chat&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import coil.compose.AsyncImage&#10;import com.example.dating.data.model.ConversationPreview&#10;import com.example.dating.data.model.User&#10;import com.example.dating.navigation.Screen&#10;import com.example.dating.ui.components.*&#10;import com.example.dating.ui.theme.AppColors&#10;import com.example.dating.viewmodel.MessagesViewModel&#10;import com.example.dating.viewmodel.StoryViewModel&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MessagesScreen(&#10;    navController: NavController,&#10;    viewModel: MessagesViewModel = hiltViewModel(),&#10;    storyViewModel: StoryViewModel = hiltViewModel() // &lt;-- Add StoryViewModel&#10;) {&#10;    val uiState by viewModel.uiState.collectAsState()&#10;    val filterState by viewModel.filterState.collectAsState()&#10;    val sheetState = rememberModalBottomSheetState()&#10;    var showFilterSheet by remember { mutableStateOf(false) }&#10;&#10;    LaunchedEffect(Unit) {&#10;        &#10;        viewModel.loadMessages()&#10;    }&#10;    &#10;    Scaffold(bottomBar = { BottomNavigationBar(navController, 2) }) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(AppColors.MainBackground)&#10;                .padding(paddingValues)&#10;        ) {&#10;            MessagesHeader(onFilterClick = { showFilterSheet = true })&#10;&#10;            when {&#10;                uiState.isLoading -&gt; Box(Modifier.fillMaxSize(), Alignment.Center) {&#10;                    CircularProgressIndicator()&#10;                }&#10;&#10;                uiState.error != null -&gt; Box(Modifier.fillMaxSize(), Alignment.Center) {&#10;                    Text(uiState.error ?: &quot;Unknown error&quot;, color = Color.Red)&#10;                }&#10;&#10;                else -&gt; {&#10;                    // Activities&#10;                    Text(&#10;                        &quot;Activities&quot;,&#10;                        modifier = Modifier.padding(start = 20.dp, top = 8.dp, end = 20.dp),&#10;                        fontWeight = FontWeight.SemiBold&#10;                    )&#10;                    LazyRow(&#10;                        modifier = Modifier.padding(horizontal = 12.dp, vertical = 4.dp),&#10;                        contentPadding = PaddingValues(horizontal = 8.dp)&#10;                    ) {&#10;                        items(uiState.messages) { conversation -&gt;&#10;                            StoryBubble(&#10;                                user = conversation.peer,&#10;                                navController = navController,&#10;                                storyViewModel = storyViewModel&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Spacer(Modifier.height(8.dp))&#10;&#10;                    // White rounded container for the Messages section&#10;                    MessagesSectionCard(&#10;                        messages = uiState.messages,&#10;                        onItemClick = { c -&gt;&#10;                            navController.navigate(&#10;                                Screen.ChatDetail.createRoute(c.id)&#10;                            )&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Filter sheet&#10;        if (showFilterSheet) {&#10;            ModalBottomSheet(&#10;                onDismissRequest = { showFilterSheet = false },&#10;                sheetState = sheetState,&#10;                shape = RoundedCornerShape(topStart = 28.dp, topEnd = 28.dp),&#10;                containerColor = Color.White&#10;            ) {&#10;                MessagesFilterSheet(&#10;                    state = filterState,&#10;                    onChange = { viewModel.updateFilter(it) },&#10;                    onClear = {&#10;                        viewModel.clearFilter()&#10;                        showFilterSheet = false&#10;                    },&#10;                    onApply = {&#10;                        viewModel.applyFilter()&#10;                        showFilterSheet = false&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun MessagesSectionCard(&#10;    messages: List&lt;ConversationPreview&gt;,&#10;    onItemClick: (ConversationPreview) -&gt; Unit&#10;) {&#10;    val cardHPad = 20.dp&#10;    val avatar = 56.dp&#10;    val gap = 12.dp&#10;    val startIndent = cardHPad + avatar + gap&#10;&#10;    Card(&#10;        shape = RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp),&#10;        colors = CardDefaults.cardColors(containerColor = Color.White),&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        if (messages.isEmpty()) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(24.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.Center&#10;            ) {&#10;                Text(&#10;                    text = &quot;No Messages Yet&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(Modifier.height(8.dp))&#10;                Text(&#10;                    text = &quot;When you match and chat with others,\nyour messages will show up here&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = Color.Gray,&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;        } else {&#10;            LazyColumn(&#10;                contentPadding = PaddingValues(&#10;                    start = cardHPad, end = cardHPad, top = 16.dp, bottom = 90.dp&#10;                )&#10;            ) {&#10;                // Header inside the white container&#10;                item {&#10;                    Text(&#10;                        text = &quot;Messages&quot;,&#10;                        style = MaterialTheme.typography.titleLarge.copy(fontWeight = FontWeight.SemiBold),&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;                }&#10;&#10;                items(messages) { conversation -&gt;&#10;                    MessageItem(&#10;                        item = conversation,&#10;                        onClick = { onItemClick(conversation) }&#10;                    )&#10;                    InsetDivider(start = startIndent)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun StoryBubble(&#10;    user: User,&#10;    navController: NavController,&#10;    storyViewModel: StoryViewModel&#10;) {&#10;    val storiesStateFlow = remember { storyViewModel.observeUserStories(user.uid) }&#10;    val stories by storiesStateFlow.collectAsState()&#10;    val hasStory = stories.any { it.expiresAt ?: 0 &gt; System.currentTimeMillis() }&#10;&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        modifier = Modifier&#10;            .padding(8.dp)&#10;            .clickable(enabled = hasStory) {&#10;                if (hasStory) {&#10;                    // Use navController.navigate with a defined Screen route for story viewing&#10;                    navController.navigate(&quot;story_viewer/${user.uid}&quot;)&#10;                }&#10;            }&#10;    ) {&#10;        AsyncImage(&#10;            model = user.avatarUrl ?: &quot;https://i.pravatar.cc/150?u=${user.uid}&quot;,&#10;            contentDescription = null,&#10;            modifier = Modifier&#10;                .size(60.dp)&#10;                .clip(CircleShape)&#10;                .border(&#10;                    3.dp,&#10;                    if (hasStory) AppColors.Text_Pink else Color.LightGray,&#10;                    CircleShape&#10;                )&#10;        )&#10;        Text(user.firstName, fontSize = 12.sp)&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MessageItem(item: ConversationPreview, onClick: () -&gt; Unit = {}) {&#10;    android.util.Log.d(&quot;MessageItem&quot;, item.toString())&#10;    Row(&#10;        Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick)&#10;            .padding(vertical = 12.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        AsyncImage(&#10;            model = item.peer.avatarUrl ?: &quot;https://i.pravatar.cc/150?u=${item.peer.uid}&quot;,&#10;            contentDescription = null,&#10;            modifier = Modifier&#10;                .size(56.dp)&#10;                .clip(CircleShape)&#10;        )&#10;&#10;        Spacer(Modifier.width(12.dp))&#10;&#10;        Column(Modifier.weight(1f)) {&#10;            Text(&#10;                text = &quot;${item.peer.firstName} ${item.peer.lastName}&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            val senderName = when (item.lastMessage?.fromUid) {&#10;                null -&gt; &quot;&quot;&#10;                item.currentUid -&gt; &quot;You&quot;&#10;                else -&gt; &quot;${item.peer.firstName} ${item.peer.lastName}&quot;&#10;            }&#10;            val messageText = item.lastMessage?.text?.takeIf { it.isNotBlank() } ?: &quot;No messages yet&quot;&#10;            Text(&#10;                text = if (item.lastMessage != null) &quot;$senderName: $messageText&quot; else messageText,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = Color.Gray,&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;        }&#10;&#10;        if (item.timeAgo.isNotEmpty()) {&#10;            Text(&#10;                text = item.timeAgo,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;/** Divider bắt đầu từ chỗ text (không chạy dưới avatar) */&#10;@Composable&#10;fun InsetDivider(start: Dp, modifier: Modifier = Modifier) {&#10;    Divider(&#10;        modifier = modifier.padding(start = start),&#10;        thickness = 0.6.dp,&#10;        color = Color(0x1A000000) // đen 10% cho nhẹ nhàng&#10;    )&#10;}&#10;&#10;/** In StoryViewModel.kt, add:&#10;@Composable&#10;fun StoryViewModel.observeUserStories(uid: String): State&lt;List&lt;com.example.dating.data.model.Story&gt;&gt; {&#10;    val flow = repo.observeMyStories(uid)&#10;    return flow.collectAsState(initial = emptyList())&#10;}&#10;*/&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.chat&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import coil.compose.AsyncImage&#10;import com.example.dating.data.model.ConversationPreview&#10;import com.example.dating.data.model.User&#10;import com.example.dating.navigation.Screen&#10;import com.example.dating.ui.components.*&#10;import com.example.dating.ui.theme.AppColors&#10;import com.example.dating.viewmodel.MessagesViewModel&#10;import com.example.dating.viewmodel.StoryViewModel&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MessagesScreen(&#10;    navController: NavController,&#10;    viewModel: MessagesViewModel = hiltViewModel(),&#10;    storyViewModel: StoryViewModel = hiltViewModel() // &lt;-- Add StoryViewModel&#10;) {&#10;    val uiState by viewModel.uiState.collectAsState()&#10;    val filterState by viewModel.filterState.collectAsState()&#10;    val sheetState = rememberModalBottomSheetState()&#10;    var showFilterSheet by remember { mutableStateOf(false) }&#10;&#10;    LaunchedEffect(Unit) {&#10;        viewModel.loadMessages()&#10;    }&#10;    &#10;    Scaffold(bottomBar = { BottomNavigationBar(navController, 2) }) { paddingValues -&gt;&#10;        LaunchedEffect(Unit) {&#10;            viewModel.loadMessages()&#10;        }&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(AppColors.MainBackground)&#10;                .padding(paddingValues)&#10;        ) {&#10;            MessagesHeader(onFilterClick = { showFilterSheet = true })&#10;&#10;            when {&#10;                uiState.isLoading -&gt; Box(Modifier.fillMaxSize(), Alignment.Center) {&#10;                    CircularProgressIndicator()&#10;                }&#10;&#10;                uiState.error != null -&gt; Box(Modifier.fillMaxSize(), Alignment.Center) {&#10;                    Text(uiState.error ?: &quot;Unknown error&quot;, color = Color.Red)&#10;                }&#10;&#10;                else -&gt; {&#10;                    // Activities&#10;                    Text(&#10;                        &quot;Activities&quot;,&#10;                        modifier = Modifier.padding(start = 20.dp, top = 8.dp, end = 20.dp),&#10;                        fontWeight = FontWeight.SemiBold&#10;                    )&#10;                    LazyRow(&#10;                        modifier = Modifier.padding(horizontal = 12.dp, vertical = 4.dp),&#10;                        contentPadding = PaddingValues(horizontal = 8.dp)&#10;                    ) {&#10;                        items(uiState.messages) { conversation -&gt;&#10;                            StoryBubble(&#10;                                user = conversation.peer,&#10;                                navController = navController,&#10;                                storyViewModel = storyViewModel&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Spacer(Modifier.height(8.dp))&#10;&#10;                    // White rounded container for the Messages section&#10;                    MessagesSectionCard(&#10;                        messages = uiState.messages,&#10;                        onItemClick = { c -&gt;&#10;                            navController.navigate(&#10;                                Screen.ChatDetail.createRoute(c.id)&#10;                            )&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Filter sheet&#10;        if (showFilterSheet) {&#10;            ModalBottomSheet(&#10;                onDismissRequest = { showFilterSheet = false },&#10;                sheetState = sheetState,&#10;                shape = RoundedCornerShape(topStart = 28.dp, topEnd = 28.dp),&#10;                containerColor = Color.White&#10;            ) {&#10;                MessagesFilterSheet(&#10;                    state = filterState,&#10;                    onChange = { viewModel.updateFilter(it) },&#10;                    onClear = {&#10;                        viewModel.clearFilter()&#10;                        showFilterSheet = false&#10;                    },&#10;                    onApply = {&#10;                        viewModel.applyFilter()&#10;                        showFilterSheet = false&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun MessagesSectionCard(&#10;    messages: List&lt;ConversationPreview&gt;,&#10;    onItemClick: (ConversationPreview) -&gt; Unit&#10;) {&#10;    val cardHPad = 20.dp&#10;    val avatar = 56.dp&#10;    val gap = 12.dp&#10;    val startIndent = cardHPad + avatar + gap&#10;&#10;    Card(&#10;        shape = RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp),&#10;        colors = CardDefaults.cardColors(containerColor = Color.White),&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        if (messages.isEmpty()) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(24.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.Center&#10;            ) {&#10;                Text(&#10;                    text = &quot;No Messages Yet&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(Modifier.height(8.dp))&#10;                Text(&#10;                    text = &quot;When you match and chat with others,\nyour messages will show up here&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = Color.Gray,&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;        } else {&#10;            LazyColumn(&#10;                contentPadding = PaddingValues(&#10;                    start = cardHPad, end = cardHPad, top = 16.dp, bottom = 90.dp&#10;                )&#10;            ) {&#10;                // Header inside the white container&#10;                item {&#10;                    Text(&#10;                        text = &quot;Messages&quot;,&#10;                        style = MaterialTheme.typography.titleLarge.copy(fontWeight = FontWeight.SemiBold),&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;                }&#10;&#10;                items(messages) { conversation -&gt;&#10;                    MessageItem(&#10;                        item = conversation,&#10;                        onClick = { onItemClick(conversation) }&#10;                    )&#10;                    InsetDivider(start = startIndent)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun StoryBubble(&#10;    user: User,&#10;    navController: NavController,&#10;    storyViewModel: StoryViewModel&#10;) {&#10;    val storiesStateFlow = remember { storyViewModel.observeUserStories(user.uid) }&#10;    val stories by storiesStateFlow.collectAsState()&#10;    val hasStory = stories.any { it.expiresAt ?: 0 &gt; System.currentTimeMillis() }&#10;&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        modifier = Modifier&#10;            .padding(8.dp)&#10;            .clickable(enabled = hasStory) {&#10;                if (hasStory) {&#10;                    // Use navController.navigate with a defined Screen route for story viewing&#10;                    navController.navigate(&quot;story_viewer/${user.uid}&quot;)&#10;                }&#10;            }&#10;    ) {&#10;        AsyncImage(&#10;            model = user.avatarUrl ?: &quot;https://i.pravatar.cc/150?u=${user.uid}&quot;,&#10;            contentDescription = null,&#10;            modifier = Modifier&#10;                .size(60.dp)&#10;                .clip(CircleShape)&#10;                .border(&#10;                    3.dp,&#10;                    if (hasStory) AppColors.Text_Pink else Color.LightGray,&#10;                    CircleShape&#10;                )&#10;        )&#10;        Text(user.firstName, fontSize = 12.sp)&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MessageItem(item: ConversationPreview, onClick: () -&gt; Unit = {}) {&#10;    android.util.Log.d(&quot;MessageItem&quot;, item.toString())&#10;    Row(&#10;        Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick)&#10;            .padding(vertical = 12.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        AsyncImage(&#10;            model = item.peer.avatarUrl ?: &quot;https://i.pravatar.cc/150?u=${item.peer.uid}&quot;,&#10;            contentDescription = null,&#10;            modifier = Modifier&#10;                .size(56.dp)&#10;                .clip(CircleShape)&#10;        )&#10;&#10;        Spacer(Modifier.width(12.dp))&#10;&#10;        Column(Modifier.weight(1f)) {&#10;            Text(&#10;                text = &quot;${item.peer.firstName} ${item.peer.lastName}&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            val senderName = when (item.lastMessage?.fromUid) {&#10;                null -&gt; &quot;&quot;&#10;                item.currentUid -&gt; &quot;You&quot;&#10;                else -&gt; &quot;${item.peer.firstName} ${item.peer.lastName}&quot;&#10;            }&#10;            val messageText = item.lastMessage?.text?.takeIf { it.isNotBlank() } ?: &quot;No messages yet&quot;&#10;            Text(&#10;                text = if (item.lastMessage != null) &quot;$senderName: $messageText&quot; else messageText,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = Color.Gray,&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;        }&#10;&#10;        if (item.timeAgo.isNotEmpty()) {&#10;            Text(&#10;                text = item.timeAgo,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;/** Divider bắt đầu từ chỗ text (không chạy dưới avatar) */&#10;@Composable&#10;fun InsetDivider(start: Dp, modifier: Modifier = Modifier) {&#10;    Divider(&#10;        modifier = modifier.padding(start = start),&#10;        thickness = 0.6.dp,&#10;        color = Color(0x1A000000) // đen 10% cho nhẹ nhàng&#10;    )&#10;}&#10;&#10;/** In StoryViewModel.kt, add:&#10;@Composable&#10;fun StoryViewModel.observeUserStories(uid: String): State&lt;List&lt;com.example.dating.data.model.Story&gt;&gt; {&#10;    val flow = repo.observeMyStories(uid)&#10;    return flow.collectAsState(initial = emptyList())&#10;}&#10;*/" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/FilterDialog.kt.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/FilterDialog.kt.kt" />
              <option name="originalContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FilterScreen(navController: NavController) {&#10;    // State variables&#10;    var selectedInterest by remember { mutableStateOf(&quot;Girls&quot;) }&#10;    var location by remember { mutableStateOf(&quot;Chicago, USA&quot;) }&#10;    var distance by remember { mutableFloatStateOf(40f) }&#10;    var ageRange by remember { mutableStateOf(20f..28f) }&#10;&#10;    // Bottom sheet or dialog content&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .wrapContentHeight()&#10;            .clip(RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp))&#10;            .background(Color.White)&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        // Notch&#10;        Box(&#10;            modifier = Modifier&#10;                .width(40.dp)&#10;                .height(4.dp)&#10;                .background(Color.Gray.copy(alpha = 0.5f), CircleShape)&#10;                .align(Alignment.CenterHorizontally)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Title and Clear&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Filters&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.Black&#10;            )&#10;            TextButton(onClick = { /* TODO: Clear filters */ }) {&#10;                Text(&#10;                    text = &quot;Clear&quot;,&#10;                    color = Color(0xFFFF69B4), // Pink&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Interested in&#10;        Text(&#10;            text = &quot;Interested in&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        SegmentedButtonRow(modifier = Modifier.fillMaxWidth()) {&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Girls&quot;,&#10;                onClick = { selectedInterest = &quot;Girls&quot; },&#10;                shape = RoundedCornerShape(topStart = 8.dp, bottomStart = 8.dp)&#10;            ) {&#10;                Text(&quot;Girls&quot;)&#10;            }&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Boys&quot;,&#10;                onClick = { selectedInterest = &quot;Boys&quot; },&#10;                shape = RoundedCornerShape(0.dp)&#10;            ) {&#10;                Text(&quot;Boys&quot;)&#10;            }&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Both&quot;,&#10;                onClick = { selectedInterest = &quot;Both&quot; },&#10;                shape = RoundedCornerShape(topEnd = 8.dp, bottomEnd = 8.dp)&#10;            ) {&#10;                Text(&quot;Both&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Location&#10;        Text(&#10;            text = &quot;Location&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        OutlinedTextField(&#10;            value = location,&#10;            onValueChange = { /* Read-only, tap to select */ },&#10;            readOnly = true,&#10;            modifier = Modifier.fillMaxWidth(),&#10;            trailingIcon = {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowForward,&#10;                    contentDescription = &quot;Select location&quot;,&#10;                    tint = Color(0xFFFF0000) // Red&#10;                )&#10;            },&#10;            singleLine = true,&#10;            interactionSource = remember { MutableInteractionSource() }.also { interactionSource -&gt;&#10;                // TODO: Handle click to open location selector&#10;            }&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Distance&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;Distance&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;            Text(&#10;                text = &quot;${distance.toInt()}km&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;        Slider(&#10;            value = distance,&#10;            onValueChange = { distance = it },&#10;            valueRange = 0f..100f, // Assuming max 100km&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = SliderDefaults.colors(&#10;                thumbColor = Color(0xFFBB86FC), // Purple&#10;                activeTrackColor = Color(0xFFBB86FC),&#10;                inactiveTrackColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Age&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;Age&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;            Text(&#10;                text = &quot;${ageRange.start.toInt()}-${ageRange.endInclusive.toInt()}&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;        RangeSlider(&#10;            value = ageRange,&#10;            onValueChange = { ageRange = it },&#10;            valueRange = 18f..100f, // Assuming age range&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = SliderDefaults.colors(&#10;                thumbColor = Color(0xFFBB86FC), // Purple&#10;                activeTrackColor = Color(0xFFBB86FC),&#10;                inactiveTrackColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // Continue button&#10;        Button(&#10;            onClick = { /* TODO: Apply filters and navigate */ },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(48.dp),&#10;            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFBB86FC).copy(alpha = 0.2f)), // Light purple&#10;            shape = RoundedCornerShape(24.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Continue&quot;,&#10;                color = Color.Black,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FilterDialog(&#10;    show: Boolean,&#10;    onDismiss: () -&gt; Unit,&#10;    onApply: (selectedInterest: String, location: String, distance: Float, ageRange: ClosedFloatingPointRange&lt;Float&gt;) -&gt; Unit&#10;) {&#10;    if (!show) return&#10;    var selectedInterest by remember { mutableStateOf(&quot;Girls&quot;) }&#10;    var location by remember { mutableStateOf(&quot;Chicago, USA&quot;) }&#10;    var distance by remember { mutableStateOf(40f) }&#10;    var ageRange by remember { mutableStateOf(20f..28f) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    onApply(selectedInterest, location, distance, ageRange)&#10;                    onDismiss()&#10;                },&#10;                modifier = Modifier.fillMaxWidth().height(48.dp),&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFBB86FC).copy(alpha = 0.2f)),&#10;                shape = RoundedCornerShape(24.dp)&#10;            ) {&#10;                Text(&quot;Continue&quot;, color = Color.Black, fontSize = 16.sp, fontWeight = FontWeight.Bold)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;, color = Color.Gray)&#10;            }&#10;        },&#10;        title = {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&quot;Filters&quot;, fontSize = 20.sp, fontWeight = FontWeight.Bold, color = Color.Black)&#10;                TextButton(onClick = {&#10;                    selectedInterest = &quot;Girls&quot;&#10;                    location = &quot;Chicago, USA&quot;&#10;                    distance = 40f&#10;                    ageRange = 20f..28f&#10;                }) {&#10;                    Text(&quot;Clear&quot;, color = Color(0xFFFF69B4), fontSize = 16.sp)&#10;                }&#10;            }&#10;        },&#10;        text = {&#10;            Column(modifier = Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {&#10;                // Interested in&#10;                Text(&quot;Interested in&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.Center) {&#10;                    FilterSegmentButton(&quot;Girls&quot;, selectedInterest == &quot;Girls&quot;) { selectedInterest = &quot;Girls&quot; }&#10;                    FilterSegmentButton(&quot;Boys&quot;, selectedInterest == &quot;Boys&quot;) { selectedInterest = &quot;Boys&quot; }&#10;                    FilterSegmentButton(&quot;Both&quot;, selectedInterest == &quot;Both&quot;) { selectedInterest = &quot;Both&quot; }&#10;                }&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Location&#10;                Text(&quot;Location&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                OutlinedTextField(&#10;                    value = location,&#10;                    onValueChange = { location = it },&#10;                    readOnly = false,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    trailingIcon = {&#10;                        Icon(imageVector = Icons.Default.ArrowForward, contentDescription = &quot;Select location&quot;, tint = Color(0xFFFF0000))&#10;                    },&#10;                    singleLine = true&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Distance&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Distance&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${distance.toInt()}km&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                Slider(&#10;                    value = distance,&#10;                    onValueChange = { distance = it },&#10;                    valueRange = 0f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = Color(0xFFBB86FC),&#10;                        activeTrackColor = Color(0xFFBB86FC),&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Age&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Age&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${ageRange.start.toInt()}-${ageRange.endInclusive.toInt()}&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                RangeSlider(&#10;                    value = ageRange,&#10;                    onValueChange = { ageRange = it },&#10;                    valueRange = 18f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = Color(0xFFBB86FC),&#10;                        activeTrackColor = Color(0xFFBB86FC),&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;            }&#10;        },&#10;        shape = RoundedCornerShape(24.dp),&#10;        containerColor = Color.White&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun FilterSegmentButton(text: String, selected: Boolean, onClick: () -&gt; Unit) {&#10;    Button(&#10;        onClick = onClick,&#10;        colors = ButtonDefaults.buttonColors(&#10;            containerColor = if (selected) Color(0xFFBB86FC) else Color.LightGray,&#10;            contentColor = if (selected) Color.White else Color.Black&#10;        ),&#10;        modifier = Modifier&#10;            .weight(1f)&#10;            .height(36.dp)&#10;            .padding(horizontal = 2.dp),&#10;        shape = RoundedCornerShape(8.dp)&#10;    ) {&#10;        Text(text)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/ProfileCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/ProfileCard.kt" />
              <option name="originalContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.snapshots.SnapshotStateList&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.example.dating.data.model.Interest&#10;import com.example.dating.ui.theme.AppColors&#10;&#10;@Composable&#10;fun ProfileCard(&#10;    isEditMode: Boolean,&#10;    onEditToggle: () -&gt; Unit,&#10;    isSaving: Boolean,&#10;    saveError: String?,&#10;    editableFirstName: String,&#10;    editableLastName: String,&#10;    editableBirthday: String,&#10;    editableGender: String,&#10;    editableJob: String,&#10;    editableLocation: String,&#10;    editableDescription: String,&#10;    selectedInterests: SnapshotStateList&lt;String&gt;,&#10;    allInterests: List&lt;Interest&gt;,&#10;    onFirstNameChange: (String) -&gt; Unit,&#10;    onLastNameChange: (String) -&gt; Unit,&#10;    onBirthdayClick: () -&gt; Unit,&#10;    onGenderChange: (String) -&gt; Unit,&#10;    onJobChange: (String) -&gt; Unit,&#10;    onLocationChange: (String) -&gt; Unit,&#10;    onDescriptionChange: (String) -&gt; Unit,&#10;    isEditModeChange: (Boolean) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp, vertical = 16.dp),&#10;        shape = MaterialTheme.shapes.large,&#10;        elevation = CardDefaults.cardElevation(8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                TextButton(onClick = onEditToggle) {&#10;                    Text(&#10;                        text = if (isEditMode) &quot;Done&quot; else &quot;Edit&quot;,&#10;                        color = AppColors.Text_Pink,&#10;                        fontWeight = androidx.compose.ui.text.font.FontWeight.Bold&#10;                    )&#10;                }&#10;            }&#10;            if (isSaving) {&#10;                CircularProgressIndicator(modifier = Modifier.padding(vertical = 8.dp))&#10;            }&#10;            if (saveError != null) {&#10;                Text(&#10;                    text = saveError,&#10;                    color = androidx.compose.ui.graphics.Color.Red,&#10;                    modifier = Modifier.padding(vertical = 8.dp)&#10;                )&#10;            }&#10;            NameFields(&#10;                firstName = editableFirstName,&#10;                lastName = editableLastName,&#10;                isEditMode = isEditMode,&#10;                onFirstNameChange = onFirstNameChange,&#10;                onLastNameChange = onLastNameChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            BirthdayGenderFields(&#10;                birthday = editableBirthday,&#10;                gender = editableGender,&#10;                isEditMode = isEditMode,&#10;                showCalendar = false,&#10;                onShowCalendar = onBirthdayClick,&#10;                onGenderChange = onGenderChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            JobDropdown(&#10;                job = editableJob,&#10;                isEditMode = isEditMode,&#10;                onJobChange = onJobChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            LocationField(&#10;                location = editableLocation,&#10;                isEditMode = isEditMode,&#10;                onLocationChange = onLocationChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            DescriptionField(&#10;                description = editableDescription,&#10;                isEditMode = isEditMode,&#10;                onDescriptionChange = onDescriptionChange&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Interests&quot;,&#10;                fontSize = androidx.compose.ui.unit.sp(20),&#10;                color = AppColors.Text_Pink,&#10;                fontWeight = androidx.compose.ui.text.font.FontWeight.Bold,&#10;                modifier = Modifier&#10;                    .padding(bottom = 8.dp)&#10;                    .fillMaxWidth(),&#10;                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;            )&#10;            InterestsSection(&#10;                allInterests = allInterests,&#10;                selectedInterests = selectedInterests,&#10;                isEditMode = isEditMode&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.snapshots.SnapshotStateList&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.example.dating.data.model.Interest&#10;import com.example.dating.ui.theme.AppColors&#10;&#10;// Add missing imports for field components&#10;import com.example.dating.ui.components.NameFields&#10;import com.example.dating.ui.components.BirthdayGenderFields&#10;import com.example.dating.ui.components.JobDropdown&#10;import com.example.dating.ui.components.LocationField&#10;import com.example.dating.ui.components.DescriptionField&#10;import com.example.dating.ui.components.InterestsSection&#10;&#10;@Composable&#10;fun ProfileCard(&#10;    isEditMode: Boolean,&#10;    onEditToggle: () -&gt; Unit,&#10;    isSaving: Boolean,&#10;    saveError: String?,&#10;    editableFirstName: String,&#10;    editableLastName: String,&#10;    editableBirthday: String,&#10;    editableGender: String,&#10;    editableJob: String,&#10;    editableLocation: String,&#10;    editableDescription: String,&#10;    selectedInterests: SnapshotStateList&lt;String&gt;,&#10;    allInterests: List&lt;Interest&gt;,&#10;    onFirstNameChange: (String) -&gt; Unit,&#10;    onLastNameChange: (String) -&gt; Unit,&#10;    onBirthdayClick: () -&gt; Unit,&#10;    onGenderChange: (String) -&gt; Unit,&#10;    onJobChange: (String) -&gt; Unit,&#10;    onLocationChange: (String) -&gt; Unit,&#10;    onDescriptionChange: (String) -&gt; Unit,&#10;    isEditModeChange: (Boolean) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp, vertical = 16.dp),&#10;        shape = MaterialTheme.shapes.large,&#10;        elevation = CardDefaults.cardElevation(8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                TextButton(onClick = onEditToggle) {&#10;                    Text(&#10;                        text = if (isEditMode) &quot;Done&quot; else &quot;Edit&quot;,&#10;                        color = AppColors.Text_Pink,&#10;                        fontWeight = androidx.compose.ui.text.font.FontWeight.Bold&#10;                    )&#10;                }&#10;            }&#10;            if (isSaving) {&#10;                CircularProgressIndicator(modifier = Modifier.padding(vertical = 8.dp))&#10;            }&#10;            if (saveError != null) {&#10;                Text(&#10;                    text = saveError,&#10;                    color = androidx.compose.ui.graphics.Color.Red,&#10;                    modifier = Modifier.padding(vertical = 8.dp)&#10;                )&#10;            }&#10;            NameFields(&#10;                firstName = editableFirstName,&#10;                lastName = editableLastName,&#10;                isEditMode = isEditMode,&#10;                onFirstNameChange = onFirstNameChange,&#10;                onLastNameChange = onLastNameChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            BirthdayGenderFields(&#10;                birthday = editableBirthday,&#10;                gender = editableGender,&#10;                isEditMode = isEditMode,&#10;                showCalendar = false,&#10;                onShowCalendar = onBirthdayClick,&#10;                onGenderChange = onGenderChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            JobDropdown(&#10;                job = editableJob,&#10;                isEditMode = isEditMode,&#10;                onJobChange = onJobChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            LocationField(&#10;                location = editableLocation,&#10;                isEditMode = isEditMode,&#10;                onLocationChange = onLocationChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            DescriptionField(&#10;                description = editableDescription,&#10;                isEditMode = isEditMode,&#10;                onDescriptionChange = onDescriptionChange&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Interests&quot;,&#10;                fontSize = androidx.compose.ui.unit.sp(20),&#10;                color = AppColors.Text_Pink,&#10;                fontWeight = androidx.compose.ui.text.font.FontWeight.Bold,&#10;                modifier = Modifier&#10;                    .padding(bottom = 8.dp)&#10;                    .fillMaxWidth(),&#10;                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;            )&#10;            InterestsSection(&#10;                allInterests = allInterests,&#10;                selectedInterests = selectedInterests,&#10;                isEditMode = isEditMode&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/FavoriteScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/FavoriteScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material.icons.filled.ViewModule&#10;import androidx.compose.material.icons.filled.Chat&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.viewmodel.FavoriteViewModel&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.navigation.NavController&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.ui.components.BottomNavigationBar&#10;&#10;@Composable&#10;fun FavoriteScreen(navController: NavController, favoriteViewModel: FavoriteViewModel = hiltViewModel()) {&#10;    val usersState by favoriteViewModel.usersState.collectAsState()&#10;&#10;    LaunchedEffect(Unit) {&#10;        favoriteViewModel.fetchFavorites()&#10;    }&#10;&#10;    Scaffold(&#10;        bottomBar = {&#10;            BottomNavigationBar(navController, 1)&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(AppColors.MainBackground)&#10;                .padding(paddingValues)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .verticalScroll(rememberScrollState())&#10;            ) {&#10;                FavoriteHeader(navController)&#10;                when (usersState) {&#10;                    is Resource.Loading -&gt; {&#10;                        Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                            CircularProgressIndicator()&#10;                        }&#10;                    }&#10;                    is Resource.Failure -&gt; {&#10;                        val error = (usersState as Resource.Failure).exception?.message ?: &quot;Unknown error&quot;&#10;                        Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                            Text(&quot;Error: $error&quot;, color = Color.Red)&#10;                        }&#10;                    }&#10;                    is Resource.Success -&gt; {&#10;                        val users = (usersState as Resource.Success&lt;List&lt;User&gt;&gt;).result&#10;                        if (users.isEmpty()) {&#10;                            Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                                Text(&quot;No users found&quot;, color = Color.Gray)&#10;                            }&#10;                        } else {&#10;                            Text(&quot;This is a list of people who have liked you.&quot;, fontSize = 16.sp, modifier = Modifier.padding(start = 32.dp, top = 8.dp, bottom = 8.dp, end = 16.dp), color = Color.Black)&#10;                            ProfileGrid(&#10;                                profiles = users,&#10;                                navController = navController,&#10;                                showDelete = false,&#10;                                moreAvailable = users.size &gt;= 9,&#10;                                onMoreClick = { /* TODO: Show all likedMeProfiles */ }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FavoriteHeader(navController: NavController) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(start = 48.dp, end = 48.dp, top = 40.dp, bottom = 30.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;&#10;        Text(&#10;            text = &quot;Matches&quot;,&#10;            color = Color.Black,&#10;            fontWeight = FontWeight.Bold,&#10;            fontSize = 30.sp&#10;        )&#10;&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileGrid(&#10;    profiles: List&lt;User&gt;,&#10;    navController: NavController,&#10;    showDelete: Boolean,&#10;    moreAvailable: Boolean,&#10;    onDelete: ((User) -&gt; Unit)? = null,&#10;    onMoreClick: () -&gt; Unit&#10;) {&#10;    var showAll by remember { mutableStateOf(false) }&#10;    val profilesToShow = if (showAll) profiles else profiles.take(6)&#10;    val rowCount = if (showAll) (profilesToShow.size + 1) / 2 else 3&#10;    Column(modifier = Modifier.fillMaxWidth().padding(16.dp)) {&#10;        for (row in 0 until rowCount) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp),&#10;            ) {&#10;                for (col in 0 until 2) {&#10;                    val idx = row * 2 + col&#10;                    val profile = profilesToShow.getOrNull(idx)&#10;                    if (profile != null) {&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .padding(8.dp)&#10;                                .weight(1f)&#10;                                .height(220.dp)&#10;                                .clip(RoundedCornerShape(24.dp))&#10;                                .clickable {&#10;                                    navController.navigate(&quot;profile_display/${profile.uid}&quot;)&#10;                                }&#10;                        ) {&#10;                            if (profile.avatarUrl != null &amp;&amp; profile.avatarUrl.isNotBlank()) {&#10;                                Image(&#10;                                    painter = coil.compose.rememberAsyncImagePainter(model = profile.avatarUrl),&#10;                                    contentDescription = &quot;Profile Background&quot;,&#10;                                    contentScale = ContentScale.Crop,&#10;                                    modifier = Modifier&#10;                                        .matchParentSize()&#10;                                        .clip(RoundedCornerShape(24.dp))&#10;                                )&#10;                            } else {&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .matchParentSize()&#10;                                        .background(Color(0xFF23222B))&#10;                                        .clip(RoundedCornerShape(24.dp))&#10;                                ) {&#10;                                    Image(&#10;                                        imageVector = Icons.Default.Person,&#10;                                        contentDescription = &quot;Profile&quot;,&#10;                                        modifier = Modifier&#10;                                            .size(80.dp)&#10;                                            .align(Alignment.TopCenter)&#10;                                            .clip(CircleShape)&#10;                                            .background(Color.Gray)&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            // Name, Age, Description&#10;                            val name = (profile.firstName + &quot; &quot; + profile.lastName).trim().ifEmpty { &quot;Unknown&quot; }&#10;                            val birthday = profile.birthday&#10;                            val age = birthday?.let {&#10;                                try {&#10;                                    val year = it.split(&quot;/&quot;).getOrNull(2)?.toInt() ?: throw Exception(&quot;Invalid date&quot;)&#10;                                    val currentYear = java.util.Calendar.getInstance().get(java.util.Calendar.YEAR)&#10;                                    (currentYear - year).toString()&#10;                                } catch (e: Exception) { &quot;?&quot; }&#10;                            } ?: &quot;?&quot;&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .align(Alignment.BottomCenter)&#10;                                    .fillMaxWidth()&#10;                                    .background(Color.White.copy(alpha = 0.85f), RoundedCornerShape(bottomStart = 24.dp, bottomEnd = 24.dp))&#10;                                    .padding(8.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                Text(&quot;$name, $age&quot;, fontWeight = FontWeight.Bold, fontSize = 16.sp, color = Color.Black, maxLines = 1)&#10;                            }&#10;                            if (showDelete &amp;&amp; onDelete != null) {&#10;                                IconButton(onClick = { onDelete(profile) }, modifier = Modifier.align(Alignment.TopEnd)) {&#10;                                    Icon(Icons.Default.Close, contentDescription = &quot;Delete&quot;, tint = Color.Red)&#10;                                }&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Spacer(modifier = Modifier.weight(1f))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        if (!showAll &amp;&amp; moreAvailable) {&#10;            Button(onClick = { showAll = true }, modifier = Modifier.align(Alignment.CenterHorizontally).padding(8.dp)) {&#10;                Text(&quot;More&quot;)&#10;            }&#10;        }&#10;        if (showAll &amp;&amp; profiles.size &gt; 6) {&#10;            Button(onClick = { showAll = false }, modifier = Modifier.align(Alignment.CenterHorizontally).padding(8.dp)) {&#10;                Text(&quot;Show Less&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material.icons.filled.ViewModule&#10;import androidx.compose.material.icons.filled.Chat&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.viewmodel.FavoriteViewModel&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.navigation.NavController&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.ui.components.BottomNavigationBar&#10;&#10;@Composable&#10;fun FavoriteScreen(navController: NavController, favoriteViewModel: FavoriteViewModel = hiltViewModel()) {&#10;    val usersState by favoriteViewModel.usersState.collectAsState()&#10;&#10;    LaunchedEffect(Unit) {&#10;        favoriteViewModel.fetchFavorites()&#10;    }&#10;&#10;    Scaffold(&#10;        bottomBar = {&#10;            BottomNavigationBar(navController, 1)&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(AppColors.MainBackground)&#10;                .padding(paddingValues)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .verticalScroll(rememberScrollState())&#10;            ) {&#10;                FavoriteHeader(navController)&#10;                when (usersState) {&#10;                    is Resource.Loading -&gt; {&#10;                        Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                            CircularProgressIndicator()&#10;                        }&#10;                    }&#10;                    is Resource.Failure -&gt; {&#10;                        val error = (usersState as Resource.Failure).exception?.message ?: &quot;Unknown error&quot;&#10;                        Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                            Text(&quot;Error: $error&quot;, color = Color.Red)&#10;                        }&#10;                    }&#10;                    is Resource.Success -&gt; {&#10;                        val users = (usersState as Resource.Success&lt;List&lt;User&gt;&gt;).result&#10;                        if (users.isEmpty()) {&#10;                            Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                                Text(&quot;No users found&quot;, color = Color.Gray)&#10;                            }&#10;                        } else {&#10;                            Text(&quot;This is a list of people who have liked you.&quot;, fontSize = 16.sp, modifier = Modifier.padding(start = 32.dp, top = 8.dp, bottom = 8.dp, end = 16.dp), color = Color.Black)&#10;                            ProfileGrid(&#10;                                profiles = users,&#10;                                navController = navController,&#10;                                showDelete = false,&#10;                                moreAvailable = users.size &gt;= 9,&#10;                                onMoreClick = { /* TODO: Show all likedMeProfiles */ }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FavoriteHeader(navController: NavController) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(start = 48.dp, end = 48.dp, top = 40.dp, bottom = 30.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;&#10;        Text(&#10;            text = &quot;Matches&quot;,&#10;            color = Color.Black,&#10;            fontWeight = FontWeight.Bold,&#10;            fontSize = 30.sp&#10;        )&#10;&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileGrid(&#10;    profiles: List&lt;User&gt;,&#10;    navController: NavController,&#10;    showDelete: Boolean,&#10;    moreAvailable: Boolean,&#10;    onDelete: ((User) -&gt; Unit)? = null,&#10;    onMoreClick: () -&gt; Unit&#10;) {&#10;    var showAll by remember { mutableStateOf(false) }&#10;    val profilesToShow = if (showAll) profiles else profiles.take(6)&#10;    val rowCount = if (showAll) (profilesToShow.size + 1) / 2 else 3&#10;    Column(modifier = Modifier.fillMaxWidth().padding(16.dp)) {&#10;        for (row in 0 until rowCount) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp),&#10;            ) {&#10;                for (col in 0 until 2) {&#10;                    val idx = row * 2 + col&#10;                    val profile = profilesToShow.getOrNull(idx)&#10;                    if (profile != null) {&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .padding(8.dp)&#10;                                .weight(1f)&#10;                                .height(220.dp)&#10;                                .clip(RoundedCornerShape(24.dp))&#10;                                .clickable {&#10;                                    navController.navigate(&quot;profile_display/${profile.uid}&quot;)&#10;                                }&#10;                        ) {&#10;                            if (profile.avatarUrl != null &amp;&amp; profile.avatarUrl.isNotBlank()) {&#10;                                Image(&#10;                                    painter = coil.compose.rememberAsyncImagePainter(model = profile.avatarUrl),&#10;                                    contentDescription = &quot;Profile Background&quot;,&#10;                                    contentScale = ContentScale.Crop,&#10;                                    modifier = Modifier&#10;                                        .matchParentSize()&#10;                                        .clip(RoundedCornerShape(24.dp))&#10;                                )&#10;                            } else {&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .matchParentSize()&#10;                                        .background(Color(0xFF23222B))&#10;                                        .clip(RoundedCornerShape(24.dp))&#10;                                ) {&#10;                                    Image(&#10;                                        imageVector = Icons.Default.Person,&#10;                                        contentDescription = &quot;Profile&quot;,&#10;                                        modifier = Modifier&#10;                                            .size(80.dp)&#10;                                            .align(Alignment.TopCenter)&#10;                                            .clip(CircleShape)&#10;                                            .background(Color.Gray)&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            // Name, Age, Description&#10;                            val name = (profile.firstName + &quot; &quot; + profile.lastName).trim().ifEmpty { &quot;Unknown&quot; }&#10;                            val birthday = profile.birthday&#10;                            val age = birthday?.let {&#10;                                try {&#10;                                    val year = it.split(&quot;/&quot;).getOrNull(2)?.toInt() ?: throw Exception(&quot;Invalid date&quot;)&#10;                                    val currentYear = java.util.Calendar.getInstance().get(java.util.Calendar.YEAR)&#10;                                    (currentYear - year).toString()&#10;                                } catch (e: Exception) { &quot;?&quot; }&#10;                            } ?: &quot;?&quot;&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .align(Alignment.BottomCenter)&#10;                                    .fillMaxWidth()&#10;                                    .background(Color.White.copy(alpha = 0.85f), RoundedCornerShape(bottomStart = 24.dp, bottomEnd = 24.dp))&#10;                                    .padding(8.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                Text(&quot;$name, $age&quot;, fontWeight = FontWeight.Bold, fontSize = 16.sp, color = Color.Black, maxLines = 1)&#10;                            }&#10;                            if (showDelete &amp;&amp; onDelete != null) {&#10;                                IconButton(onClick = { onDelete(profile) }, modifier = Modifier.align(Alignment.TopEnd)) {&#10;                                    Icon(Icons.Default.Close, contentDescription = &quot;Delete&quot;, tint = Color.Red)&#10;                                }&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Spacer(modifier = Modifier.weight(1f))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        if (!showAll &amp;&amp; moreAvailable) {&#10;            Button(onClick = { showAll = true }, modifier = Modifier.align(Alignment.CenterHorizontally).padding(8.dp)) {&#10;                Text(&quot;More&quot;)&#10;            }&#10;        }&#10;        if (showAll &amp;&amp; profiles.size &gt; 6) {&#10;            Button(onClick = { showAll = false }, modifier = Modifier.align(Alignment.CenterHorizontally).padding(8.dp)) {&#10;                Text(&quot;Show Less&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class HomeViewModel : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val _addFavoriteState = MutableStateFlow&lt;Result&lt;Unit&gt;?&gt;(null)&#10;    val addFavoriteState: StateFlow&lt;Result&lt;Unit&gt;?&gt; = _addFavoriteState&#10;&#10;    fun addFavorite(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        val favorite = hashMapOf(&#10;            &quot;likerId&quot; to likerId,&#10;            &quot;likedId&quot; to likedId,&#10;            &quot;timestamp&quot; to Timestamp.now()&#10;        )&#10;        viewModelScope.launch {&#10;            try {&#10;                db.collection(&quot;favorites&quot;).add(favorite)&#10;                _addFavoriteState.value = Result.success(Unit)&#10;            } catch (e: Exception) {&#10;                _addFavoriteState.value = Result.failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearAddFavoriteState() {&#10;        _addFavoriteState.value = null&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/FavoriteViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/FavoriteViewModel.kt" />
              <option name="originalContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.FavoriteRepository&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.firestore.ListenerRegistration&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;import kotlinx.coroutines.flow.onEach&#10;&#10;@HiltViewModel&#10;class FavoriteViewModel @Inject constructor(&#10;    private val favoriteRepository: FavoriteRepository&#10;) : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    private val _usersState = MutableStateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt;(Resource.Loading)&#10;    val usersState: StateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt; = _usersState&#10;&#10;    private var listener: ListenerRegistration? = null&#10;&#10;    init {&#10;        val currentUserId = FirebaseAuth.getInstance().currentUser?.uid&#10;        if (currentUserId != null) {&#10;            viewModelScope.launch {&#10;                favoriteRepository.listenFavorites(currentUserId).collect { users -&gt;&#10;                    _usersState.value = Resource.Success(users)&#10;                }&#10;            }&#10;        } else {&#10;            _usersState.value = Resource.Failure(Exception(&quot;User not authenticated&quot;))&#10;        }&#10;    }&#10;&#10;    private suspend fun getUserProfilesByIds(uids: List&lt;String&gt;): List&lt;User&gt; {&#10;        return try {&#10;            val snapshot = db.collection(&quot;users&quot;)&#10;                .whereIn(&quot;uid&quot;, uids)&#10;                .get()&#10;                .await()&#10;&#10;            snapshot.documents.mapNotNull { it.toObject(User::class.java) }&#10;        } catch (e: Exception) {&#10;            android.util.Log.e(&quot;FavoriteViewModel&quot;, &quot;Error fetching users: &quot;, e)&#10;            emptyList()&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.FavoriteRepository&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.firestore.ListenerRegistration&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;import kotlinx.coroutines.flow.onEach&#10;&#10;@HiltViewModel&#10;class FavoriteViewModel @Inject constructor(&#10;    private val favoriteRepository: FavoriteRepository&#10;) : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    private val _usersState = MutableStateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt;(Resource.Loading)&#10;    val usersState: StateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt; = _usersState&#10;&#10;    init {&#10;        val currentUserId = FirebaseAuth.getInstance().currentUser?.uid&#10;        if (currentUserId != null) {&#10;            viewModelScope.launch {&#10;                favoriteRepository.listenFavorites(currentUserId).collect { users -&gt;&#10;                    _usersState.value = Resource.Success(users)&#10;                }&#10;            }&#10;        } else {&#10;            _usersState.value = Resource.Failure(Exception(&quot;User not authenticated&quot;))&#10;        }&#10;    }&#10;&#10;    private suspend fun getUserProfilesByIds(uids: List&lt;String&gt;): List&lt;User&gt; {&#10;        return try {&#10;            val snapshot = db.collection(&quot;users&quot;)&#10;                .whereIn(&quot;uid&quot;, uids)&#10;                .get()&#10;                .await()&#10;&#10;            snapshot.documents.mapNotNull { it.toObject(User::class.java) }&#10;        } catch (e: Exception) {&#10;            android.util.Log.e(&quot;FavoriteViewModel&quot;, &quot;Error fetching users: &quot;, e)&#10;            emptyList()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/MessagesViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/MessagesViewModel.kt" />
              <option name="originalContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.MessagesFilterState&#10;import com.example.dating.data.model.ConversationPreview&#10;import com.example.dating.data.model.repository.FirebaseMessagesRepository&#10;import com.google.firebase.auth.FirebaseAuth&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.filterMessages&#10;import android.util.Log&#10;&#10;data class MessagesUiState(&#10;    val isLoading: Boolean = false,&#10;    val error: String? = null,&#10;    val messages: List&lt;ConversationPreview&gt; = emptyList()&#10;)&#10;&#10;@HiltViewModel&#10;class MessagesViewModel @Inject constructor(&#10;    private val auth: FirebaseAuth,&#10;    private val repository: FirebaseMessagesRepository&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(MessagesUiState())&#10;    val uiState: StateFlow&lt;MessagesUiState&gt; = _uiState&#10;&#10;    private val _filterState = MutableStateFlow(MessagesFilterState())&#10;    val filterState: StateFlow&lt;MessagesFilterState&gt; = _filterState // Change to StateFlow&#10;&#10;    private var originalMessages = listOf&lt;ConversationPreview&gt;()&#10;    private var loadedConversations = 0&#10;    private var totalConversations = 0&#10;&#10;&#10;    init {&#10;        loadMessages()&#10;    }&#10;&#10;    fun updateFilter(newState: MessagesFilterState) {&#10;        _filterState.value = newState&#10;    }&#10;&#10;    fun clearFilter() {&#10;        _filterState.value = MessagesFilterState()&#10;        _uiState.value = _uiState.value.copy(messages = originalMessages)&#10;    }&#10;&#10;    fun applyFilter() {&#10;        val filtered = filterMessages(originalMessages, filterState.value)&#10;        _uiState.value = _uiState.value.copy(messages = filtered)&#10;    }&#10;&#10;    fun loadMessages() {&#10;        _uiState.value = MessagesUiState(isLoading = true)&#10;        val currentUid = auth.currentUser?.uid ?: &quot;&quot;&#10;        viewModelScope.launch {&#10;            repository.getConversations(currentUid).collect { conversations -&gt;&#10;                originalMessages = conversations.sortedByDescending { it.lastMessageTimestamp }&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    messages = originalMessages&#10;                )&#10;                Log.d(&quot;ChatViewModel&quot;, &quot;Conversations updated, count=${conversations.size}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun formatTimeAgo(timestamp: Long): String {&#10;        if (timestamp == 0L) return &quot;&quot;&#10;        val now = System.currentTimeMillis()&#10;        val diff = now - timestamp&#10;        return when {&#10;            diff &lt; 60_000 -&gt; &quot;Just now&quot;&#10;            diff &lt; 3600_000 -&gt; &quot;${diff / 60_000}m&quot;&#10;            diff &lt; 86400_000 -&gt; &quot;${diff / 3600_000}h&quot;&#10;            else -&gt; &quot;${diff / 86400_000}d&quot;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.MessagesFilterState&#10;import com.example.dating.data.model.ConversationPreview&#10;import com.example.dating.data.model.repository.FirebaseMessagesRepository&#10;import com.google.firebase.auth.FirebaseAuth&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.filterMessages&#10;import android.util.Log&#10;&#10;data class MessagesUiState(&#10;    val isLoading: Boolean = false,&#10;    val error: String? = null,&#10;    val messages: List&lt;ConversationPreview&gt; = emptyList()&#10;)&#10;&#10;@HiltViewModel&#10;class MessagesViewModel @Inject constructor(&#10;    private val auth: FirebaseAuth,&#10;    private val repository: FirebaseMessagesRepository&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(MessagesUiState())&#10;    val uiState: StateFlow&lt;MessagesUiState&gt; = _uiState&#10;&#10;    private val _filterState = MutableStateFlow(MessagesFilterState())&#10;    val filterState: StateFlow&lt;MessagesFilterState&gt; = _filterState // Change to StateFlow&#10;&#10;    private var originalMessages = listOf&lt;ConversationPreview&gt;()&#10;    private var loadedConversations = 0&#10;    private var totalConversations = 0&#10;&#10;&#10;    init {&#10;        val currentUid = auth.currentUser?.uid ?: &quot;&quot;&#10;        viewModelScope.launch {&#10;            repository.getConversations(currentUid).collect { conversations -&gt;&#10;                originalMessages = conversations.sortedByDescending { it.lastMessageTimestamp }&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    messages = originalMessages&#10;                )&#10;                Log.d(&quot;MessagesViewModel&quot;, &quot;Conversations updated, count=${conversations.size}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateFilter(newState: MessagesFilterState) {&#10;        _filterState.value = newState&#10;    }&#10;&#10;    fun clearFilter() {&#10;        _filterState.value = MessagesFilterState()&#10;        _uiState.value = _uiState.value.copy(messages = originalMessages)&#10;    }&#10;&#10;    fun applyFilter() {&#10;        val filtered = filterMessages(originalMessages, filterState.value)&#10;        _uiState.value = _uiState.value.copy(messages = filtered)&#10;    }&#10;&#10;    fun loadMessages() {&#10;        _uiState.value = MessagesUiState(isLoading = true)&#10;        val currentUid = auth.currentUser?.uid ?: &quot;&quot;&#10;        viewModelScope.launch {&#10;            repository.getConversations(currentUid).collect { conversations -&gt;&#10;                originalMessages = conversations.sortedByDescending { it.lastMessageTimestamp }&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    messages = originalMessages&#10;                )&#10;                Log.d(&quot;MessagesViewModel&quot;, &quot;Conversations updated, count=${conversations.size}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun formatTimeAgo(timestamp: Long): String {&#10;        if (timestamp == 0L) return &quot;&quot;&#10;        val now = System.currentTimeMillis()&#10;        val diff = now - timestamp&#10;        return when {&#10;            diff &lt; 60_000 -&gt; &quot;Just now&quot;&#10;            diff &lt; 3600_000 -&gt; &quot;${diff / 60_000}m&quot;&#10;            diff &lt; 86400_000 -&gt; &quot;${diff / 3600_000}h&quot;&#10;            else -&gt; &quot;${diff / 86400_000}d&quot;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/ProfileViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/ProfileViewModel.kt" />
              <option name="originalContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.repository.AuthRepository&#10;import com.example.dating.data.model.repository.UserRepository&#10;import com.example.dating.data.model.Resource&#10;&#10;@HiltViewModel&#10;class ProfileViewModel @Inject constructor(&#10;    private val userRepository: UserRepository,&#10;    private val auth: AuthRepository,&#10;    ) : ViewModel() {&#10;    private val _user = MutableStateFlow&lt;User?&gt;(null)&#10;    val user: StateFlow&lt;User?&gt; = _user&#10;&#10;    private val _updateState = MutableStateFlow&lt;Resource&lt;Unit&gt;?&gt;(null)&#10;    val updateState: StateFlow&lt;Resource&lt;Unit&gt;?&gt; = _updateState&#10;&#10;    init {&#10;        val uid = auth.currentUser?.uid&#10;        if (uid != null) {&#10;            viewModelScope.launch {&#10;                userRepository.getUser(uid).collect { fetchedUser -&gt;&#10;                    android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;Fetched user: $fetchedUser&quot;)&#10;                    _user.value = fetchedUser&#10;                }&#10;            }&#10;        } else {&#10;            android.util.Log.w(&quot;ProfileViewModel&quot;, &quot;No UID found in AuthRepository&quot;)&#10;        }&#10;    }&#10;&#10;    fun loadUser(uid: String) {&#10;        viewModelScope.launch {&#10;            userRepository.getUser(uid).collect { _user.value = it }&#10;        }&#10;    }&#10;&#10;    fun updateProfile(user: User) {&#10;        android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;updateProfile called with: $user&quot;)&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.updateUser(user)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = user&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateGender(gender: String) {&#10;        val currentUser = _user.value ?: return&#10;        val updatedUser = currentUser.copy(gender = gender)&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.updateGender(updatedUser.uid, gender)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = updatedUser&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateInterests(interests: List&lt;String&gt;) {&#10;        val currentUser = _user.value ?: return&#10;        val updatedUser = currentUser.copy(interests = interests)&#10;        android.util.Log.w(&quot;ProfileViewModel&quot;, currentUser.toString())&#10;&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.updateInterests(updatedUser.uid, interests)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = updatedUser&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateJobLocationDescription(job: String?, location: String?, description: String?) {&#10;        val currentUser = _user.value ?: return&#10;        val updatedUser = currentUser.copy(job = job, location = location, description = description)&#10;        viewModelScope.launch {&#10;            userRepository.updateJobLocationDescription(updatedUser.uid, job, location, description)&#10;            _user.value = updatedUser&#10;        }&#10;    }&#10;&#10;    fun createUser(user: User) {&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.createUser(user)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = user&#10;            }&#10;        }&#10;    }&#10;&#10;    fun uploadAvatar(uri: android.net.Uri) {&#10;        val uid = auth.currentUser?.uid ?: return&#10;        val storage = com.google.firebase.storage.FirebaseStorage.getInstance()&#10;        val avatarRef = storage.reference.child(&quot;avatars/$uid.jpg&quot;)&#10;        viewModelScope.launch {&#10;            try {&#10;                avatarRef.putFile(uri).addOnSuccessListener {&#10;                    avatarRef.downloadUrl.addOnSuccessListener { downloadUrl -&gt;&#10;                        viewModelScope.launch {&#10;                            userRepository.updateAvatarUrl(uid, downloadUrl.toString())&#10;                            android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;Avatar updated: $downloadUrl&quot;)&#10;                        }&#10;                    }&#10;                }.addOnFailureListener { e -&gt;&#10;                    android.util.Log.e(&quot;ProfileViewModel&quot;, &quot;Failed to upload avatar: ${e.message}&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                android.util.Log.e(&quot;ProfileViewModel&quot;, &quot;Exception in uploadAvatar: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.repository.AuthRepository&#10;import com.example.dating.data.model.repository.UserRepository&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.storage.FirebaseStorage&#10;&#10;@HiltViewModel&#10;class ProfileViewModel @Inject constructor(&#10;    private val userRepository: UserRepository,&#10;    private val auth: AuthRepository,&#10;    ) : ViewModel() {&#10;    private val _user = MutableStateFlow&lt;User?&gt;(null)&#10;    val user: StateFlow&lt;User?&gt; = _user&#10;&#10;    private val _updateState = MutableStateFlow&lt;Resource&lt;Unit&gt;?&gt;(null)&#10;    val updateState: StateFlow&lt;Resource&lt;Unit&gt;?&gt; = _updateState&#10;&#10;    init {&#10;        val uid = auth.currentUser?.uid&#10;        if (uid != null) {&#10;            viewModelScope.launch {&#10;                userRepository.getUser(uid).collect { fetchedUser -&gt;&#10;                    android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;Fetched user: $fetchedUser&quot;)&#10;                    _user.value = fetchedUser&#10;                }&#10;            }&#10;        } else {&#10;            android.util.Log.w(&quot;ProfileViewModel&quot;, &quot;No UID found in AuthRepository&quot;)&#10;        }&#10;    }&#10;&#10;    fun loadUser(uid: String) {&#10;        viewModelScope.launch {&#10;            userRepository.getUser(uid).collect { _user.value = it }&#10;        }&#10;    }&#10;&#10;    fun updateProfile(user: User) {&#10;        android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;updateProfile called with: $user&quot;)&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.updateUser(user)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = user&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateGender(gender: String) {&#10;        val currentUser = _user.value ?: return&#10;        val updatedUser = currentUser.copy(gender = gender)&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.updateGender(updatedUser.uid, gender)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = updatedUser&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateInterests(interests: List&lt;String&gt;) {&#10;        val currentUser = _user.value ?: return&#10;        val updatedUser = currentUser.copy(interests = interests)&#10;        android.util.Log.w(&quot;ProfileViewModel&quot;, currentUser.toString())&#10;&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.updateInterests(updatedUser.uid, interests)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = updatedUser&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateJobLocationDescription(job: String?, location: String?, description: String?) {&#10;        val currentUser = _user.value ?: return&#10;        val updatedUser = currentUser.copy(job = job, location = location, description = description)&#10;        viewModelScope.launch {&#10;            userRepository.updateJobLocationDescription(updatedUser.uid, job, location, description)&#10;            _user.value = updatedUser&#10;        }&#10;    }&#10;&#10;    fun createUser(user: User) {&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.createUser(user)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = user&#10;            }&#10;        }&#10;    }&#10;&#10;    fun uploadAvatar(uri: android.net.Uri) {&#10;        val uid = auth.currentUser?.uid ?: return&#10;        val storage = FirebaseStorage.getInstance()&#10;        val avatarRef = storage.reference.child(&quot;avatars/$uid.jpg&quot;)&#10;        avatarRef.putFile(uri)&#10;            .addOnSuccessListener { taskSnapshot: com.google.firebase.storage.UploadTask.TaskSnapshot -&gt;&#10;                avatarRef.downloadUrl.addOnSuccessListener { downloadUrl: android.net.Uri -&gt;&#10;                    viewModelScope.launch {&#10;                        userRepository.updateAvatarUrl(uid, downloadUrl.toString())&#10;                        android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;Avatar updated: $downloadUrl&quot;)&#10;                    }&#10;                }&#10;            }&#10;            .addOnFailureListener { e: Exception -&gt;&#10;                android.util.Log.e(&quot;ProfileViewModel&quot;, &quot;Failed to upload avatar: ${e.message}&quot;)&#10;            }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>