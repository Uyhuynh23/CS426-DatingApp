<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/auth/EmailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/auth/EmailScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.auth&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.viewmodel.AuthViewModel&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.ui.platform.LocalLifecycleOwner&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.compose.ui.focus.onFocusChanged&#10;import androidx.compose.ui.platform.LocalFocusManager&#10;&#10;@Composable&#10;fun EmailScreen(navController: NavController) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    val isEmailValid = android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    val authViewModel: AuthViewModel = hiltViewModel()&#10;    val coroutineScope = rememberCoroutineScope()&#10;    val lifecycleOwner = LocalLifecycleOwner.current&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .align(Alignment.Center)&#10;                .padding(horizontal = 32.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Enter your email&quot;,&#10;                fontSize = 28.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.Black,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;            var isEmailFocused by remember { mutableStateOf(false) }&#10;            var isPasswordFocused by remember { mutableStateOf(false) }&#10;            val isSignupFailed = errorMessage != null &amp;&amp; errorMessage != &quot;Verification email sent. Please check your inbox.&quot;&#10;            OutlinedTextField(&#10;                value = email,&#10;                onValueChange = {&#10;                    email = it&#10;                    errorMessage = null // Clear error on edit&#10;                },&#10;                label = { Text(&quot;Email&quot;) },&#10;                singleLine = true,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .onFocusChanged { focusState -&gt;&#10;                        isEmailFocused = focusState.isFocused&#10;                    },&#10;                shape = RoundedCornerShape(12.dp),&#10;                colors = OutlinedTextFieldDefaults.colors(&#10;                    focusedBorderColor = AppColors.Text_Pink,&#10;                    focusedLabelColor = AppColors.Text_Pink,&#10;                    unfocusedBorderColor = if (isSignupFailed &amp;&amp; !isEmailFocused) Color.Red else Color.LightGray,&#10;                    unfocusedLabelColor = if (isSignupFailed &amp;&amp; !isEmailFocused) Color.Red else Color.Black&#10;                ),&#10;                keyboardOptions = KeyboardOptions(&#10;                    keyboardType = KeyboardType.Email&#10;                )&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            OutlinedTextField(&#10;                value = password,&#10;                onValueChange = {&#10;                    password = it&#10;                    errorMessage = null // Clear error on edit&#10;                },&#10;                label = { Text(&quot;Password&quot;) },&#10;                singleLine = true,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .onFocusChanged { focusState -&gt;&#10;                        isPasswordFocused = focusState.isFocused&#10;                    },&#10;                shape = RoundedCornerShape(12.dp),&#10;                colors = OutlinedTextFieldDefaults.colors(&#10;                    focusedBorderColor = AppColors.Text_Pink,&#10;                    focusedLabelColor = AppColors.Text_Pink,&#10;                    unfocusedBorderColor = if (isSignupFailed &amp;&amp; !isPasswordFocused) Color.Red else Color.LightGray,&#10;                    unfocusedLabelColor = if (isSignupFailed &amp;&amp; !isPasswordFocused) Color.Red else Color.Black&#10;                ),&#10;                visualTransformation = PasswordVisualTransformation(),&#10;                keyboardOptions = KeyboardOptions(&#10;                    keyboardType = KeyboardType.Password&#10;                )&#10;            )&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;            var startVerificationCheck by remember { mutableStateOf(false) }&#10;            if (startVerificationCheck) {&#10;                // Navigate to VerifyEmailScreen&#10;                navController.navigate(&quot;verify_email&quot;)&#10;                startVerificationCheck = false&#10;            }&#10;            Button(&#10;                onClick = {&#10;                    isLoading = true&#10;                    errorMessage = null&#10;                    coroutineScope.launch {&#10;                        val signupResult = authViewModel.signupUserWithEmailVerification(email, password)&#10;                        isLoading = false&#10;                        if (signupResult == null) {&#10;                            errorMessage = &quot;Verification email sent. Please check your inbox.&quot;&#10;                            startVerificationCheck = true&#10;                        } else {&#10;                            errorMessage = signupResult&#10;                        }&#10;                    }&#10;                },&#10;                enabled = isEmailValid &amp;&amp; password.isNotBlank() &amp;&amp; !isLoading,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                shape = RoundedCornerShape(16.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = Color(0xFFFFF1FC),&#10;                    contentColor = Color.Black&#10;                )&#10;            ) {&#10;                if (isLoading) {&#10;                    CircularProgressIndicator(modifier = Modifier.size(24.dp), color = Color.Black)&#10;                } else {&#10;                    Text(&quot;Continue&quot;)&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            errorMessage?.let {&#10;                Text(&#10;                    text = it,&#10;                    color = if (it.contains(&quot;success&quot;, true)) Color(0xFF4CAF50) else Color.Red,&#10;                    modifier = Modifier.padding(top = 8.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.auth&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.viewmodel.AuthViewModel&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.ui.platform.LocalLifecycleOwner&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.compose.ui.focus.onFocusChanged&#10;import androidx.compose.ui.platform.LocalFocusManager&#10;&#10;@Composable&#10;fun EmailScreen(navController: NavController) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    val isEmailValid = android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    val authViewModel: AuthViewModel = hiltViewModel()&#10;    val coroutineScope = rememberCoroutineScope()&#10;    val lifecycleOwner = LocalLifecycleOwner.current&#10;    val focusManager = LocalFocusManager.current&#10;    var isEmailFocused by remember { mutableStateOf(false) }&#10;    var isPasswordFocused by remember { mutableStateOf(false) }&#10;    val isSignupFailed = errorMessage != null &amp;&amp; errorMessage != &quot;Verification email sent. Please check your inbox.&quot;&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .align(Alignment.Center)&#10;                .padding(horizontal = 32.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Enter your email&quot;,&#10;                fontSize = 28.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.Black,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;            OutlinedTextField(&#10;                value = email,&#10;                onValueChange = {&#10;                    email = it&#10;                    errorMessage = null // Clear error on edit&#10;                },&#10;                label = { Text(&quot;Email&quot;) },&#10;                singleLine = true,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .onFocusChanged { focusState -&gt;&#10;                        isEmailFocused = focusState.isFocused&#10;                    },&#10;                shape = RoundedCornerShape(12.dp),&#10;                colors = OutlinedTextFieldDefaults.colors(&#10;                    focusedBorderColor = AppColors.Text_Pink,&#10;                    focusedLabelColor = AppColors.Text_Pink,&#10;                    unfocusedBorderColor = if (isSignupFailed &amp;&amp; !isEmailFocused) Color.Red else Color.LightGray,&#10;                    unfocusedLabelColor = if (isSignupFailed &amp;&amp; !isEmailFocused) Color.Red else Color.Black&#10;                ),&#10;                keyboardOptions = KeyboardOptions(&#10;                    keyboardType = KeyboardType.Email&#10;                )&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            OutlinedTextField(&#10;                value = password,&#10;                onValueChange = {&#10;                    password = it&#10;                    errorMessage = null // Clear error on edit&#10;                },&#10;                label = { Text(&quot;Password&quot;) },&#10;                singleLine = true,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .onFocusChanged { focusState -&gt;&#10;                        isPasswordFocused = focusState.isFocused&#10;                    },&#10;                shape = RoundedCornerShape(12.dp),&#10;                colors = OutlinedTextFieldDefaults.colors(&#10;                    focusedBorderColor = AppColors.Text_Pink,&#10;                    focusedLabelColor = AppColors.Text_Pink,&#10;                    unfocusedBorderColor = if (isSignupFailed &amp;&amp; !isPasswordFocused) Color.Red else Color.LightGray,&#10;                    unfocusedLabelColor = if (isSignupFailed &amp;&amp; !isPasswordFocused) Color.Red else Color.Black&#10;                ),&#10;                visualTransformation = PasswordVisualTransformation(),&#10;                keyboardOptions = KeyboardOptions(&#10;                    keyboardType = KeyboardType.Password&#10;                )&#10;            )&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;            var startVerificationCheck by remember { mutableStateOf(false) }&#10;            if (startVerificationCheck) {&#10;                // Navigate to VerifyEmailScreen&#10;                navController.navigate(&quot;verify_email&quot;)&#10;                startVerificationCheck = false&#10;            }&#10;            Button(&#10;                onClick = {&#10;                    isLoading = true&#10;                    errorMessage = null&#10;                    focusManager.clearFocus()&#10;                    coroutineScope.launch {&#10;                        val signupResult = authViewModel.signupUserWithEmailVerification(email, password)&#10;                        isLoading = false&#10;                        if (signupResult == null) {&#10;                            errorMessage = &quot;Verification email sent. Please check your inbox.&quot;&#10;                            startVerificationCheck = true&#10;                        } else {&#10;                            errorMessage = signupResult&#10;                        }&#10;                    }&#10;                },&#10;                enabled = isEmailValid &amp;&amp; password.isNotBlank() &amp;&amp; !isLoading,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                shape = RoundedCornerShape(16.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = Color(0xFFFFF1FC),&#10;                    contentColor = Color.Black&#10;                )&#10;            ) {&#10;                if (isLoading) {&#10;                    CircularProgressIndicator(modifier = Modifier.size(24.dp), color = Color.Black)&#10;                } else {&#10;                    Text(&quot;Continue&quot;)&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            errorMessage?.let {&#10;                Text(&#10;                    text = it,&#10;                    color = if (it.contains(&quot;success&quot;, true)) Color(0xFF4CAF50) else Color.Red,&#10;                    modifier = Modifier.padding(top = 8.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/auth/VerifyEmailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/auth/VerifyEmailScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.auth&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.viewmodel.AuthViewModel&#10;import kotlinx.coroutines.launch&#10;import androidx.navigation.NavController&#10;&#10;@Composable&#10;fun VerifyEmailScreen(&#10;    navController: NavController&#10;) {&#10;    val authViewModel: AuthViewModel = hiltViewModel()&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var message by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var canContinue by remember { mutableStateOf(false) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    // Periodically check verification status every 3 seconds&#10;    LaunchedEffect(Unit) {&#10;        while (true) {&#10;            val user = authViewModel.currentUser&#10;            if (user != null) {&#10;                val isVerified = authViewModel.checkEmailVerified()&#10;                if (isVerified) {&#10;                    message = &quot;Email verified successfully!&quot;&#10;                    canContinue = true&#10;                    break&#10;                } else {&#10;                    message = &quot;Please verify your email.&quot;&#10;                }&#10;            } else {&#10;                message = &quot;Please log in again.&quot;&#10;                break&#10;            }&#10;            kotlinx.coroutines.delay(3000)&#10;        }&#10;    }&#10;&#10;    // When verified, navigate or popBackStack as needed&#10;    LaunchedEffect(canContinue) {&#10;        if (canContinue) {&#10;            // Example: navigate to next screen or pop&#10;            // navController.navigate(&quot;next_screen&quot;)&#10;            // or navController.popBackStack()&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .align(Alignment.Center)&#10;                .padding(horizontal = 32.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Verify Your Email&quot;,&#10;                fontSize = 28.sp,&#10;                color = Color.Black,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;            message?.let {&#10;                Text(&#10;                    text = it,&#10;                    color = if (canContinue) Color(0xFF4CAF50) else Color.Red,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;            }&#10;            if (!canContinue) {&#10;                Button(&#10;                    onClick = {&#10;                        coroutineScope.launch {&#10;                            isLoading = true&#10;                            val user = authViewModel.currentUser&#10;                            user?.sendEmailVerification()&#10;                            isLoading = false&#10;                            message = &quot;Verification email sent again. Please check your inbox.&quot;&#10;                        }&#10;                    },&#10;                    enabled = !isLoading,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    shape = RoundedCornerShape(16.dp)&#10;                ) {&#10;                    if (isLoading) {&#10;                        CircularProgressIndicator(modifier = Modifier.size(24.dp), color = Color.Black)&#10;                    } else {&#10;                        Text(&quot;Resend Verification Email&quot;)&#10;                    }&#10;                }&#10;            } else {&#10;                Button(&#10;                    onClick = {&#10;                        navController.navigate(&quot;profile&quot;) {&#10;                            popUpTo(&quot;verify_email&quot;) { inclusive = true }&#10;                        }&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    shape = RoundedCornerShape(16.dp)&#10;                ) {&#10;                    Text(&quot;Continue&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.auth&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.viewmodel.AuthViewModel&#10;import kotlinx.coroutines.launch&#10;import androidx.navigation.NavController&#10;&#10;@Composable&#10;fun VerifyEmailScreen(&#10;    navController: NavController&#10;) {&#10;    val authViewModel: AuthViewModel = hiltViewModel()&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var message by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var canContinue by remember { mutableStateOf(false) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    // Periodically check verification status every 3 seconds&#10;    LaunchedEffect(Unit) {&#10;        while (true) {&#10;            val user = authViewModel.currentUser&#10;            if (user != null) {&#10;                val isVerified = authViewModel.checkEmailVerified()&#10;                if (isVerified) {&#10;                    message = &quot;Email verified successfully!&quot;&#10;                    canContinue = true&#10;                    break&#10;                } else {&#10;                    message = &quot;Please verify your email.&quot;&#10;                }&#10;            } else {&#10;                message = &quot;Please log in again.&quot;&#10;                break&#10;            }&#10;            kotlinx.coroutines.delay(3000)&#10;        }&#10;    }&#10;&#10;    // When verified, navigate or popBackStack as needed&#10;    LaunchedEffect(canContinue) {&#10;        if (canContinue) {&#10;            // Example: navigate to next screen or pop&#10;            // navController.navigate(&quot;next_screen&quot;)&#10;            // or navController.popBackStack()&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .align(Alignment.Center)&#10;                .padding(horizontal = 32.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Verify Your Email&quot;,&#10;                fontSize = 28.sp,&#10;                color = Color.Black,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;            message?.let {&#10;                Text(&#10;                    text = it,&#10;                    color = if (canContinue) Color(0xFF4CAF50) else Color.Red,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;            }&#10;            if (!canContinue) {&#10;                Button(&#10;                    onClick = {&#10;                        coroutineScope.launch {&#10;                            isLoading = true&#10;                            val user = authViewModel.currentUser&#10;                            user?.sendEmailVerification()&#10;                            isLoading = false&#10;                            message = &quot;Verification email sent again. Please check your inbox.&quot;&#10;                        }&#10;                    },&#10;                    enabled = !isLoading,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    shape = RoundedCornerShape(16.dp),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = Main_Secondary1,&#10;                        contentColor = Color.Black,&#10;                    )&#10;                ) {&#10;                    if (isLoading) {&#10;                        CircularProgressIndicator(modifier = Modifier.size(24.dp), color = Color.Black)&#10;                    } else {&#10;                        Text(&quot;Resend Verification Email&quot;)&#10;                    }&#10;                }&#10;            } else {&#10;                Button(&#10;                    onClick = {&#10;                        navController.navigate(&quot;profile&quot;) {&#10;                            popUpTo(&quot;verify_email&quot;) { inclusive = true }&#10;                        }&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    shape = RoundedCornerShape(16.dp),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = Main_Secondary1,&#10;                        contentColor = Color.Black,&#10;                    )&#10;                ) {&#10;                    Text(&quot;Continue&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/profile/GenderSelectionScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/profile/GenderSelectionScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.profile&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Check&#10;import androidx.compose.material.icons.filled.KeyboardArrowRight&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.dating.ui.theme.AppColors&#10;&#10;&#10;@Composable&#10;fun GenderSelectionScreen(navController: NavController) {&#10;    var selectedGender by remember { mutableStateOf(&quot;Man&quot;) } // mặc định chọn Man&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;            .padding(horizontal = 24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Header: Back + Skip&#10;        Box(modifier = Modifier.fillMaxWidth()) {&#10;            // Back&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(RoundedCornerShape(12.dp))&#10;                    .background(Color.White)&#10;                    .clickable { navController.popBackStack() }&#10;                    .align(Alignment.CenterStart),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(Icons.Default.ArrowBack, contentDescription = &quot;Back&quot;, tint = AppColors.Text_Pink,)&#10;            }&#10;&#10;            // Skip&#10;            Text(&#10;                text = &quot;Skip&quot;,&#10;                color = AppColors.Text_Pink,&#10;                fontSize = 16.sp,&#10;                modifier = Modifier&#10;                    .align(Alignment.CenterEnd)&#10;                    .clickable { navController.navigate(&quot;interest_select&quot;) }&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(40.dp))&#10;&#10;        // Title&#10;        Text(&#10;            text = &quot;I am a&quot;,&#10;            fontWeight = FontWeight.Bold,&#10;            fontSize = 28.sp,&#10;            color = AppColors.Text_LightBlack,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(90.dp))&#10;&#10;        // Gender Options&#10;        // Gender Options&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp) // padding so với background màn hình&#10;        ) {&#10;            GenderOption(&#10;                label = &quot;Woman&quot;,&#10;                isSelected = selectedGender == &quot;Woman&quot;,&#10;                onClick = { selectedGender = &quot;Woman&quot; }&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            GenderOption(&#10;                label = &quot;Man&quot;,&#10;                isSelected = selectedGender == &quot;Man&quot;,&#10;                onClick = { selectedGender = &quot;Man&quot; }&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            GenderOption(&#10;                label = &quot;Choose another&quot;,&#10;                isSelected = selectedGender == &quot;Other&quot;,&#10;                onClick = { selectedGender = &quot;Other&quot; },&#10;                showArrow = true&#10;            )&#10;        }&#10;&#10;&#10;        Spacer(modifier = Modifier.weight(1f))&#10;&#10;        // Continue Button&#10;        Button(&#10;            onClick = {&#10;                // TODO: Save gender và chuyển sang màn tiếp theo&#10;                navController.navigate(&quot;interest_select&quot;)&#10;            },&#10;            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFFFF1FC)),&#10;            shape = RoundedCornerShape(16.dp),&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(56.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Continue&quot;,&#10;                color = AppColors.Main_Primary,&#10;                fontSize = 16.sp&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GenderOption(&#10;    label: String,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    showArrow: Boolean = false&#10;) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(56.dp)&#10;            .clip(RoundedCornerShape(16.dp))&#10;            .background(if (isSelected) AppColors.Main_Secondary1 else Color(0xFFF8F8F8))&#10;            .clickable { onClick() }&#10;            .padding(horizontal = 16.dp),&#10;        verticalAlignment = Alignment.CenterVertically,&#10;        horizontalArrangement = Arrangement.SpaceBetween&#10;    ) {&#10;        Text(&#10;            text = label,&#10;            fontSize = 16.sp,&#10;            fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal,&#10;            color = if (isSelected) AppColors.Main_Primary else AppColors.Text_LightBlack&#10;        )&#10;&#10;        when {&#10;            isSelected -&gt; Icon(Icons.Default.Check, contentDescription = &quot;Selected&quot;, tint = AppColors.Main_Primary)&#10;            showArrow -&gt; Icon(Icons.Default.KeyboardArrowRight, contentDescription = &quot;Arrow&quot;, tint = Color.Gray)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.profile&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Check&#10;import androidx.compose.material.icons.filled.KeyboardArrowRight&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.viewmodel.ProfileViewModel&#10;&#10;&#10;@Composable&#10;fun GenderSelectionScreen(navController: NavController) {&#10;    var selectedGender by remember { mutableStateOf(&quot;Man&quot;) }&#10;    val profileViewModel: ProfileViewModel = viewModel()&#10;    var isSaving by remember { mutableStateOf(false) }&#10;    var saveError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;            .padding(horizontal = 24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Header: Back + Skip&#10;        Box(modifier = Modifier.fillMaxWidth()) {&#10;            // Back&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(RoundedCornerShape(12.dp))&#10;                    .background(Color.White)&#10;                    .clickable { navController.popBackStack() }&#10;                    .align(Alignment.CenterStart),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(Icons.Default.ArrowBack, contentDescription = &quot;Back&quot;, tint = AppColors.Text_Pink,)&#10;            }&#10;&#10;            // Skip&#10;            Text(&#10;                text = &quot;Skip&quot;,&#10;                color = AppColors.Text_Pink,&#10;                fontSize = 16.sp,&#10;                modifier = Modifier&#10;                    .align(Alignment.CenterEnd)&#10;                    .clickable { navController.navigate(&quot;interest_select&quot;) }&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(40.dp))&#10;&#10;        // Title&#10;        Text(&#10;            text = &quot;I am a&quot;,&#10;            fontWeight = FontWeight.Bold,&#10;            fontSize = 28.sp,&#10;            color = AppColors.Text_LightBlack,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(90.dp))&#10;&#10;        // Gender Options&#10;        // Gender Options&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp) // padding so với background màn hình&#10;        ) {&#10;            GenderOption(&#10;                label = &quot;Woman&quot;,&#10;                isSelected = selectedGender == &quot;Woman&quot;,&#10;                onClick = { selectedGender = &quot;Woman&quot; }&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            GenderOption(&#10;                label = &quot;Man&quot;,&#10;                isSelected = selectedGender == &quot;Man&quot;,&#10;                onClick = { selectedGender = &quot;Man&quot; }&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            GenderOption(&#10;                label = &quot;Choose another&quot;,&#10;                isSelected = selectedGender == &quot;Other&quot;,&#10;                onClick = { selectedGender = &quot;Other&quot; },&#10;                showArrow = true&#10;            )&#10;        }&#10;&#10;&#10;        Spacer(modifier = Modifier.weight(1f))&#10;&#10;        // Continue Button&#10;        Button(&#10;            onClick = {&#10;                isSaving = true&#10;                saveError = null&#10;                profileViewModel.updateGender(&#10;                    gender = selectedGender,&#10;                    onSuccess = {&#10;                        isSaving = false&#10;                        navController.navigate(&quot;interest_select&quot;)&#10;                    },&#10;                    onFailure = { e -&gt;&#10;                        isSaving = false&#10;                        saveError = e.message&#10;                    }&#10;                )&#10;            },&#10;            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFFFF1FC)),&#10;            shape = RoundedCornerShape(16.dp),&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(56.dp)&#10;        ) {&#10;            if (isSaving) {&#10;                CircularProgressIndicator(modifier = Modifier.size(24.dp), color = AppColors.Main_Primary)&#10;            } else {&#10;                Text(&#10;                    text = &quot;Continue&quot;,&#10;                    color = AppColors.Main_Primary,&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;        if (saveError != null) {&#10;            Text(&#10;                text = saveError ?: &quot;&quot;,&#10;                color = Color.Red,&#10;                modifier = Modifier.padding(top = 8.dp)&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GenderOption(&#10;    label: String,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    showArrow: Boolean = false&#10;) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(56.dp)&#10;            .clip(RoundedCornerShape(16.dp))&#10;            .background(if (isSelected) AppColors.Main_Secondary1 else Color(0xFFF8F8F8))&#10;            .clickable { onClick() }&#10;            .padding(horizontal = 16.dp),&#10;        verticalAlignment = Alignment.CenterVertically,&#10;        horizontalArrangement = Arrangement.SpaceBetween&#10;    ) {&#10;        Text(&#10;            text = label,&#10;            fontSize = 16.sp,&#10;            fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal,&#10;            color = if (isSelected) AppColors.Main_Primary else AppColors.Text_LightBlack&#10;        )&#10;&#10;        when {&#10;            isSelected -&gt; Icon(Icons.Default.Check, contentDescription = &quot;Selected&quot;, tint = AppColors.Main_Primary)&#10;            showArrow -&gt; Icon(Icons.Default.KeyboardArrowRight, contentDescription = &quot;Arrow&quot;, tint = Color.Gray)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/profile/InterestSelectionScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/profile/InterestSelectionScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.profile&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.dating.R&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.compose.ui.text.style.TextAlign&#10;&#10;data class Interest(&#10;    val name: String,&#10;    val icon: Int&#10;)&#10;&#10;@Composable&#10;fun InterestSelectionScreen(navController: NavController) {&#10;    val interests = listOf(&#10;        Interest(&quot;Photography&quot;, R.drawable.ic_interest_photography),&#10;        Interest(&quot;Shopping&quot;, R.drawable.ic_interest_shopping),&#10;        Interest(&quot;Karaoke&quot;, R.drawable.ic_interest_karaoke),&#10;        Interest(&quot;Yoga&quot;, R.drawable.ic_interest_yoga),&#10;        Interest(&quot;Cooking&quot;, R.drawable.ic_interest_cooking),&#10;        Interest(&quot;Tennis&quot;, R.drawable.ic_interest_tennis),&#10;        Interest(&quot;Run&quot;, R.drawable.ic_interest_run),&#10;        Interest(&quot;Swimming&quot;, R.drawable.ic_interest_swimming),&#10;        Interest(&quot;Art&quot;, R.drawable.ic_interest_art),&#10;        Interest(&quot;Traveling&quot;, R.drawable.ic_interest_travelling),&#10;        Interest(&quot;Extreme&quot;, R.drawable.ic_interest_extreme),&#10;        Interest(&quot;Music&quot;, R.drawable.ic_interest_music),&#10;        Interest(&quot;Drink&quot;, R.drawable.ic_interest_drink),&#10;        Interest(&quot;Video games&quot;, R.drawable.ic_interest_game)&#10;    )&#10;&#10;    val selectedInterests = remember { mutableStateListOf&lt;String&gt;() }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;            .padding(horizontal = 24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Header&#10;        Box(modifier = Modifier.fillMaxWidth()) {&#10;            // Back&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(RoundedCornerShape(12.dp))&#10;                    .background(Color.White)&#10;                    .clickable { navController.popBackStack() }&#10;                    .align(Alignment.CenterStart),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(Icons.Default.ArrowBack, contentDescription = &quot;Back&quot;, tint = AppColors.Text_Pink,)&#10;            }&#10;&#10;            // Skip&#10;            Text(&#10;                text = &quot;Skip&quot;,&#10;                color = AppColors.Text_Pink,&#10;                fontSize = 16.sp,&#10;                modifier = Modifier&#10;                    .align(Alignment.CenterEnd)&#10;                    .clickable { navController.navigate(&quot;search_friend&quot;) }&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;        // Title&#10;        Box(modifier = Modifier.fillMaxWidth()) {&#10;            Text(&#10;                text = &quot;Your interests&quot;,&#10;                fontWeight = FontWeight.Bold,&#10;                fontSize = 26.sp,&#10;                color = AppColors.Text_Black,&#10;                modifier = Modifier.align(Alignment.Center)&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Subtitle&#10;        Text(&#10;            text = &quot;Select a few of your interests and let everyone\nknow what you’re passionate about.&quot;,&#10;            color = AppColors.Text_LightBlack,&#10;            fontSize = 14.sp,&#10;            textAlign = TextAlign.Center,&#10;            modifier = Modifier&#10;                .fillMaxWidth()              // chiếm hết chiều ngang&#10;                .align(Alignment.CenterHorizontally) // căn giữa trong Column&#10;        )&#10;&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // Grid of interests (2 columns)&#10;        LazyVerticalGrid(&#10;            columns = GridCells.Fixed(2),&#10;            modifier = Modifier.weight(1f),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            items(interests) { interest -&gt;&#10;                val isSelected = selectedInterests.contains(interest.name)&#10;                InterestItem(&#10;                    interest = interest,&#10;                    isSelected = isSelected,&#10;                    onClick = {&#10;                        if (isSelected) selectedInterests.remove(interest.name)&#10;                        else selectedInterests.add(interest.name)&#10;                    }&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Continue Button&#10;        Button(&#10;            onClick = {&#10;                // TODO: save selectedInterests&#10;                navController.navigate(&quot;search_friend&quot;) // Navigate to the next screen&#10;            },&#10;            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFFFF1FC)),&#10;            shape = RoundedCornerShape(16.dp),&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(56.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Continue&quot;,&#10;                color = Color(0xFF2B0A2B),&#10;                fontSize = 16.sp&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;    }&#10;}&#10;&#10;@Composable&#10;fun InterestItem(interest: Interest, isSelected: Boolean, onClick: () -&gt; Unit) {&#10;    Box(&#10;        modifier = Modifier&#10;            .height(50.dp)&#10;            .clip(RoundedCornerShape(16.dp))&#10;            .background(if (isSelected) AppColors.Text_Pink  else Color(0xFFF8F8F8))&#10;            .clickable { onClick() }&#10;            .padding(horizontal = 12.dp),&#10;        contentAlignment = Alignment.CenterStart&#10;    ) {&#10;        Row(verticalAlignment = Alignment.CenterVertically, horizontalArrangement = Arrangement.spacedBy(8.dp)) {&#10;            Icon(&#10;                painter = painterResource(id = interest.icon),&#10;                contentDescription = interest.name,&#10;                tint = if (isSelected) AppColors.Main_Primary else AppColors.Main_Primary&#10;            )&#10;            Text(&#10;                text = interest.name,&#10;                color = if (isSelected) Color.White else AppColors.Main_Primary,&#10;                fontSize = 14.sp,&#10;                fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.profile&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.dating.R&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.viewmodel.ProfileViewModel&#10;&#10;data class Interest(&#10;    val name: String,&#10;    val icon: Int&#10;)&#10;&#10;@Composable&#10;fun InterestSelectionScreen(navController: NavController) {&#10;    val interests = listOf(&#10;        Interest(&quot;Photography&quot;, R.drawable.ic_interest_photography),&#10;        Interest(&quot;Shopping&quot;, R.drawable.ic_interest_shopping),&#10;        Interest(&quot;Karaoke&quot;, R.drawable.ic_interest_karaoke),&#10;        Interest(&quot;Yoga&quot;, R.drawable.ic_interest_yoga),&#10;        Interest(&quot;Cooking&quot;, R.drawable.ic_interest_cooking),&#10;        Interest(&quot;Tennis&quot;, R.drawable.ic_interest_tennis),&#10;        Interest(&quot;Run&quot;, R.drawable.ic_interest_run),&#10;        Interest(&quot;Swimming&quot;, R.drawable.ic_interest_swimming),&#10;        Interest(&quot;Art&quot;, R.drawable.ic_interest_art),&#10;        Interest(&quot;Traveling&quot;, R.drawable.ic_interest_travelling),&#10;        Interest(&quot;Extreme&quot;, R.drawable.ic_interest_extreme),&#10;        Interest(&quot;Music&quot;, R.drawable.ic_interest_music),&#10;        Interest(&quot;Drink&quot;, R.drawable.ic_interest_drink),&#10;        Interest(&quot;Video games&quot;, R.drawable.ic_interest_game)&#10;    )&#10;&#10;    val selectedInterests = remember { mutableStateListOf&lt;String&gt;() }&#10;    val profileViewModel: ProfileViewModel = viewModel()&#10;    var isSaving by remember { mutableStateOf(false) }&#10;    var saveError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;            .padding(horizontal = 24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Header&#10;        Box(modifier = Modifier.fillMaxWidth()) {&#10;            // Back&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(RoundedCornerShape(12.dp))&#10;                    .background(Color.White)&#10;                    .clickable { navController.popBackStack() }&#10;                    .align(Alignment.CenterStart),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(Icons.Default.ArrowBack, contentDescription = &quot;Back&quot;, tint = AppColors.Text_Pink,)&#10;            }&#10;&#10;            // Skip&#10;            Text(&#10;                text = &quot;Skip&quot;,&#10;                color = AppColors.Text_Pink,&#10;                fontSize = 16.sp,&#10;                modifier = Modifier&#10;                    .align(Alignment.CenterEnd)&#10;                    .clickable { navController.navigate(&quot;search_friend&quot;) }&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;        // Title&#10;        Box(modifier = Modifier.fillMaxWidth()) {&#10;            Text(&#10;                text = &quot;Your interests&quot;,&#10;                fontWeight = FontWeight.Bold,&#10;                fontSize = 26.sp,&#10;                color = AppColors.Text_Black,&#10;                modifier = Modifier.align(Alignment.Center)&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Subtitle&#10;        Text(&#10;            text = &quot;Select a few of your interests and let everyone\nknow what you’re passionate about.&quot;,&#10;            color = AppColors.Text_LightBlack,&#10;            fontSize = 14.sp,&#10;            textAlign = TextAlign.Center,&#10;            modifier = Modifier&#10;                .fillMaxWidth()              // chiếm hết chiều ngang&#10;                .align(Alignment.CenterHorizontally) // căn giữa trong Column&#10;        )&#10;&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // Grid of interests (2 columns)&#10;        LazyVerticalGrid(&#10;            columns = GridCells.Fixed(2),&#10;            modifier = Modifier.weight(1f),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            items(interests) { interest -&gt;&#10;                val isSelected = selectedInterests.contains(interest.name)&#10;                InterestItem(&#10;                    interest = interest,&#10;                    isSelected = isSelected,&#10;                    onClick = {&#10;                        if (isSelected) selectedInterests.remove(interest.name)&#10;                        else selectedInterests.add(interest.name)&#10;                    }&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;        Button(&#10;            onClick = {&#10;                isSaving = true&#10;                saveError = null&#10;                profileViewModel.updateInterests(&#10;                    interests = selectedInterests.toList(),&#10;                    onSuccess = {&#10;                        isSaving = false&#10;                        navController.navigate(&quot;search_friend&quot;)&#10;                    },&#10;                    onFailure = { e -&gt;&#10;                        isSaving = false&#10;                        saveError = e.message&#10;                    }&#10;                )&#10;            },&#10;            enabled = selectedInterests.isNotEmpty() &amp;&amp; !isSaving,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(56.dp),&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = AppColors.Main_Secondary1,&#10;                disabledContainerColor = Color.LightGray&#10;            )&#10;        ) {&#10;            if (isSaving) {&#10;                CircularProgressIndicator(modifier = Modifier.size(24.dp), color = AppColors.Main_Primary)&#10;            } else {&#10;                Text(&#10;                    text = &quot;Confirm&quot;,&#10;                    color = AppColors.Main_Primary,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;        }&#10;        if (saveError != null) {&#10;            Text(&#10;                text = saveError ?: &quot;&quot;,&#10;                color = Color.Red,&#10;                modifier = Modifier.padding(top = 8.dp)&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;    }&#10;}&#10;&#10;@Composable&#10;fun InterestItem(interest: Interest, isSelected: Boolean, onClick: () -&gt; Unit) {&#10;    Box(&#10;        modifier = Modifier&#10;            .height(50.dp)&#10;            .clip(RoundedCornerShape(16.dp))&#10;            .background(if (isSelected) AppColors.Text_Pink  else Color(0xFFF8F8F8))&#10;            .clickable { onClick() }&#10;            .padding(horizontal = 12.dp),&#10;        contentAlignment = Alignment.CenterStart&#10;    ) {&#10;        Row(verticalAlignment = Alignment.CenterVertically, horizontalArrangement = Arrangement.spacedBy(8.dp)) {&#10;            Icon(&#10;                painter = painterResource(id = interest.icon),&#10;                contentDescription = interest.name,&#10;                tint = if (isSelected) AppColors.Main_Primary else AppColors.Main_Primary&#10;            )&#10;            Text(&#10;                text = interest.name,&#10;                color = if (isSelected) Color.White else AppColors.Main_Primary,&#10;                fontSize = 14.sp,&#10;                fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/AuthViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/AuthViewModel.kt" />
              <option name="originalContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.Resource&#10;import com.example.dating.data.model.repository.AuthRepository&#10;import com.google.firebase.auth.FirebaseUser&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class AuthViewModel @Inject constructor(&#10;    private val repository: AuthRepository&#10;) : ViewModel() {&#10;&#10;    private val _loginFlow = MutableStateFlow&lt;Resource&lt;FirebaseUser&gt;?&gt;(null)&#10;    val loginFlow: StateFlow&lt;Resource&lt;FirebaseUser&gt;?&gt; = _loginFlow&#10;&#10;    private val _signupFlow = MutableStateFlow&lt;Resource&lt;FirebaseUser&gt;?&gt;(null)&#10;    val signupFlow: StateFlow&lt;Resource&lt;FirebaseUser&gt;?&gt; = _signupFlow&#10;&#10;    val currentUser: FirebaseUser?&#10;        get() = repository.currentUser&#10;&#10;    init {&#10;        if (repository.currentUser != null) {&#10;            _loginFlow.value = Resource.Success(repository.currentUser!!)&#10;        }&#10;    }&#10;&#10;    fun loginUser(email: String, password: String) = viewModelScope.launch {&#10;        _loginFlow.value = Resource.Loading&#10;        val result = repository.login(email, password)&#10;        _loginFlow.value = result&#10;    }&#10;&#10;    fun signupUser(name: String, email: String, password: String) = viewModelScope.launch {&#10;        _signupFlow.value = Resource.Loading&#10;        val result = repository.signup(name, email, password)&#10;        _signupFlow.value = result&#10;    }&#10;&#10;    fun logout() {&#10;        repository.logout()&#10;        _loginFlow.value = null&#10;        _signupFlow.value = null&#10;    }&#10;&#10;    suspend fun signupUserWithEmailVerification(email: String, password: String): String? {&#10;        val result = repository.signupWithEmailVerification(email, password)&#10;        return result&#10;    }&#10;&#10;    suspend fun checkEmailVerified(): Boolean {&#10;        val user = repository.currentUser&#10;        user?.reload()?.await()&#10;        return user?.isEmailVerified == true&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.Resource&#10;import com.example.dating.data.model.repository.AuthRepository&#10;import com.google.firebase.auth.FirebaseUser&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class AuthViewModel @Inject constructor(&#10;    private val repository: AuthRepository&#10;) : ViewModel() {&#10;&#10;    private val _loginFlow = MutableStateFlow&lt;Resource&lt;FirebaseUser&gt;?&gt;(null)&#10;    val loginFlow: StateFlow&lt;Resource&lt;FirebaseUser&gt;?&gt; = _loginFlow&#10;&#10;    private val _signupFlow = MutableStateFlow&lt;Resource&lt;FirebaseUser&gt;?&gt;(null)&#10;    val signupFlow: StateFlow&lt;Resource&lt;FirebaseUser&gt;?&gt; = _signupFlow&#10;&#10;    val currentUser: FirebaseUser?&#10;        get() = repository.currentUser&#10;&#10;    init {&#10;        if (repository.currentUser != null) {&#10;            _loginFlow.value = Resource.Success(repository.currentUser!!)&#10;        }&#10;    }&#10;&#10;    fun loginUser(email: String, password: String) = viewModelScope.launch {&#10;        _loginFlow.value = Resource.Loading&#10;        val result = repository.login(email, password)&#10;        _loginFlow.value = result&#10;    }&#10;&#10;    fun signupUser(name: String, email: String, password: String) = viewModelScope.launch {&#10;        _signupFlow.value = Resource.Loading&#10;        val result = repository.signup(name, email, password)&#10;        _signupFlow.value = result&#10;    }&#10;&#10;    fun logout() {&#10;        repository.logout()&#10;        _loginFlow.value = null&#10;        _signupFlow.value = null&#10;    }&#10;&#10;    suspend fun signupUserWithEmailVerification(email: String, password: String): String? {&#10;        val result = repository.signupWithEmailVerification(email, password)&#10;        return result&#10;    }&#10;&#10;    suspend fun checkEmailVerified(): Boolean {&#10;        val user = repository.currentUser&#10;        user?.reload()?.await()&#10;        return user?.isEmailVerified == true&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>