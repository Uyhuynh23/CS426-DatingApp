<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/MatchRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/MatchRepository.kt" />
              <option name="updatedContent" value="package com.example.dating.data&#10;&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class MatchRepository {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    suspend fun saveMatch(userId1: String, userId2: String, status: Boolean) {&#10;        // Ensure userId1 &lt; userId2 alphabetically&#10;        val (firstId, secondId) = if (userId1 &lt; userId2) userId1 to userId2 else userId2 to userId1&#10;        val matchData = hashMapOf(&#10;            &quot;userId1&quot; to firstId,&#10;            &quot;userId2&quot; to secondId,&#10;            &quot;timestamp&quot; to Timestamp.now(),&#10;            &quot;status&quot; to status&#10;        )&#10;        // Check for duplicate (userId1/userId2 only)&#10;        val query = db.collection(&quot;match&quot;)&#10;            .whereEqualTo(&quot;userId1&quot;, firstId)&#10;            .whereEqualTo(&quot;userId2&quot;, secondId)&#10;            .get().await()&#10;        android.util.Log.d(&quot;MatchRepository&quot;, &quot;MatchQuery: userId1=$firstId, userId2=$secondId, resultCount=${query.size()}&quot;)&#10;        if (query.isEmpty) {&#10;            db.collection(&quot;match&quot;).add(matchData)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/Interest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/Interest.kt" />
              <option name="originalContent" value="package com.example.dating.data.model&#10;&#10;class Interest {&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model&#10;&#10;data class Interest(&#10;    val name: String,&#10;    val icon: Int&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/MatchRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/MatchRepository.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class MatchRepository @Inject constructor() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    suspend fun saveMatch(userId1: String, userId2: String, status: Boolean) {&#10;        // Ensure userId1 &lt; userId2 alphabetically&#10;        val (firstId, secondId) = if (userId1 &lt; userId2) userId1 to userId2 else userId2 to userId1&#10;        val matchData = hashMapOf(&#10;            &quot;userId1&quot; to firstId,&#10;            &quot;userId2&quot; to secondId,&#10;            &quot;timestamp&quot; to Timestamp.now(),&#10;            &quot;status&quot; to status&#10;        )&#10;        // Check for duplicate (userId1/userId2 only)&#10;        val query = db.collection(&quot;match&quot;)&#10;            .whereEqualTo(&quot;userId1&quot;, firstId)&#10;            .whereEqualTo(&quot;userId2&quot;, secondId)&#10;            .get().await()&#10;        android.util.Log.d(&quot;MatchRepository&quot;, &quot;MatchQuery: userId1=$firstId, userId2=$secondId, resultCount=${query.size()}&quot;)&#10;        if (query.isEmpty) {&#10;            db.collection(&quot;match&quot;).add(matchData)&#10;        }&#10;    }&#10;&#10;    suspend fun getUserDocument(userId: String): Map&lt;String, Any?&gt; {&#10;        val doc = db.collection(&quot;users&quot;).document(userId).get().await()&#10;        return doc.data ?: emptyMap()&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class MatchRepository @Inject constructor() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    suspend fun saveMatch(userId1: String, userId2: String, status: Boolean) {&#10;        // Ensure userId1 &lt; userId2 alphabetically&#10;        val (firstId, secondId) = if (userId1 &lt; userId2) userId1 to userId2 else userId2 to userId1&#10;        val matchData = hashMapOf(&#10;            &quot;userId1&quot; to firstId,&#10;            &quot;userId2&quot; to secondId,&#10;            &quot;timestamp&quot; to Timestamp.now(),&#10;            &quot;status&quot; to status&#10;        )&#10;        // Check for duplicate (userId1/userId2 only)&#10;        val query = db.collection(&quot;match&quot;)&#10;            .whereEqualTo(&quot;userId1&quot;, firstId)&#10;            .whereEqualTo(&quot;userId2&quot;, secondId)&#10;            .get().await()&#10;        android.util.Log.d(&quot;MatchRepository&quot;, &quot;MatchQuery: userId1=$firstId, userId2=$secondId, resultCount=${query.size()}&quot;)&#10;        if (query.isEmpty) {&#10;            db.collection(&quot;match&quot;).add(matchData)&#10;        }&#10;    }&#10;&#10;    suspend fun getUserDocument(userId: String): Map&lt;String, Any?&gt; {&#10;        val doc = db.collection(&quot;users&quot;).document(userId).get().await()&#10;        return doc.data ?: emptyMap()&#10;    }&#10;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepositoryImpl.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;) : UserRepository {&#10;&#10;    fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            offer(snapshot?.toObject(User::class.java))&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    override suspend fun updateUser(user: User) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun saveProfile(&#10;        userId: String,&#10;        firstName: String,&#10;        lastName: String,&#10;        birthday: String?,&#10;        imageUrl: String?&#10;    ): Resource&lt;Unit&gt; {&#10;        return try {&#10;            val userMap = hashMapOf(&#10;                &quot;firstName&quot; to firstName,&#10;                &quot;lastName&quot; to lastName,&#10;                &quot;birthday&quot; to birthday,&#10;                &quot;imageUrl&quot; to imageUrl&#10;            )&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .set(userMap)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateGender(userId: String, gender: String): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;gender&quot;, gender)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateInterests(userId: String, interests: List&lt;String&gt;): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;interests&quot;, interests)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateJobLocationDescription(&#10;        userId: String,&#10;        job: String?,&#10;        location: String?,&#10;        description: String?&#10;    ): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(mapOf(&#10;                    &quot;job&quot; to job,&#10;                    &quot;location&quot; to location,&#10;                    &quot;description&quot; to description&#10;                ))&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;) : UserRepository {&#10;&#10;    override fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            trySend(snapshot?.toObject(User::class.java))&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    override suspend fun updateUser(user: User) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun saveProfile(&#10;        user: User&#10;    ) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun updateGender(uid: String, gender: String) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&quot;gender&quot;, gender).await()&#10;    }&#10;&#10;    override suspend fun updateInterests(uid: String, interests: List&lt;String&gt;) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&quot;interests&quot;, interests).await()&#10;    }&#10;&#10;    override suspend fun updateJobLocationDescription(uid: String, job: String?, location: String?, description: String?) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&#10;            mapOf(&#10;                &quot;job&quot; to job,&#10;                &quot;location&quot; to location,&#10;                &quot;description&quot; to description&#10;            )&#10;        ).await()&#10;    }&#10;&#10;    override suspend fun uploadAvatar(uid: String, uri: android.net.Uri): String {&#10;        // TODO: Implement Firebase Storage upload and return the URL&#10;        return &quot;&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/FilterDialog.kt.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/FilterDialog.kt.kt" />
              <option name="originalContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FilterScreen(navController: NavController) {&#10;    // State variables&#10;    var selectedInterest by remember { mutableStateOf(&quot;Girls&quot;) }&#10;    var location by remember { mutableStateOf(&quot;Chicago, USA&quot;) }&#10;    var distance by remember { mutableFloatStateOf(40f) }&#10;    var ageRange by remember { mutableStateOf(20f..28f) }&#10;&#10;    // Bottom sheet or dialog content&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .wrapContentHeight()&#10;            .clip(RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp))&#10;            .background(Color.White)&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        // Notch&#10;        Box(&#10;            modifier = Modifier&#10;                .width(40.dp)&#10;                .height(4.dp)&#10;                .background(Color.Gray.copy(alpha = 0.5f), CircleShape)&#10;                .align(Alignment.CenterHorizontally)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Title and Clear&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Filters&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.Black&#10;            )&#10;            TextButton(onClick = { /* TODO: Clear filters */ }) {&#10;                Text(&#10;                    text = &quot;Clear&quot;,&#10;                    color = Color(0xFFFF69B4), // Pink&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Interested in&#10;        Text(&#10;            text = &quot;Interested in&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        SegmentedButtonRow(modifier = Modifier.fillMaxWidth()) {&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Girls&quot;,&#10;                onClick = { selectedInterest = &quot;Girls&quot; },&#10;                shape = RoundedCornerShape(topStart = 8.dp, bottomStart = 8.dp)&#10;            ) {&#10;                Text(&quot;Girls&quot;)&#10;            }&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Boys&quot;,&#10;                onClick = { selectedInterest = &quot;Boys&quot; },&#10;                shape = RoundedCornerShape(0.dp)&#10;            ) {&#10;                Text(&quot;Boys&quot;)&#10;            }&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Both&quot;,&#10;                onClick = { selectedInterest = &quot;Both&quot; },&#10;                shape = RoundedCornerShape(topEnd = 8.dp, bottomEnd = 8.dp)&#10;            ) {&#10;                Text(&quot;Both&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Location&#10;        Text(&#10;            text = &quot;Location&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        OutlinedTextField(&#10;            value = location,&#10;            onValueChange = { /* Read-only, tap to select */ },&#10;            readOnly = true,&#10;            modifier = Modifier.fillMaxWidth(),&#10;            trailingIcon = {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowForward,&#10;                    contentDescription = &quot;Select location&quot;,&#10;                    tint = Color(0xFFFF0000) // Red&#10;                )&#10;            },&#10;            singleLine = true,&#10;            interactionSource = remember { MutableInteractionSource() }.also { interactionSource -&gt;&#10;                // TODO: Handle click to open location selector&#10;            }&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Distance&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;Distance&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;            Text(&#10;                text = &quot;${distance.toInt()}km&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;        Slider(&#10;            value = distance,&#10;            onValueChange = { distance = it },&#10;            valueRange = 0f..100f, // Assuming max 100km&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = SliderDefaults.colors(&#10;                thumbColor = Color(0xFFBB86FC), // Purple&#10;                activeTrackColor = Color(0xFFBB86FC),&#10;                inactiveTrackColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Age&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;Age&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;            Text(&#10;                text = &quot;${ageRange.start.toInt()}-${ageRange.endInclusive.toInt()}&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;        RangeSlider(&#10;            value = ageRange,&#10;            onValueChange = { ageRange = it },&#10;            valueRange = 18f..100f, // Assuming age range&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = SliderDefaults.colors(&#10;                thumbColor = Color(0xFFBB86FC), // Purple&#10;                activeTrackColor = Color(0xFFBB86FC),&#10;                inactiveTrackColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // Continue button&#10;        Button(&#10;            onClick = { /* TODO: Apply filters and navigate */ },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(48.dp),&#10;            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFBB86FC).copy(alpha = 0.2f)), // Light purple&#10;            shape = RoundedCornerShape(24.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Continue&quot;,&#10;                color = Color.Black,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FilterDialog(&#10;    show: Boolean,&#10;    onDismiss: () -&gt; Unit,&#10;    onApply: (selectedInterest: String, location: String, distance: Float, ageRange: ClosedFloatingPointRange&lt;Float&gt;) -&gt; Unit&#10;) {&#10;    if (!show) return&#10;    var selectedInterest by remember { mutableStateOf(&quot;Girls&quot;) }&#10;    var location by remember { mutableStateOf(&quot;Chicago, USA&quot;) }&#10;    var distance by remember { mutableStateOf(40f) }&#10;    var ageRange by remember { mutableStateOf(20f..28f) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    onApply(selectedInterest, location, distance, ageRange)&#10;                    onDismiss()&#10;                },&#10;                modifier = Modifier.fillMaxWidth().height(48.dp),&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFBB86FC).copy(alpha = 0.2f)),&#10;                shape = RoundedCornerShape(24.dp)&#10;            ) {&#10;                Text(&quot;Continue&quot;, color = Color.Black, fontSize = 16.sp, fontWeight = FontWeight.Bold)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;, color = Color.Gray)&#10;            }&#10;        },&#10;        title = {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&quot;Filters&quot;, fontSize = 20.sp, fontWeight = FontWeight.Bold, color = Color.Black)&#10;                TextButton(onClick = {&#10;                    selectedInterest = &quot;Girls&quot;&#10;                    location = &quot;Chicago, USA&quot;&#10;                    distance = 40f&#10;                    ageRange = 20f..28f&#10;                }) {&#10;                    Text(&quot;Clear&quot;, color = Color(0xFFFF69B4), fontSize = 16.sp)&#10;                }&#10;            }&#10;        },&#10;        text = {&#10;            Column(modifier = Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {&#10;                // Interested in&#10;                Text(&quot;Interested in&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.Center) {&#10;                    FilterSegmentButton(&quot;Girls&quot;, selectedInterest == &quot;Girls&quot;) { selectedInterest = &quot;Girls&quot; }&#10;                    FilterSegmentButton(&quot;Boys&quot;, selectedInterest == &quot;Boys&quot;) { selectedInterest = &quot;Boys&quot; }&#10;                    FilterSegmentButton(&quot;Both&quot;, selectedInterest == &quot;Both&quot;) { selectedInterest = &quot;Both&quot; }&#10;                }&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Location&#10;                Text(&quot;Location&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                OutlinedTextField(&#10;                    value = location,&#10;                    onValueChange = { location = it },&#10;                    readOnly = false,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    trailingIcon = {&#10;                        Icon(imageVector = Icons.Default.ArrowForward, contentDescription = &quot;Select location&quot;, tint = Color(0xFFFF0000))&#10;                    },&#10;                    singleLine = true&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Distance&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Distance&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${distance.toInt()}km&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                Slider(&#10;                    value = distance,&#10;                    onValueChange = { distance = it },&#10;                    valueRange = 0f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = Color(0xFFBB86FC),&#10;                        activeTrackColor = Color(0xFFBB86FC),&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Age&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Age&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${ageRange.start.toInt()}-${ageRange.endInclusive.toInt()}&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                RangeSlider(&#10;                    value = ageRange,&#10;                    onValueChange = { ageRange = it },&#10;                    valueRange = 18f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = Color(0xFFBB86FC),&#10;                        activeTrackColor = Color(0xFFBB86FC),&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;            }&#10;        },&#10;        shape = RoundedCornerShape(24.dp),&#10;        containerColor = Color.White&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun FilterSegmentButton(text: String, selected: Boolean, onClick: () -&gt; Unit) {&#10;    Button(&#10;        onClick = onClick,&#10;        colors = ButtonDefaults.buttonColors(&#10;            containerColor = if (selected) Color(0xFFBB86FC) else Color.LightGray,&#10;            contentColor = if (selected) Color.White else Color.Black&#10;        ),&#10;        modifier = Modifier&#10;            .weight(1f)&#10;            .height(36.dp)&#10;            .padding(horizontal = 2.dp),&#10;        shape = RoundedCornerShape(8.dp)&#10;    ) {&#10;        Text(text)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class HomeViewModel : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val _addFavoriteState = MutableStateFlow&lt;Result&lt;Unit&gt;?&gt;(null)&#10;    val addFavoriteState: StateFlow&lt;Result&lt;Unit&gt;?&gt; = _addFavoriteState&#10;&#10;    fun addFavorite(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        val favorite = hashMapOf(&#10;            &quot;likerId&quot; to likerId,&#10;            &quot;likedId&quot; to likedId,&#10;            &quot;timestamp&quot; to Timestamp.now()&#10;        )&#10;        viewModelScope.launch {&#10;            try {&#10;                db.collection(&quot;favorites&quot;).add(favorite)&#10;                _addFavoriteState.value = Result.success(Unit)&#10;            } catch (e: Exception) {&#10;                _addFavoriteState.value = Result.failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearAddFavoriteState() {&#10;        _addFavoriteState.value = null&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/FavoriteViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/FavoriteViewModel.kt" />
              <option name="originalContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.FavoriteRepository&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;&#10;@HiltViewModel&#10;class FavoriteViewModel @Inject constructor(&#10;    private val favoriteRepository: FavoriteRepository&#10;) : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val _likedMeProfiles = MutableStateFlow&lt;Resource&lt;List&lt;String&gt;&gt;&gt;(Resource.Loading)&#10;    val likedMeProfiles: StateFlow&lt;Resource&lt;List&lt;String&gt;&gt;&gt; = _likedMeProfiles&#10;&#10;    private val _usersState = MutableStateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt;(Resource.Loading)&#10;    val usersState: StateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt; = _usersState&#10;&#10;    init {&#10;        fetchFavorites()&#10;    }&#10;&#10;    fun fetchFavorites() {&#10;        val currentUserId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        android.util.Log.d(&quot;FavoriteViewModel&quot;, &quot;likedMeIds: $currentUserId&quot;)&#10;&#10;        viewModelScope.launch {&#10;            try {&#10;                _likedMeProfiles.value = Resource.Loading&#10;                val likedMeSnapshot = favoriteRepository.getFavoritesByLikedId(currentUserId)&#10;                val likedMeIds = likedMeSnapshot.mapNotNull { it[&quot;likerId&quot;] as? String }&#10;                android.util.Log.d(&quot;FavoriteViewModel&quot;, &quot;likedMeIds: $likedMeIds&quot;)&#10;                _likedMeProfiles.value = Resource.Success(likedMeIds)&#10;            } catch (e: Exception) {&#10;                _likedMeProfiles.value = Resource.Failure(e as? Exception ?: Exception(e.message))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteFavorite(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            try {&#10;                favoriteRepository.deleteFavorite(likerId, likedId)&#10;                fetchFavorites() // Refresh after delete&#10;            } catch (_: Exception) {}&#10;        }&#10;    }&#10;&#10;    fun getUserProfilesByIds(uids: List&lt;String&gt;) {&#10;        viewModelScope.launch {&#10;            _usersState.value = Resource.Loading&#10;            try {&#10;                val users = favoriteRepository.getUserProfilesByIds(uids)&#10;                _usersState.value = Resource.Success(users)&#10;            } catch (e: Exception) {&#10;                _usersState.value = Resource.Failure(e as? Exception ?: Exception(e.message))&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.FavoriteRepository&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;&#10;@HiltViewModel&#10;class FavoriteViewModel @Inject constructor(&#10;    private val favoriteRepository: FavoriteRepository&#10;) : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    private val _usersState = MutableStateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt;(Resource.Loading)&#10;    val usersState: StateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt; = _usersState&#10;&#10;    init {&#10;        fetchFavorites()&#10;    }&#10;&#10;    fun fetchFavorites() {&#10;        val currentUserId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        android.util.Log.d(&quot;FavoriteViewModel&quot;, &quot;currentUserId: $currentUserId&quot;)&#10;&#10;        viewModelScope.launch {&#10;            try {&#10;                _usersState.value = Resource.Loading&#10;&#10;                // Get list of users who liked me&#10;                val likedMeSnapshot = favoriteRepository.getFavoritesByLikedId(currentUserId)&#10;                val likedMeIds = likedMeSnapshot.mapNotNull { it[&quot;likerId&quot;] as? String }&#10;                android.util.Log.d(&quot;FavoriteViewModel&quot;, &quot;likedMeIds: $likedMeIds&quot;)&#10;&#10;                // If empty, return immediately&#10;                if (likedMeIds.isEmpty()) {&#10;                    _usersState.value = Resource.Success(emptyList())&#10;                    return@launch&#10;                }&#10;&#10;                // Fetch user profiles&#10;                val users = getUserProfilesByIds(likedMeIds)&#10;                _usersState.value = Resource.Success(users)&#10;            } catch (e: Exception) {&#10;                _usersState.value = Resource.Failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    private suspend fun getUserProfilesByIds(uids: List&lt;String&gt;): List&lt;User&gt; {&#10;        return try {&#10;            val snapshot = db.collection(&quot;users&quot;)&#10;                .whereIn(&quot;uid&quot;, uids)&#10;                .get()&#10;                .await()&#10;&#10;            snapshot.documents.mapNotNull { it.toObject(User::class.java) }&#10;        } catch (e: Exception) {&#10;            android.util.Log.e(&quot;FavoriteViewModel&quot;, &quot;Error fetching users: &quot;, e)&#10;            emptyList()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/HomeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/HomeViewModel.kt" />
              <option name="originalContent" value="package com.example.dating.viewmodel&#10;&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.FavoriteRepository&#10;import com.example.dating.data.model.repository.MatchRepository&#10;import com.example.dating.data.model.repository.HomeRepository&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;&#10;@HiltViewModel&#10;class HomeViewModel @Inject constructor(&#10;    private val matchRepository: MatchRepository,&#10;    private val favoriteRepository: FavoriteRepository,&#10;    private val homeRepository: HomeRepository&#10;) : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    private val _profilesState = MutableStateFlow&lt;Resource&lt;List&lt;String&gt;&gt;&gt;(Resource.Loading)&#10;    val profilesState: StateFlow&lt;Resource&lt;List&lt;String&gt;&gt;&gt; = _profilesState&#10;&#10;    private val _matchFoundUserId = MutableStateFlow&lt;String?&gt;(null)&#10;    val matchFoundUserId: StateFlow&lt;String?&gt; = _matchFoundUserId&#10;&#10;    private val _usersState = MutableStateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt;(Resource.Loading)&#10;    val usersState: StateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt; = _usersState&#10;&#10;    init {&#10;        fetchHome()&#10;    }&#10;&#10;    fun fetchHome() {&#10;        viewModelScope.launch {&#10;            _profilesState.value = Resource.Loading&#10;            try {&#10;                val result = homeRepository.fetchProfiles() // Should return List&lt;String&gt; (UIDs)&#10;                _profilesState.value = Resource.Success(result)&#10;            } catch (e: Exception) {&#10;                _profilesState.value = Resource.Failure(e as? Exception ?: Exception(e.message))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun likeProfile(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            try {&#10;                // Add favorite using repository&#10;                favoriteRepository.addFavorite(likerId, likedId)&#10;                // Check for match using repository&#10;                val isMatch = favoriteRepository.isMatch(likerId, likedId)&#10;                if (isMatch) {&#10;                    _matchFoundUserId.value = likedId&#10;                    android.util.Log.d(&quot;HomeViewModel&quot;, &quot;Calling MatchRepository.saveMatch with $likerId and $likedId&quot;)&#10;                    matchRepository.saveMatch(likerId, likedId, true)&#10;                } else {&#10;                    _matchFoundUserId.value = null&#10;                    android.util.Log.d(&quot;HomeViewModel&quot;, &quot;Calling MatchRepository.saveMatch with $likerId and $likedId, status=false&quot;)&#10;                    matchRepository.saveMatch(likerId, likedId, false)&#10;                }&#10;            } catch (e: Exception) {&#10;                _profilesState.value = Resource.Failure(e as? Exception ?: Exception(e.message))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun getUserProfilesByIds(uids: List&lt;String&gt;) {&#10;        viewModelScope.launch {&#10;            _usersState.value = Resource.Loading&#10;            try {&#10;                val users = homeRepository.getUserProfilesByIds(uids)&#10;                _usersState.value = Resource.Success(users)&#10;            } catch (e: Exception) {&#10;                _usersState.value = Resource.Failure(e as? Exception ?: Exception(e.message))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun resetMatchFoundUserId() {&#10;        _matchFoundUserId.value = null&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.viewmodel&#10;&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.FavoriteRepository&#10;import com.example.dating.data.model.repository.MatchRepository&#10;import com.example.dating.data.model.repository.HomeRepository&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;&#10;@HiltViewModel&#10;class HomeViewModel @Inject constructor(&#10;    private val matchRepository: MatchRepository,&#10;    private val favoriteRepository: FavoriteRepository,&#10;    private val homeRepository: HomeRepository&#10;) : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    private val _profilesState = MutableStateFlow&lt;Resource&lt;List&lt;String&gt;&gt;&gt;(Resource.Loading)&#10;    val profilesState: StateFlow&lt;Resource&lt;List&lt;String&gt;&gt;&gt; = _profilesState&#10;&#10;    private val _matchFoundUserId = MutableStateFlow&lt;String?&gt;(null)&#10;    val matchFoundUserId: StateFlow&lt;String?&gt; = _matchFoundUserId&#10;&#10;    private val _usersState = MutableStateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt;(Resource.Loading)&#10;    val usersState: StateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt; = _usersState&#10;&#10;    init {&#10;        fetchHome()&#10;    }&#10;&#10;    fun fetchHome() {&#10;        viewModelScope.launch {&#10;            _profilesState.value = Resource.Loading&#10;            try {&#10;                val result = homeRepository.fetchProfiles() // Should return List&lt;String&gt; (UIDs)&#10;                _profilesState.value = Resource.Success(result)&#10;            } catch (e: Exception) {&#10;                _profilesState.value = Resource.Failure(e as? Exception ?: Exception(e.message))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun likeProfile(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            try {&#10;                // Add favorite using repository&#10;                favoriteRepository.addFavorite(likerId, likedId)&#10;                // Check for match using repository&#10;                val isMatch = favoriteRepository.isMatch(likerId, likedId)&#10;                if (isMatch) {&#10;                    _matchFoundUserId.value = likedId&#10;                    android.util.Log.d(&quot;HomeViewModel&quot;, &quot;Calling MatchRepository.saveMatch with $likerId and $likedId&quot;)&#10;                    matchRepository.saveMatch(likerId, likedId, true)&#10;                } else {&#10;                    _matchFoundUserId.value = null&#10;                    android.util.Log.d(&quot;HomeViewModel&quot;, &quot;Calling MatchRepository.saveMatch with $likerId and $likedId, status=false&quot;)&#10;                    matchRepository.saveMatch(likerId, likedId, false)&#10;                }&#10;            } catch (e: Exception) {&#10;                _profilesState.value = Resource.Failure(e as? Exception ?: Exception(e.message))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun getUserProfilesByIds(uids: List&lt;String&gt;) {&#10;        viewModelScope.launch {&#10;            _usersState.value = Resource.Loading&#10;            try {&#10;                val users = homeRepository.getUserProfilesByIds(uids)&#10;                _usersState.value = Resource.Success(users)&#10;            } catch (e: Exception) {&#10;                _usersState.value = Resource.Failure(e as? Exception ?: Exception(e.message))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun fetchUserById(id: String) {&#10;        viewModelScope.launch {&#10;            _usersState.value = Resource.Loading&#10;            try {&#10;                val user = homeRepository.getUserProfilesByIds(listOf(id)).firstOrNull()&#10;                if (user != null) {&#10;                    _usersState.value = Resource.Success(listOf(user))&#10;                } else {&#10;                    _usersState.value = Resource.Failure(Exception(&quot;User not found&quot;))&#10;                }&#10;            } catch (e: Exception) {&#10;                _usersState.value = Resource.Failure(e as? Exception ?: Exception(e.message))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun resetMatchFoundUserId() {&#10;        _matchFoundUserId.value = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/MatchViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/MatchViewModel.kt" />
              <option name="originalContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.MatchRepository&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;@HiltViewModel&#10;class MatchViewModel @Inject constructor(&#10;    private val matchRepository: MatchRepository&#10;) : ViewModel() {&#10;    private val _currentUserFirstName = MutableStateFlow&lt;String&gt;(&quot;You&quot;)&#10;    val currentUserFirstName: StateFlow&lt;String&gt; = _currentUserFirstName&#10;&#10;    private val _userAvatarUrl = MutableStateFlow&lt;String?&gt;(null)&#10;    val userAvatarUrl: StateFlow&lt;String?&gt; = _userAvatarUrl&#10;&#10;    data class UserInfo(val uid: String, val firstName: String, val avatarUrl: String?)&#10;&#10;    private val _userInfo = MutableStateFlow&lt;List&lt;UserInfo&gt;&gt;(emptyList())&#10;    val userInfo: StateFlow&lt;List&lt;UserInfo&gt;&gt; = _userInfo&#10;&#10;    fun saveMatch(userId1: String, userId2: String, status: Boolean) {&#10;        viewModelScope.launch {&#10;            matchRepository.saveMatch(userId1, userId2, status)&#10;        }&#10;    }&#10;&#10;    fun fetchUsersInfo(uids: List&lt;String&gt;) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val userInfoList = uids.mapNotNull { userId -&gt;&#10;                    val userDoc = matchRepository.getUserDocument(userId)&#10;                    val firstName = userDoc[&quot;firstName&quot;] as? String ?: &quot;You&quot;&#10;                    val avatarUrl = userDoc[&quot;avatarUrl&quot;] as? String&#10;                    UserInfo(uid = userId, firstName = firstName, avatarUrl = avatarUrl)&#10;                }&#10;                _userInfo.value = userInfoList&#10;            } catch (e: Exception) {&#10;                _userInfo.value = emptyList()&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.MatchRepository&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;@HiltViewModel&#10;class MatchViewModel @Inject constructor(&#10;    private val matchRepository: MatchRepository&#10;) : ViewModel() {&#10;    private val _currentUserFirstName = MutableStateFlow&lt;String&gt;(&quot;You&quot;)&#10;    val currentUserFirstName: StateFlow&lt;String&gt; = _currentUserFirstName&#10;&#10;    private val _userAvatarUrl = MutableStateFlow&lt;String?&gt;(null)&#10;    val userAvatarUrl: StateFlow&lt;String?&gt; = _userAvatarUrl&#10;&#10;    data class UserInfo(val uid: String, val firstName: String, val avatarUrl: String?)&#10;&#10;    private val _userInfo = MutableStateFlow&lt;List&lt;UserInfo&gt;&gt;(emptyList())&#10;    val userInfo: StateFlow&lt;List&lt;UserInfo&gt;&gt; = _userInfo&#10;&#10;    fun saveMatch(userId1: String, userId2: String, status: Boolean) {&#10;        viewModelScope.launch {&#10;            matchRepository.saveMatch(userId1, userId2, status)&#10;        }&#10;    }&#10;&#10;    fun fetchUsersInfo(uids: List&lt;String&gt;) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val userInfoList = uids.mapNotNull { userId -&gt;&#10;                    val userDoc = matchRepository.getUserDocument(userId)&#10;                    val firstName = userDoc[&quot;firstName&quot;] as? String ?: &quot;You&quot;&#10;                    val avatarUrl = userDoc[&quot;avatarUrl&quot;] as? String&#10;                    UserInfo(uid = userId, firstName = firstName, avatarUrl = avatarUrl)&#10;                }&#10;                _userInfo.value = userInfoList&#10;            } catch (e: Exception) {&#10;                _userInfo.value = emptyList()&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>