<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/components/DateUtils.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/components/DateUtils.kt" />
              <option name="updatedContent" value="package com.example.dating.components&#10;&#10;import java.util.Calendar&#10;&#10;object DateUtils {&#10;    /**&#10;     * Calculates age from a birthday string supporting multiple formats.&#10;     * Supported formats: &quot;dd/MM/yyyy&quot;, &quot;yyyy-MM-dd&quot;, &quot;dd-MM-yyyy&quot;, &quot;MM/dd/yyyy&quot;&#10;     * Returns null if parsing fails.&#10;     */&#10;    fun calculateAgeFromBirthday(birthday: String?): Int? {&#10;        if (birthday == null) return null&#10;        try {&#10;            val year = birthday.split(&quot;/&quot;).getOrNull(2)?.toInt()&#10;            val currentYear = Calendar.getInstance().get(Calendar.YEAR)&#10;            if (year != null) return currentYear - year&#10;        } catch (_: Exception) {}&#10;        val formats = listOf(&quot;yyyy-MM-dd&quot;, &quot;dd-MM-yyyy&quot;, &quot;MM/dd/yyyy&quot;)&#10;        for (fmt in formats) {&#10;            try {&#10;                val sdf = java.text.SimpleDateFormat(fmt)&#10;                val date = sdf.parse(birthday)&#10;                if (date != null) {&#10;                    val dobCal = Calendar.getInstance()&#10;                    dobCal.time = date&#10;                    val birthYear = dobCal.get(Calendar.YEAR)&#10;                    val currentYear = Calendar.getInstance().get(Calendar.YEAR)&#10;                    return currentYear - birthYear&#10;                }&#10;            } catch (_: Exception) {}&#10;        }&#10;        return null&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/MatchRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/MatchRepository.kt" />
              <option name="updatedContent" value="package com.example.dating.data&#10;&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class MatchRepository {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    suspend fun saveMatch(userId1: String, userId2: String, status: Boolean) {&#10;        // Ensure userId1 &lt; userId2 alphabetically&#10;        val (firstId, secondId) = if (userId1 &lt; userId2) userId1 to userId2 else userId2 to userId1&#10;        val matchData = hashMapOf(&#10;            &quot;userId1&quot; to firstId,&#10;            &quot;userId2&quot; to secondId,&#10;            &quot;timestamp&quot; to Timestamp.now(),&#10;            &quot;status&quot; to status&#10;        )&#10;        // Check for duplicate (userId1/userId2 only)&#10;        val query = db.collection(&quot;match&quot;)&#10;            .whereEqualTo(&quot;userId1&quot;, firstId)&#10;            .whereEqualTo(&quot;userId2&quot;, secondId)&#10;            .get().await()&#10;        android.util.Log.d(&quot;MatchRepository&quot;, &quot;MatchQuery: userId1=$firstId, userId2=$secondId, resultCount=${query.size()}&quot;)&#10;        if (query.isEmpty) {&#10;            db.collection(&quot;match&quot;).add(matchData)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/FilteringRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/FilteringRepository.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.UserFilterPreferences&#10;import com.google.firebase.firestore.DocumentSnapshot&#10;import java.util.Calendar&#10;&#10;class FilteringRepository {&#10;    fun filterUser(&#10;        doc: DocumentSnapshot,&#10;        currentUserId: String,&#10;        currentUserDoc: DocumentSnapshot,&#10;        filterPrefs: UserFilterPreferences?&#10;    ): Boolean {&#10;        val uid = doc.id&#10;        if (uid == currentUserId) return false&#10;        val gender = doc.getString(&quot;gender&quot;)&#10;        val birthday = doc.getString(&quot;birthday&quot;)&#10;        val location = doc.getString(&quot;location&quot;)&#10;        val distance = (doc.get(&quot;distance&quot;) as? Long)?.toInt()&#10;        val lat = (doc.get(&quot;lat&quot;) as? Double)&#10;            ?: (doc.get(&quot;lat&quot;) as? Float)?.toDouble()&#10;            ?: (doc.get(&quot;lat&quot;) as? Long)?.toDouble()&#10;        val lng = (doc.get(&quot;lng&quot;) as? Double)&#10;            ?: (doc.get(&quot;lng&quot;) as? Float)?.toDouble()&#10;            ?: (doc.get(&quot;lng&quot;) as? Long)?.toDouble()&#10;        val currentUserLat = (currentUserDoc.get(&quot;lat&quot;) as? Double)&#10;            ?: (currentUserDoc.get(&quot;lat&quot;) as? Float)?.toDouble()&#10;            ?: (currentUserDoc.get(&quot;lat&quot;) as? Long)?.toDouble()&#10;        val currentUserLng = (currentUserDoc.get(&quot;lng&quot;) as? Double)&#10;            ?: (currentUserDoc.get(&quot;lng&quot;) as? Float)?.toDouble()&#10;            ?: (currentUserDoc.get(&quot;lng&quot;) as? Long)?.toDouble()&#10;&#10;        if (!filterGender(gender, filterPrefs)) return false&#10;        if (!filterAge(birthday, filterPrefs)) return false&#10;        if (!filterDistance(distance, filterPrefs)) return false&#10;        if (!filterLatLng(lat, lng, currentUserLat, currentUserLng, filterPrefs)) return false&#10;        return true&#10;    }&#10;&#10;    private fun filterGender(gender: String?, filterPrefs: UserFilterPreferences?): Boolean {&#10;        return !(filterPrefs?.preferredGender != null &amp;&amp; filterPrefs.preferredGender != &quot;Both&quot; &amp;&amp; gender != filterPrefs.preferredGender)&#10;    }&#10;&#10;    private fun filterAge(birthday: String?, filterPrefs: UserFilterPreferences?): Boolean {&#10;        if (filterPrefs?.minAge == null || filterPrefs.maxAge == null || birthday == null) return true&#10;        var age: Int? = null&#10;        try {&#10;            age = try {&#10;                val year = birthday.split(&quot;/&quot;).getOrNull(2)?.toInt()&#10;                val currentYear = Calendar.getInstance().get(Calendar.YEAR)&#10;                if (year != null) currentYear - year else null&#10;            } catch (e: Exception) { null }&#10;            if (age == null) {&#10;                val formats = listOf(&quot;yyyy-MM-dd&quot;, &quot;dd-MM-yyyy&quot;, &quot;MM/dd/yyyy&quot;)&#10;                for (fmt in formats) {&#10;                    try {&#10;                        val sdf = java.text.SimpleDateFormat(fmt)&#10;                        val date = sdf.parse(birthday)&#10;                        if (date != null) {&#10;                            val dobCal = Calendar.getInstance()&#10;                            dobCal.time = date&#10;                            val birthYear = dobCal.get(Calendar.YEAR)&#10;                            val currentYear = Calendar.getInstance().get(Calendar.YEAR)&#10;                            age = currentYear - birthYear&#10;                            break&#10;                        }&#10;                    } catch (e: Exception) {}&#10;                }&#10;            }&#10;        } catch (e: Exception) {}&#10;        return !(age == null || age &lt; filterPrefs.minAge || age &gt; filterPrefs.maxAge)&#10;    }&#10;&#10;    private fun filterDistance(distance: Int?, filterPrefs: UserFilterPreferences?): Boolean {&#10;        return !(filterPrefs?.maxDistance != null &amp;&amp; distance != null &amp;&amp; distance &gt; filterPrefs.maxDistance)&#10;    }&#10;&#10;    private fun filterLatLng(lat: Double?, lng: Double?, currentUserLat: Double?, currentUserLng: Double?, filterPrefs: UserFilterPreferences?): Boolean {&#10;        if (filterPrefs?.maxDistance == null || lat == null || lng == null || currentUserLat == null || currentUserLng == null) return true&#10;        val distanceKm = haversine(currentUserLat, currentUserLng, lat, lng)&#10;        return !(distanceKm &gt; filterPrefs.maxDistance)&#10;    }&#10;&#10;    private fun haversine(lat1: Double, lon1: Double, lat2: Double, lon2: Double): Double {&#10;        val R = 6371 // Earth radius in km&#10;        val dLat = Math.toRadians(lat2 - lat1)&#10;        val dLon = Math.toRadians(lon2 - lon1)&#10;        val a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +&#10;                Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) *&#10;                Math.sin(dLon / 2) * Math.sin(dLon / 2)&#10;        val c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))&#10;        return R * c&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.components.DateUtils&#10;import com.example.dating.data.model.UserFilterPreferences&#10;import com.google.firebase.firestore.DocumentSnapshot&#10;import java.util.Calendar&#10;&#10;class FilteringRepository {&#10;    fun filterUser(&#10;        doc: DocumentSnapshot,&#10;        currentUserId: String,&#10;        currentUserDoc: DocumentSnapshot,&#10;        filterPrefs: UserFilterPreferences?&#10;    ): Boolean {&#10;        val uid = doc.id&#10;        if (uid == currentUserId) return false&#10;        val gender = doc.getString(&quot;gender&quot;)&#10;        val birthday = doc.getString(&quot;birthday&quot;)&#10;        val location = doc.getString(&quot;location&quot;)&#10;        val distance = (doc.get(&quot;distance&quot;) as? Long)?.toInt()&#10;        val lat = (doc.get(&quot;lat&quot;) as? Double)&#10;            ?: (doc.get(&quot;lat&quot;) as? Float)?.toDouble()&#10;            ?: (doc.get(&quot;lat&quot;) as? Long)?.toDouble()&#10;        val lng = (doc.get(&quot;lng&quot;) as? Double)&#10;            ?: (doc.get(&quot;lng&quot;) as? Float)?.toDouble()&#10;            ?: (doc.get(&quot;lng&quot;) as? Long)?.toDouble()&#10;        val currentUserLat = (currentUserDoc.get(&quot;lat&quot;) as? Double)&#10;            ?: (currentUserDoc.get(&quot;lat&quot;) as? Float)?.toDouble()&#10;            ?: (currentUserDoc.get(&quot;lat&quot;) as? Long)?.toDouble()&#10;        val currentUserLng = (currentUserDoc.get(&quot;lng&quot;) as? Double)&#10;            ?: (currentUserDoc.get(&quot;lng&quot;) as? Float)?.toDouble()&#10;            ?: (currentUserDoc.get(&quot;lng&quot;) as? Long)?.toDouble()&#10;&#10;        if (!filterGender(gender, filterPrefs)) return false&#10;        if (!filterAge(birthday, filterPrefs)) return false&#10;        if (!filterDistance(distance, filterPrefs)) return false&#10;        if (!filterLatLng(lat, lng, currentUserLat, currentUserLng, filterPrefs)) return false&#10;        return true&#10;    }&#10;&#10;    private fun filterGender(gender: String?, filterPrefs: UserFilterPreferences?): Boolean {&#10;        return !(filterPrefs?.preferredGender != null &amp;&amp; filterPrefs.preferredGender != &quot;Both&quot; &amp;&amp; gender != filterPrefs.preferredGender)&#10;    }&#10;&#10;    private fun filterAge(birthday: String?, filterPrefs: UserFilterPreferences?): Boolean {&#10;        if (filterPrefs?.minAge == null || filterPrefs.maxAge == null || birthday == null) return true&#10;        val age = DateUtils.calculateAgeFromBirthday(birthday)&#10;        return !(age == null || age &lt; filterPrefs.minAge || age &gt; filterPrefs.maxAge)&#10;    }&#10;&#10;    private fun filterDistance(distance: Int?, filterPrefs: UserFilterPreferences?): Boolean {&#10;        return !(filterPrefs?.maxDistance != null &amp;&amp; distance != null &amp;&amp; distance &gt; filterPrefs.maxDistance)&#10;    }&#10;&#10;    private fun filterLatLng(lat: Double?, lng: Double?, currentUserLat: Double?, currentUserLng: Double?, filterPrefs: UserFilterPreferences?): Boolean {&#10;        if (filterPrefs?.maxDistance == null || lat == null || lng == null || currentUserLat == null || currentUserLng == null) return true&#10;        val distanceKm = haversine(currentUserLat, currentUserLng, lat, lng)&#10;        return !(distanceKm &gt; filterPrefs.maxDistance)&#10;    }&#10;&#10;    private fun haversine(lat1: Double, lon1: Double, lat2: Double, lon2: Double): Double {&#10;        val R = 6371 // Earth radius in km&#10;        val dLat = Math.toRadians(lat2 - lat1)&#10;        val dLon = Math.toRadians(lon2 - lon1)&#10;        val a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +&#10;                Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) *&#10;                Math.sin(dLon / 2) * Math.sin(dLon / 2)&#10;        val c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))&#10;        return R * c&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/HomeRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/HomeRepository.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.User&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FieldPath&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class HomeRepository @Inject constructor(&#10;    private val db: FirebaseFirestore,&#10;    private val filteringRepository: FilteringRepository, // Remove RecommendationRepository injection&#10;    private val recommendationRepository: RecommendationRepository // Remove RecommendationRepository injection&#10;) {&#10;    suspend fun fetchProfiles(): List&lt;String&gt; {&#10;        val currentUserId = FirebaseAuth.getInstance().currentUser?.uid&#10;        if (currentUserId == null) return emptyList()&#10;        val currentUserDoc = db.collection(&quot;users&quot;).document(currentUserId).get().await()&#10;        val prefsMap = currentUserDoc.get(&quot;filterPreferences&quot;) as? Map&lt;*, *&gt;&#10;        val filterPrefs = prefsMap?.let {&#10;            com.example.dating.data.model.UserFilterPreferences(&#10;                preferredGender = it[&quot;preferredGender&quot;] as? String,&#10;                minAge = (it[&quot;minAge&quot;] as? Long)?.toInt(),&#10;                maxAge = (it[&quot;maxAge&quot;] as? Long)?.toInt(),&#10;                maxDistance = (it[&quot;maxDistance&quot;] as? Long)?.toInt()&#10;            )&#10;        }&#10;        val snapshot = db.collection(&quot;users&quot;).get().await()&#10;        val filteredDocs = snapshot.documents.filter { doc -&gt;&#10;            filteringRepository.filterUser(doc, currentUserId, currentUserDoc, filterPrefs)&#10;        }&#10;        // Get current user object for recommendation&#10;        val currentUser = getUserProfilesByIds(listOf(currentUserId)).firstOrNull()&#10;        val users = getUserProfilesByIds(filteredDocs.map { it.id })&#10;        android.util.Log.d(&quot;HomeRepository&quot;, &quot;Before recommendation: users=$users, currentUser=$currentUser&quot;)&#10;        val sortedDocs = if (currentUser != null) {&#10;            val recommended = recommendationRepository.getRecommendedUsers(currentUser, users)&#10;            android.util.Log.d(&quot;HomeRepository&quot;, &quot;After recommendation: recommended=$recommended&quot;)&#10;            recommended&#10;        } else {&#10;            users&#10;        }&#10;        val uids = sortedDocs.map { it.uid }&#10;        android.util.Log.d(&quot;HomeRepository&quot;, &quot;Filtered &amp; Sorted UIDs: $uids&quot;)&#10;        return uids&#10;    }&#10;&#10;    suspend fun getUserProfilesByIds(userIds: List&lt;String&gt;): List&lt;User&gt; {&#10;        if (userIds.isEmpty()) return emptyList()&#10;        val batchSize = 30&#10;        val batches = userIds.chunked(batchSize)&#10;        val allUsers = mutableListOf&lt;User&gt;()&#10;        for (batch in batches) {&#10;            val snapshot = db.collection(&quot;users&quot;)&#10;                .whereIn(FieldPath.documentId(), batch)&#10;                .get().await()&#10;            val users = snapshot.documents.mapNotNull { doc -&gt;&#10;                val data = doc.data ?: return@mapNotNull null&#10;                User(&#10;                    uid = doc.id,&#10;                    firstName = data[&quot;firstName&quot;] as? String ?: &quot;&quot;,&#10;                    lastName = data[&quot;lastName&quot;] as? String ?: &quot;&quot;,&#10;                    birthday = data[&quot;birthday&quot;] as? String,&#10;                    imageUrl = (data[&quot;imageUrl&quot;] as? List&lt;String&gt;) ?: emptyList(),&#10;                    avatarUrl = data[&quot;avatarUrl&quot;] as? String,&#10;                    gender = data[&quot;gender&quot;] as? String,&#10;                    job = data[&quot;job&quot;] as? String,&#10;                    location = data[&quot;location&quot;] as? String,&#10;                    description = data[&quot;description&quot;] as? String,&#10;                    interests = (data[&quot;interests&quot;] as? List&lt;String&gt;) ?: emptyList(),&#10;                    distance = (data[&quot;distance&quot;] as? Long)?.toInt()&#10;                )&#10;            }&#10;            allUsers.addAll(users)&#10;        }&#10;        return allUsers&#10;    }&#10;&#10;    suspend fun saveUserLocation(uid: String, location: Map&lt;String, Any&gt;) {&#10;        db.collection(&quot;users&quot;).document(uid)&#10;            .set(location, com.google.firebase.firestore.SetOptions.merge())&#10;            .await()&#10;    }&#10;&#10;&#10;    // Add Haversine formula function&#10;    private fun haversine(lat1: Double, lon1: Double, lat2: Double, lon2: Double): Double {&#10;        val R = 6371 // Earth radius in km&#10;        val dLat = Math.toRadians(lat2 - lat1)&#10;        val dLon = Math.toRadians(lon2 - lon1)&#10;        val a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +&#10;                Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) *&#10;                Math.sin(dLon / 2) * Math.sin(dLon / 2)&#10;        val c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))&#10;        return R * c&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.User&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FieldPath&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class HomeRepository @Inject constructor(&#10;    private val db: FirebaseFirestore,&#10;    private val filteringRepository: FilteringRepository, // Remove RecommendationRepository injection&#10;    private val recommendationRepository: RecommendationRepository // Remove RecommendationRepository injection&#10;) {&#10;    suspend fun fetchProfiles(): List&lt;String&gt; {&#10;        val currentUserId = FirebaseAuth.getInstance().currentUser?.uid&#10;        if (currentUserId == null) return emptyList()&#10;        val currentUserDoc = db.collection(&quot;users&quot;).document(currentUserId).get().await()&#10;        val prefsMap = currentUserDoc.get(&quot;filterPreferences&quot;) as? Map&lt;*, *&gt;&#10;        val filterPrefs = prefsMap?.let {&#10;            com.example.dating.data.model.UserFilterPreferences(&#10;                preferredGender = it[&quot;preferredGender&quot;] as? String,&#10;                minAge = (it[&quot;minAge&quot;] as? Long)?.toInt(),&#10;                maxAge = (it[&quot;maxAge&quot;] as? Long)?.toInt(),&#10;                maxDistance = (it[&quot;maxDistance&quot;] as? Long)?.toInt()&#10;            )&#10;        }&#10;        val snapshot = db.collection(&quot;users&quot;).get().await()&#10;        val filteredDocs = snapshot.documents.filter { doc -&gt;&#10;            filteringRepository.filterUser(doc, currentUserId, currentUserDoc, filterPrefs)&#10;        }&#10;        // Get current user object for recommendation&#10;        val currentUser = getUserProfilesByIds(listOf(currentUserId)).firstOrNull()&#10;        val users = getUserProfilesByIds(filteredDocs.map { it.id })&#10;        android.util.Log.d(&quot;HomeRepository&quot;, &quot;Before recommendation: users=${users.size}, currentUser=$currentUser&quot;)&#10;        val sortedDocs = if (currentUser != null) {&#10;            val recommended = recommendationRepository.getRecommendedUsers(currentUser, users)&#10;            android.util.Log.d(&quot;HomeRepository&quot;, &quot;After recommendation: recommended=${recommended.size}&quot;)&#10;            recommended&#10;        } else {&#10;            users&#10;        }&#10;        val uids = sortedDocs.map { it.uid }&#10;        android.util.Log.d(&quot;HomeRepository&quot;, &quot;Filtered &amp; Sorted UIDs: $uids&quot;)&#10;        return uids&#10;    }&#10;&#10;    suspend fun getUserProfilesByIds(userIds: List&lt;String&gt;): List&lt;User&gt; {&#10;        if (userIds.isEmpty()) return emptyList()&#10;        val batchSize = 30&#10;        val batches = userIds.chunked(batchSize)&#10;        val allUsers = mutableListOf&lt;User&gt;()&#10;        for (batch in batches) {&#10;            val snapshot = db.collection(&quot;users&quot;)&#10;                .whereIn(FieldPath.documentId(), batch)&#10;                .get().await()&#10;            val users = snapshot.documents.mapNotNull { doc -&gt;&#10;                val data = doc.data ?: return@mapNotNull null&#10;                User(&#10;                    uid = doc.id,&#10;                    firstName = data[&quot;firstName&quot;] as? String ?: &quot;&quot;,&#10;                    lastName = data[&quot;lastName&quot;] as? String ?: &quot;&quot;,&#10;                    birthday = data[&quot;birthday&quot;] as? String,&#10;                    imageUrl = (data[&quot;imageUrl&quot;] as? List&lt;String&gt;) ?: emptyList(),&#10;                    avatarUrl = data[&quot;avatarUrl&quot;] as? String,&#10;                    gender = data[&quot;gender&quot;] as? String,&#10;                    job = data[&quot;job&quot;] as? String,&#10;                    location = data[&quot;location&quot;] as? String,&#10;                    description = data[&quot;description&quot;] as? String,&#10;                    interests = (data[&quot;interests&quot;] as? List&lt;String&gt;) ?: emptyList(),&#10;                    distance = (data[&quot;distance&quot;] as? Long)?.toInt()&#10;                )&#10;            }&#10;            allUsers.addAll(users)&#10;        }&#10;        return allUsers&#10;    }&#10;&#10;    suspend fun saveUserLocation(uid: String, location: Map&lt;String, Any&gt;) {&#10;        db.collection(&quot;users&quot;).document(uid)&#10;            .set(location, com.google.firebase.firestore.SetOptions.merge())&#10;            .await()&#10;    }&#10;&#10;&#10;    // Add Haversine formula function&#10;    private fun haversine(lat1: Double, lon1: Double, lat2: Double, lon2: Double): Double {&#10;        val R = 6371 // Earth radius in km&#10;        val dLat = Math.toRadians(lat2 - lat1)&#10;        val dLon = Math.toRadians(lon2 - lon1)&#10;        val a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +&#10;                Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) *&#10;                Math.sin(dLon / 2) * Math.sin(dLon / 2)&#10;        val c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))&#10;        return R * c&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/RecommendationRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/RecommendationRepository.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import android.content.Context&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.utils.DateUtils&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import org.json.JSONObject&#10;import javax.inject.Inject&#10;import kotlin.math.sqrt&#10;&#10;class RecommendationRepository @Inject constructor(&#10;    @ApplicationContext context: Context&#10;) {&#10;&#10;    // --- Config: predefined interests ---&#10;    private val allInterests = listOf(&#10;        &quot;music&quot;, &quot;travel&quot;, &quot;cooking&quot;, &quot;sports&quot;, &quot;reading&quot;,&#10;        &quot;movies&quot;, &quot;art&quot;, &quot;gaming&quot;, &quot;fitness&quot;, &quot;photography&quot;,&#10;        &quot;dancing&quot;, &quot;fashion&quot;, &quot;technology&quot;, &quot;pets&quot;&#10;    )&#10;&#10;    // --- Load job embeddings from JSON asset ---&#10;    private val jobEmbeddingMap: Map&lt;String, FloatArray&gt; = loadJobEmbeddings(context, &quot;job_embeddings_8d.json&quot;)&#10;&#10;    private fun loadJobEmbeddings(context: Context, assetFile: String): Map&lt;String, FloatArray&gt; {&#10;        val jsonStr = context.assets.open(assetFile).bufferedReader().use { it.readText() }&#10;        val json = JSONObject(jsonStr)&#10;        val map = mutableMapOf&lt;String, FloatArray&gt;()&#10;        json.keys().forEach { key -&gt;&#10;            val arr = json.getJSONArray(key)&#10;            val floatArr = FloatArray(arr.length()) { i -&gt; arr.getDouble(i).toFloat() }&#10;            map[key] = floatArr&#10;        }&#10;        return map&#10;    }&#10;&#10;    // --- Placeholder for text embedding model (e.g., SentenceTransformer / TFLite) ---&#10;    private fun textEmbedding(text: String, dim: Int = 384): FloatArray {&#10;        val hash = text.hashCode()&#10;        return FloatArray(dim) { i -&gt; ((hash + i) % 100) / 100f }&#10;    }&#10;&#10;&#10;    // --- Create user embedding ---&#10;    fun createEmbedding(user: User): FloatArray {&#10;        // --- Age ---&#10;        val age = DateUtils.calculateAgeFromBirthday(user.birthday) ?: 0&#10;        val ageFeature = ((age - 18) / 42f).coerceIn(0f, 1f)&#10;&#10;        // --- Gender ---&#10;        val genderFeature = when(user.gender) {&#10;            &quot;Male&quot; -&gt; 1f&#10;            &quot;Female&quot; -&gt; -1f&#10;            else -&gt; 0f&#10;        }&#10;&#10;        // --- Last Active ---&#10;        val now = System.currentTimeMillis()&#10;        val daysSinceLastActive = if (user.lastActive != null &amp;&amp; user.lastActive &gt; 0) {&#10;            ((now - user.lastActive) / (1000 * 60 * 60 * 24)).toFloat()&#10;        } else 365f&#10;        val lastActiveFeature = (daysSinceLastActive / 365f).coerceIn(0f, 1f)&#10;&#10;        // --- Interests ---&#10;        val interestFeature = FloatArray(allInterests.size) { 0f }&#10;        user.interests.forEach { interest -&gt;&#10;            val index = allInterests.indexOf(interest)&#10;            if (index != -1) interestFeature[index] = 1f&#10;        }&#10;&#10;        // --- Job embedding 8-dim ---&#10;        val jobFeature = user.job?.let { jobEmbeddingMap[it] } ?: FloatArray(8) { 0f }&#10;&#10;        // --- Description embedding ---&#10;        val descriptionFeature = if (!user.description.isNullOrBlank()) {&#10;            textEmbedding(user.description)&#10;        } else {&#10;            FloatArray(384) { 0f }&#10;        }&#10;&#10;        // --- Concat all features ---&#10;        return floatArrayOf(ageFeature, genderFeature, lastActiveFeature) +&#10;                interestFeature +&#10;                jobFeature +&#10;                descriptionFeature&#10;    }&#10;&#10;    // --- Similarity ---&#10;    fun dotProduct(a: FloatArray, b: FloatArray): Float {&#10;        var sum = 0f&#10;        for(i in a.indices) sum += a[i] * b[i]&#10;        return sum&#10;    }&#10;&#10;    fun cosineSimilarity(a: FloatArray, b: FloatArray): Float {&#10;        val dot = dotProduct(a, b)&#10;        val normA = sqrt(a.map { it * it }.sum())&#10;        val normB = sqrt(b.map { it * it }.sum())&#10;        return if (normA &gt; 0 &amp;&amp; normB &gt; 0) dot / (normA * normB) else 0f&#10;    }&#10;&#10;    // --- Compute scores ---&#10;    fun computeScores(&#10;        currentEmbedding: FloatArray,&#10;        users: List&lt;User&gt;,&#10;        useCosine: Boolean = false&#10;    ): List&lt;Pair&lt;User, Float&gt;&gt; {&#10;        return users.map { user -&gt;&#10;            val embedding = createEmbedding(user)&#10;            val score = if (useCosine) cosineSimilarity(currentEmbedding, embedding) else dotProduct(currentEmbedding, embedding)&#10;            user to score&#10;        }&#10;    }&#10;&#10;    fun sortUsersByScore(scoredUsers: List&lt;Pair&lt;User, Float&gt;&gt;): List&lt;User&gt; {&#10;        return scoredUsers.sortedByDescending { it.second }.map { it.first }&#10;    }&#10;&#10;    // --- Main recommendation ---&#10;    suspend fun getRecommendedUsers(currentUser: User, users: List&lt;User&gt;): List&lt;User&gt; {&#10;        val currentEmbedding = createEmbedding(currentUser)&#10;        val scoredUsers = computeScores(currentEmbedding, users)&#10;        android.util.Log.d(&quot;RecommendationRepository&quot;, &quot;scoredUsers size: ${scoredUsers.size}&quot;)&#10;        return sortUsersByScore(scoredUsers)&#10;    }&#10;&#10;    // --- Update embedding online khi swipe ---&#10;    fun updateEmbeddingWithFeedback(userEmbedding: FloatArray, otherEmbedding: FloatArray, liked: Boolean, learningRate: Float = 0.01f) {&#10;        val sign = if (liked) 1f else -1f&#10;        for(i in userEmbedding.indices) {&#10;            userEmbedding[i] += learningRate * sign * otherEmbedding[i]&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import android.content.Context&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.utils.DateUtils&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import org.json.JSONObject&#10;import javax.inject.Inject&#10;import kotlin.math.sqrt&#10;&#10;class RecommendationRepository @Inject constructor(&#10;    @ApplicationContext context: Context&#10;) {&#10;&#10;    // --- Config: predefined interests ---&#10;    private val allInterests = listOf(&#10;        &quot;music&quot;, &quot;travel&quot;, &quot;cooking&quot;, &quot;sports&quot;, &quot;reading&quot;,&#10;        &quot;movies&quot;, &quot;art&quot;, &quot;gaming&quot;, &quot;fitness&quot;, &quot;photography&quot;,&#10;        &quot;dancing&quot;, &quot;fashion&quot;, &quot;technology&quot;, &quot;pets&quot;&#10;    )&#10;&#10;    // --- Load job embeddings from JSON asset ---&#10;    private val jobEmbeddingMap: Map&lt;String, FloatArray&gt; = loadJobEmbeddings(context, &quot;job_embeddings_8d.json&quot;)&#10;&#10;    private fun loadJobEmbeddings(context: Context, assetFile: String): Map&lt;String, FloatArray&gt; {&#10;        val jsonStr = context.assets.open(assetFile).bufferedReader().use { it.readText() }&#10;        val json = JSONObject(jsonStr)&#10;        val map = mutableMapOf&lt;String, FloatArray&gt;()&#10;        json.keys().forEach { key -&gt;&#10;            val arr = json.getJSONArray(key)&#10;            val floatArr = FloatArray(arr.length()) { i -&gt; arr.getDouble(i).toFloat() }&#10;            map[key] = floatArr&#10;        }&#10;        return map&#10;    }&#10;&#10;    // --- Placeholder for text embedding model (e.g., SentenceTransformer / TFLite) ---&#10;    private fun textEmbedding(text: String, dim: Int = 384): FloatArray {&#10;        val hash = text.hashCode()&#10;        return FloatArray(dim) { i -&gt; ((hash + i) % 100) / 100f }&#10;    }&#10;&#10;&#10;    // --- Create user embedding ---&#10;    fun createEmbedding(user: User): FloatArray {&#10;        // --- Age ---&#10;        val age = DateUtils.calculateAgeFromBirthday(user.birthday) ?: 0&#10;        val ageFeature = ((age - 18) / 42f).coerceIn(0f, 1f)&#10;&#10;        // --- Gender ---&#10;        val genderFeature = when(user.gender) {&#10;            &quot;Male&quot; -&gt; 1f&#10;            &quot;Female&quot; -&gt; -1f&#10;            else -&gt; 0f&#10;        }&#10;&#10;        // --- Last Active ---&#10;        val now = System.currentTimeMillis()&#10;        val daysSinceLastActive = if (user.lastActive != null &amp;&amp; user.lastActive &gt; 0) {&#10;            ((now - user.lastActive) / (1000 * 60 * 60 * 24)).toFloat()&#10;        } else 365f&#10;        val lastActiveFeature = (daysSinceLastActive / 365f).coerceIn(0f, 1f)&#10;&#10;        // --- Interests ---&#10;        val interestFeature = FloatArray(allInterests.size) { 0f }&#10;        user.interests.forEach { interest -&gt;&#10;            val index = allInterests.indexOf(interest)&#10;            if (index != -1) interestFeature[index] = 1f&#10;        }&#10;&#10;        // --- Job embedding 8-dim ---&#10;        val jobFeature = user.job?.let { jobEmbeddingMap[it] } ?: FloatArray(8) { 0f }&#10;&#10;        // --- Description embedding ---&#10;        val descriptionFeature = if (!user.description.isNullOrBlank()) {&#10;            textEmbedding(user.description)&#10;        } else {&#10;            FloatArray(384) { 0f }&#10;        }&#10;&#10;        // --- Concat all features ---&#10;        return floatArrayOf(ageFeature, genderFeature, lastActiveFeature) +&#10;                interestFeature +&#10;                jobFeature +&#10;                descriptionFeature&#10;    }&#10;&#10;    // --- Similarity ---&#10;    fun dotProduct(a: FloatArray, b: FloatArray): Float {&#10;        var sum = 0f&#10;        for(i in a.indices) sum += a[i] * b[i]&#10;        return sum&#10;    }&#10;&#10;    fun cosineSimilarity(a: FloatArray, b: FloatArray): Float {&#10;        val dot = dotProduct(a, b)&#10;        val normA = sqrt(a.map { it * it }.sum())&#10;        val normB = sqrt(b.map { it * it }.sum())&#10;        return if (normA &gt; 0 &amp;&amp; normB &gt; 0) dot / (normA * normB) else 0f&#10;    }&#10;&#10;    // --- Compute scores ---&#10;    fun computeScores(&#10;        currentEmbedding: FloatArray,&#10;        users: List&lt;User&gt;,&#10;        useCosine: Boolean = false&#10;    ): List&lt;Pair&lt;User, Float&gt;&gt; {&#10;        return users.map { user -&gt;&#10;            val embedding = createEmbedding(user)&#10;            val score = if (useCosine) cosineSimilarity(currentEmbedding, embedding) else dotProduct(currentEmbedding, embedding)&#10;            user to score&#10;        }&#10;    }&#10;&#10;    fun sortUsersByScore(scoredUsers: List&lt;Pair&lt;User, Float&gt;&gt;): List&lt;User&gt; {&#10;        return scoredUsers.sortedByDescending { it.second }.map { it.first }&#10;    }&#10;&#10;    // --- Main recommendation ---&#10;    suspend fun getRecommendedUsers(currentUser: User, users: List&lt;User): List&lt;User&gt; {&#10;        val currentEmbedding = createEmbedding(currentUser)&#10;        val scoredUsers = computeScores(currentEmbedding, users)&#10;        android.util.Log.d(&quot;RecommendationRepository&quot;, &quot;scoredUsers size: ${scoredUsers.size}&quot;)&#10;        scoredUsers.forEach { (user, score) -&gt;&#10;            android.util.Log.d(&quot;RecommendationRepository&quot;, &quot;User: ${user.uid}, Score: $score&quot;)&#10;        }&#10;        return sortUsersByScore(scoredUsers)&#10;    }&#10;&#10;    // --- Update embedding online khi swipe ---&#10;    fun updateEmbeddingWithFeedback(userEmbedding: FloatArray, otherEmbedding: FloatArray, liked: Boolean, learningRate: Float = 0.01f) {&#10;        val sign = if (liked) 1f else -1f&#10;        for(i in userEmbedding.indices) {&#10;            userEmbedding[i] += learningRate * sign * otherEmbedding[i]&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepositoryImpl.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;) : UserRepository {&#10;&#10;    fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            offer(snapshot?.toObject(User::class.java))&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    override suspend fun updateUser(user: User) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun saveProfile(&#10;        userId: String,&#10;        firstName: String,&#10;        lastName: String,&#10;        birthday: String?,&#10;        imageUrl: String?&#10;    ): Resource&lt;Unit&gt; {&#10;        return try {&#10;            val userMap = hashMapOf(&#10;                &quot;firstName&quot; to firstName,&#10;                &quot;lastName&quot; to lastName,&#10;                &quot;birthday&quot; to birthday,&#10;                &quot;imageUrl&quot; to imageUrl&#10;            )&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .set(userMap)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateGender(userId: String, gender: String): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;gender&quot;, gender)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateInterests(userId: String, interests: List&lt;String&gt;): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;interests&quot;, interests)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateJobLocationDescription(&#10;        userId: String,&#10;        job: String?,&#10;        location: String?,&#10;        description: String?&#10;    ): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(mapOf(&#10;                    &quot;job&quot; to job,&#10;                    &quot;location&quot; to location,&#10;                    &quot;description&quot; to description&#10;                ))&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;) : UserRepository {&#10;&#10;    override fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            trySend(snapshot?.toObject(User::class.java))&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    override suspend fun updateUser(user: User) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun saveProfile(&#10;        user: User&#10;    ) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun updateGender(uid: String, gender: String) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&quot;gender&quot;, gender).await()&#10;    }&#10;&#10;    override suspend fun updateInterests(uid: String, interests: List&lt;String&gt;) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&quot;interests&quot;, interests).await()&#10;    }&#10;&#10;    override suspend fun updateJobLocationDescription(uid: String, job: String?, location: String?, description: String?) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&#10;            mapOf(&#10;                &quot;job&quot; to job,&#10;                &quot;location&quot; to location,&#10;                &quot;description&quot; to description&#10;            )&#10;        ).await()&#10;    }&#10;&#10;    override suspend fun uploadAvatar(uid: String, uri: android.net.Uri): String {&#10;        // TODO: Implement Firebase Storage upload and return the URL&#10;        return &quot;&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/FilterDialog.kt.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/FilterDialog.kt.kt" />
              <option name="originalContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FilterScreen(navController: NavController) {&#10;    // State variables&#10;    var selectedInterest by remember { mutableStateOf(&quot;Girls&quot;) }&#10;    var location by remember { mutableStateOf(&quot;Chicago, USA&quot;) }&#10;    var distance by remember { mutableFloatStateOf(40f) }&#10;    var ageRange by remember { mutableStateOf(20f..28f) }&#10;&#10;    // Bottom sheet or dialog content&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .wrapContentHeight()&#10;            .clip(RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp))&#10;            .background(Color.White)&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        // Notch&#10;        Box(&#10;            modifier = Modifier&#10;                .width(40.dp)&#10;                .height(4.dp)&#10;                .background(Color.Gray.copy(alpha = 0.5f), CircleShape)&#10;                .align(Alignment.CenterHorizontally)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Title and Clear&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Filters&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.Black&#10;            )&#10;            TextButton(onClick = { /* TODO: Clear filters */ }) {&#10;                Text(&#10;                    text = &quot;Clear&quot;,&#10;                    color = Color(0xFFFF69B4), // Pink&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Interested in&#10;        Text(&#10;            text = &quot;Interested in&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        SegmentedButtonRow(modifier = Modifier.fillMaxWidth()) {&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Girls&quot;,&#10;                onClick = { selectedInterest = &quot;Girls&quot; },&#10;                shape = RoundedCornerShape(topStart = 8.dp, bottomStart = 8.dp)&#10;            ) {&#10;                Text(&quot;Girls&quot;)&#10;            }&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Boys&quot;,&#10;                onClick = { selectedInterest = &quot;Boys&quot; },&#10;                shape = RoundedCornerShape(0.dp)&#10;            ) {&#10;                Text(&quot;Boys&quot;)&#10;            }&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Both&quot;,&#10;                onClick = { selectedInterest = &quot;Both&quot; },&#10;                shape = RoundedCornerShape(topEnd = 8.dp, bottomEnd = 8.dp)&#10;            ) {&#10;                Text(&quot;Both&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Location&#10;        Text(&#10;            text = &quot;Location&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        OutlinedTextField(&#10;            value = location,&#10;            onValueChange = { /* Read-only, tap to select */ },&#10;            readOnly = true,&#10;            modifier = Modifier.fillMaxWidth(),&#10;            trailingIcon = {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowForward,&#10;                    contentDescription = &quot;Select location&quot;,&#10;                    tint = Color(0xFFFF0000) // Red&#10;                )&#10;            },&#10;            singleLine = true,&#10;            interactionSource = remember { MutableInteractionSource() }.also { interactionSource -&gt;&#10;                // TODO: Handle click to open location selector&#10;            }&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Distance&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;Distance&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;            Text(&#10;                text = &quot;${distance.toInt()}km&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;        Slider(&#10;            value = distance,&#10;            onValueChange = { distance = it },&#10;            valueRange = 0f..100f, // Assuming max 100km&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = SliderDefaults.colors(&#10;                thumbColor = Color(0xFFBB86FC), // Purple&#10;                activeTrackColor = Color(0xFFBB86FC),&#10;                inactiveTrackColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Age&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;Age&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;            Text(&#10;                text = &quot;${ageRange.start.toInt()}-${ageRange.endInclusive.toInt()}&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;        RangeSlider(&#10;            value = ageRange,&#10;            onValueChange = { ageRange = it },&#10;            valueRange = 18f..100f, // Assuming age range&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = SliderDefaults.colors(&#10;                thumbColor = Color(0xFFBB86FC), // Purple&#10;                activeTrackColor = Color(0xFFBB86FC),&#10;                inactiveTrackColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // Continue button&#10;        Button(&#10;            onClick = { /* TODO: Apply filters and navigate */ },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(48.dp),&#10;            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFBB86FC).copy(alpha = 0.2f)), // Light purple&#10;            shape = RoundedCornerShape(24.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Continue&quot;,&#10;                color = Color.Black,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FilterDialog(&#10;    show: Boolean,&#10;    onDismiss: () -&gt; Unit,&#10;    onApply: (selectedInterest: String, location: String, distance: Float, ageRange: ClosedFloatingPointRange&lt;Float&gt;) -&gt; Unit&#10;) {&#10;    if (!show) return&#10;    var selectedInterest by remember { mutableStateOf(&quot;Girls&quot;) }&#10;    var location by remember { mutableStateOf(&quot;Chicago, USA&quot;) }&#10;    var distance by remember { mutableStateOf(40f) }&#10;    var ageRange by remember { mutableStateOf(20f..28f) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    onApply(selectedInterest, location, distance, ageRange)&#10;                    onDismiss()&#10;                },&#10;                modifier = Modifier.fillMaxWidth().height(48.dp),&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFBB86FC).copy(alpha = 0.2f)),&#10;                shape = RoundedCornerShape(24.dp)&#10;            ) {&#10;                Text(&quot;Continue&quot;, color = Color.Black, fontSize = 16.sp, fontWeight = FontWeight.Bold)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;, color = Color.Gray)&#10;            }&#10;        },&#10;        title = {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&quot;Filters&quot;, fontSize = 20.sp, fontWeight = FontWeight.Bold, color = Color.Black)&#10;                TextButton(onClick = {&#10;                    selectedInterest = &quot;Girls&quot;&#10;                    location = &quot;Chicago, USA&quot;&#10;                    distance = 40f&#10;                    ageRange = 20f..28f&#10;                }) {&#10;                    Text(&quot;Clear&quot;, color = Color(0xFFFF69B4), fontSize = 16.sp)&#10;                }&#10;            }&#10;        },&#10;        text = {&#10;            Column(modifier = Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {&#10;                // Interested in&#10;                Text(&quot;Interested in&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.Center) {&#10;                    FilterSegmentButton(&quot;Girls&quot;, selectedInterest == &quot;Girls&quot;) { selectedInterest = &quot;Girls&quot; }&#10;                    FilterSegmentButton(&quot;Boys&quot;, selectedInterest == &quot;Boys&quot;) { selectedInterest = &quot;Boys&quot; }&#10;                    FilterSegmentButton(&quot;Both&quot;, selectedInterest == &quot;Both&quot;) { selectedInterest = &quot;Both&quot; }&#10;                }&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Location&#10;                Text(&quot;Location&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                OutlinedTextField(&#10;                    value = location,&#10;                    onValueChange = { location = it },&#10;                    readOnly = false,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    trailingIcon = {&#10;                        Icon(imageVector = Icons.Default.ArrowForward, contentDescription = &quot;Select location&quot;, tint = Color(0xFFFF0000))&#10;                    },&#10;                    singleLine = true&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Distance&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Distance&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${distance.toInt()}km&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                Slider(&#10;                    value = distance,&#10;                    onValueChange = { distance = it },&#10;                    valueRange = 0f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = Color(0xFFBB86FC),&#10;                        activeTrackColor = Color(0xFFBB86FC),&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Age&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Age&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${ageRange.start.toInt()}-${ageRange.endInclusive.toInt()}&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                RangeSlider(&#10;                    value = ageRange,&#10;                    onValueChange = { ageRange = it },&#10;                    valueRange = 18f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = Color(0xFFBB86FC),&#10;                        activeTrackColor = Color(0xFFBB86FC),&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;            }&#10;        },&#10;        shape = RoundedCornerShape(24.dp),&#10;        containerColor = Color.White&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun FilterSegmentButton(text: String, selected: Boolean, onClick: () -&gt; Unit) {&#10;    Button(&#10;        onClick = onClick,&#10;        colors = ButtonDefaults.buttonColors(&#10;            containerColor = if (selected) Color(0xFFBB86FC) else Color.LightGray,&#10;            contentColor = if (selected) Color.White else Color.Black&#10;        ),&#10;        modifier = Modifier&#10;            .weight(1f)&#10;            .height(36.dp)&#10;            .padding(horizontal = 2.dp),&#10;        shape = RoundedCornerShape(8.dp)&#10;    ) {&#10;        Text(text)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/ProfileCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/ProfileCard.kt" />
              <option name="originalContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.snapshots.SnapshotStateList&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.example.dating.data.model.Interest&#10;import com.example.dating.ui.theme.AppColors&#10;&#10;@Composable&#10;fun ProfileCard(&#10;    isEditMode: Boolean,&#10;    onEditToggle: () -&gt; Unit,&#10;    isSaving: Boolean,&#10;    saveError: String?,&#10;    editableFirstName: String,&#10;    editableLastName: String,&#10;    editableBirthday: String,&#10;    editableGender: String,&#10;    editableJob: String,&#10;    editableLocation: String,&#10;    editableDescription: String,&#10;    selectedInterests: SnapshotStateList&lt;String&gt;,&#10;    allInterests: List&lt;Interest&gt;,&#10;    onFirstNameChange: (String) -&gt; Unit,&#10;    onLastNameChange: (String) -&gt; Unit,&#10;    onBirthdayClick: () -&gt; Unit,&#10;    onGenderChange: (String) -&gt; Unit,&#10;    onJobChange: (String) -&gt; Unit,&#10;    onLocationChange: (String) -&gt; Unit,&#10;    onDescriptionChange: (String) -&gt; Unit,&#10;    isEditModeChange: (Boolean) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp, vertical = 16.dp),&#10;        shape = MaterialTheme.shapes.large,&#10;        elevation = CardDefaults.cardElevation(8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                TextButton(onClick = onEditToggle) {&#10;                    Text(&#10;                        text = if (isEditMode) &quot;Done&quot; else &quot;Edit&quot;,&#10;                        color = AppColors.Text_Pink,&#10;                        fontWeight = androidx.compose.ui.text.font.FontWeight.Bold&#10;                    )&#10;                }&#10;            }&#10;            if (isSaving) {&#10;                CircularProgressIndicator(modifier = Modifier.padding(vertical = 8.dp))&#10;            }&#10;            if (saveError != null) {&#10;                Text(&#10;                    text = saveError,&#10;                    color = androidx.compose.ui.graphics.Color.Red,&#10;                    modifier = Modifier.padding(vertical = 8.dp)&#10;                )&#10;            }&#10;            NameFields(&#10;                firstName = editableFirstName,&#10;                lastName = editableLastName,&#10;                isEditMode = isEditMode,&#10;                onFirstNameChange = onFirstNameChange,&#10;                onLastNameChange = onLastNameChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            BirthdayGenderFields(&#10;                birthday = editableBirthday,&#10;                gender = editableGender,&#10;                isEditMode = isEditMode,&#10;                showCalendar = false,&#10;                onShowCalendar = onBirthdayClick,&#10;                onGenderChange = onGenderChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            JobDropdown(&#10;                job = editableJob,&#10;                isEditMode = isEditMode,&#10;                onJobChange = onJobChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            LocationField(&#10;                location = editableLocation,&#10;                isEditMode = isEditMode,&#10;                onLocationChange = onLocationChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            DescriptionField(&#10;                description = editableDescription,&#10;                isEditMode = isEditMode,&#10;                onDescriptionChange = onDescriptionChange&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Interests&quot;,&#10;                fontSize = androidx.compose.ui.unit.sp(20),&#10;                color = AppColors.Text_Pink,&#10;                fontWeight = androidx.compose.ui.text.font.FontWeight.Bold,&#10;                modifier = Modifier&#10;                    .padding(bottom = 8.dp)&#10;                    .fillMaxWidth(),&#10;                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;            )&#10;            InterestsSection(&#10;                allInterests = allInterests,&#10;                selectedInterests = selectedInterests,&#10;                isEditMode = isEditMode&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.snapshots.SnapshotStateList&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.example.dating.data.model.Interest&#10;import com.example.dating.ui.theme.AppColors&#10;&#10;// Add missing imports for field components&#10;import com.example.dating.ui.components.NameFields&#10;import com.example.dating.ui.components.BirthdayGenderFields&#10;import com.example.dating.ui.components.JobDropdown&#10;import com.example.dating.ui.components.LocationField&#10;import com.example.dating.ui.components.DescriptionField&#10;import com.example.dating.ui.components.InterestsSection&#10;&#10;@Composable&#10;fun ProfileCard(&#10;    isEditMode: Boolean,&#10;    onEditToggle: () -&gt; Unit,&#10;    isSaving: Boolean,&#10;    saveError: String?,&#10;    editableFirstName: String,&#10;    editableLastName: String,&#10;    editableBirthday: String,&#10;    editableGender: String,&#10;    editableJob: String,&#10;    editableLocation: String,&#10;    editableDescription: String,&#10;    selectedInterests: SnapshotStateList&lt;String&gt;,&#10;    allInterests: List&lt;Interest&gt;,&#10;    onFirstNameChange: (String) -&gt; Unit,&#10;    onLastNameChange: (String) -&gt; Unit,&#10;    onBirthdayClick: () -&gt; Unit,&#10;    onGenderChange: (String) -&gt; Unit,&#10;    onJobChange: (String) -&gt; Unit,&#10;    onLocationChange: (String) -&gt; Unit,&#10;    onDescriptionChange: (String) -&gt; Unit,&#10;    isEditModeChange: (Boolean) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp, vertical = 16.dp),&#10;        shape = MaterialTheme.shapes.large,&#10;        elevation = CardDefaults.cardElevation(8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                TextButton(onClick = onEditToggle) {&#10;                    Text(&#10;                        text = if (isEditMode) &quot;Done&quot; else &quot;Edit&quot;,&#10;                        color = AppColors.Text_Pink,&#10;                        fontWeight = androidx.compose.ui.text.font.FontWeight.Bold&#10;                    )&#10;                }&#10;            }&#10;            if (isSaving) {&#10;                CircularProgressIndicator(modifier = Modifier.padding(vertical = 8.dp))&#10;            }&#10;            if (saveError != null) {&#10;                Text(&#10;                    text = saveError,&#10;                    color = androidx.compose.ui.graphics.Color.Red,&#10;                    modifier = Modifier.padding(vertical = 8.dp)&#10;                )&#10;            }&#10;            NameFields(&#10;                firstName = editableFirstName,&#10;                lastName = editableLastName,&#10;                isEditMode = isEditMode,&#10;                onFirstNameChange = onFirstNameChange,&#10;                onLastNameChange = onLastNameChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            BirthdayGenderFields(&#10;                birthday = editableBirthday,&#10;                gender = editableGender,&#10;                isEditMode = isEditMode,&#10;                showCalendar = false,&#10;                onShowCalendar = onBirthdayClick,&#10;                onGenderChange = onGenderChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            JobDropdown(&#10;                job = editableJob,&#10;                isEditMode = isEditMode,&#10;                onJobChange = onJobChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            LocationField(&#10;                location = editableLocation,&#10;                isEditMode = isEditMode,&#10;                onLocationChange = onLocationChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            DescriptionField(&#10;                description = editableDescription,&#10;                isEditMode = isEditMode,&#10;                onDescriptionChange = onDescriptionChange&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Interests&quot;,&#10;                fontSize = androidx.compose.ui.unit.sp(20),&#10;                color = AppColors.Text_Pink,&#10;                fontWeight = androidx.compose.ui.text.font.FontWeight.Bold,&#10;                modifier = Modifier&#10;                    .padding(bottom = 8.dp)&#10;                    .fillMaxWidth(),&#10;                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;            )&#10;            InterestsSection(&#10;                allInterests = allInterests,&#10;                selectedInterests = selectedInterests,&#10;                isEditMode = isEditMode&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class HomeViewModel : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val _addFavoriteState = MutableStateFlow&lt;Result&lt;Unit&gt;?&gt;(null)&#10;    val addFavoriteState: StateFlow&lt;Result&lt;Unit&gt;?&gt; = _addFavoriteState&#10;&#10;    fun addFavorite(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        val favorite = hashMapOf(&#10;            &quot;likerId&quot; to likerId,&#10;            &quot;likedId&quot; to likedId,&#10;            &quot;timestamp&quot; to Timestamp.now()&#10;        )&#10;        viewModelScope.launch {&#10;            try {&#10;                db.collection(&quot;favorites&quot;).add(favorite)&#10;                _addFavoriteState.value = Result.success(Unit)&#10;            } catch (e: Exception) {&#10;                _addFavoriteState.value = Result.failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearAddFavoriteState() {&#10;        _addFavoriteState.value = null&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>