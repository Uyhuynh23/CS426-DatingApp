<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/MatchRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/MatchRepository.kt" />
              <option name="updatedContent" value="package com.example.dating.data&#10;&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class MatchRepository {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    suspend fun saveMatch(userId1: String, userId2: String, status: Boolean) {&#10;        // Ensure userId1 &lt; userId2 alphabetically&#10;        val (firstId, secondId) = if (userId1 &lt; userId2) userId1 to userId2 else userId2 to userId1&#10;        val matchData = hashMapOf(&#10;            &quot;userId1&quot; to firstId,&#10;            &quot;userId2&quot; to secondId,&#10;            &quot;timestamp&quot; to Timestamp.now(),&#10;            &quot;status&quot; to status&#10;        )&#10;        // Check for duplicate (userId1/userId2 only)&#10;        val query = db.collection(&quot;match&quot;)&#10;            .whereEqualTo(&quot;userId1&quot;, firstId)&#10;            .whereEqualTo(&quot;userId2&quot;, secondId)&#10;            .get().await()&#10;        android.util.Log.d(&quot;MatchRepository&quot;, &quot;MatchQuery: userId1=$firstId, userId2=$secondId, resultCount=${query.size()}&quot;)&#10;        if (query.isEmpty) {&#10;            db.collection(&quot;match&quot;).add(matchData)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/FirebaseMessagesRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/FirebaseMessagesRepository.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.ConversationPreview&#10;import com.example.dating.data.model.User&#10;import com.google.android.gms.tasks.Tasks&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.firestore.Query&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;&#10;class FirebaseMessagesRepository @Inject constructor(&#10;    private val db: FirebaseFirestore,&#10;    private val auth: FirebaseAuth&#10;) {&#10;    fun getConversations(): Flow&lt;List&lt;ConversationPreview&gt;&gt; = callbackFlow {&#10;        val currentUid = auth.currentUser?.uid&#10;        if(currentUid == null) {&#10;            trySend(emptyList())&#10;            awaitClose()&#10;            return@callbackFlow&#10;        }&#10;        val query = db.collection(&quot;conversations&quot;)&#10;            .whereArrayContains(&quot;participants&quot;, currentUid)&#10;            .orderBy(&quot;lastTimestamp&quot;, Query.Direction.DESCENDING)&#10;&#10;        val listener = query.addSnapshotListener { snapshot, _ -&gt;&#10;            if (snapshot == null) {&#10;                trySend(emptyList())&#10;                return@addSnapshotListener&#10;            }&#10;&#10;            val tasks = snapshot.documents.map { doc -&gt;&#10;                val data = doc.data ?: return@map null&#10;                val cid = doc.id&#10;                val participants = data[&quot;participants&quot;] as List&lt;String&gt;&#10;                val peerUid = participants.first { it != currentUid }&#10;&#10;                val userTask = db.collection(&quot;users&quot;).document(peerUid).get()&#10;&#10;                userTask.continueWith { userSnap -&gt;&#10;                    val user = userSnap.result?.toObject(User::class.java) ?: User(uid = peerUid)&#10;                    val lastMessage = data[&quot;lastMessage&quot;] as? String ?: &quot;&quot;&#10;                    val timestamp = (data[&quot;lastTimestamp&quot;] as? Timestamp)?.toDate()?.time ?: 0L&#10;                    val unread = (data[&quot;unread&quot;] as? Map&lt;*, *&gt;)?.get(currentUid) as? Long ?: 0L&#10;                    val typing = (data[&quot;typing&quot;] as? Map&lt;*, *&gt;)?.get(peerUid) as? Boolean ?: false&#10;&#10;                    ConversationPreview(&#10;                        id = cid,&#10;                        peer = user,&#10;                        lastMessage = lastMessage,&#10;                        timeAgo = formatTimeAgo(timestamp),&#10;                        unreadCount = unread.toInt(),&#10;                        isTyping = typing&#10;                    )&#10;                }&#10;            }&#10;&#10;            Tasks.whenAllSuccess&lt;ConversationPreview&gt;(tasks)&#10;                .addOnSuccessListener { result -&gt; trySend(result) }&#10;        }&#10;&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    private fun formatTimeAgo(ms: Long): String {&#10;        val min = ((System.currentTimeMillis() - ms) / 60000)&#10;        return when {&#10;            min &lt; 1 -&gt; &quot;Just now&quot;&#10;            min &lt; 60 -&gt; &quot;$min min&quot;&#10;            else -&gt; &quot;${min / 60} hour&quot;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.ConversationPreview&#10;import com.example.dating.data.model.User&#10;import com.google.android.gms.tasks.Tasks&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.firestore.Query&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;&#10;class FirebaseMessagesRepository @Inject constructor(&#10;    private val db: FirebaseFirestore,&#10;    private val auth: FirebaseAuth&#10;) {&#10;    fun getConversations(): Flow&lt;List&lt;ConversationPreview&gt;&gt; = callbackFlow {&#10;        val currentUid = auth.currentUser?.uid&#10;        if(currentUid == null) {&#10;            trySend(emptyList())&#10;            awaitClose()&#10;            return@callbackFlow&#10;        }&#10;        val query = db.collection(&quot;conversations&quot;)&#10;            .whereArrayContains(&quot;participants&quot;, currentUid)&#10;            .orderBy(&quot;lastTimestamp&quot;, Query.Direction.DESCENDING)&#10;&#10;        val listener = query.addSnapshotListener { snapshot, _ -&gt;&#10;            if (snapshot == null) {&#10;                trySend(emptyList())&#10;                return@addSnapshotListener&#10;            }&#10;&#10;            val tasks = snapshot.documents.map { doc -&gt;&#10;                val data = doc.data ?: return@map null&#10;                val cid = doc.id&#10;                val participants = data[&quot;participants&quot;] as List&lt;String&gt;&#10;                val peerUid = participants.first { it != currentUid }&#10;&#10;                val userTask = db.collection(&quot;users&quot;).document(peerUid).get()&#10;&#10;                userTask.continueWith { userSnap -&gt;&#10;                    val user = userSnap.result?.toObject(User::class.java) ?: User(uid = peerUid)&#10;                    val lastMessage = data[&quot;lastMessage&quot;] as? String ?: &quot;&quot;&#10;                    val timestamp = (data[&quot;lastTimestamp&quot;] as? Timestamp)?.toDate()?.time ?: 0L&#10;                    val unread = (data[&quot;unread&quot;] as? Map&lt;*, *&gt;)?.get(currentUid) as? Long ?: 0L&#10;                    val typing = (data[&quot;typing&quot;] as? Map&lt;*, *&gt;)?.get(peerUid) as? Boolean ?: false&#10;&#10;                    ConversationPreview(&#10;                        id = cid,&#10;                        peer = user,&#10;                        lastMessage = lastMessage,&#10;                        timeAgo = formatTimeAgo(timestamp),&#10;                        unreadCount = unread.toInt(),&#10;                        isTyping = typing&#10;                    )&#10;                }&#10;            }&#10;&#10;            Tasks.whenAllSuccess&lt;ConversationPreview&gt;(tasks)&#10;                .addOnSuccessListener { result -&gt; trySend(result) }&#10;        }&#10;&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    private fun formatTimeAgo(ms: Long): String {&#10;        val min = ((System.currentTimeMillis() - ms) / 60000)&#10;        return when {&#10;            min &lt; 1 -&gt; &quot;Just now&quot;&#10;            min &lt; 60 -&gt; &quot;$min min&quot;&#10;            else -&gt; &quot;${min / 60} hour&quot;&#10;        }&#10;    }&#10;&#10;    suspend fun createConversation(userId1: String, userId2: String) {&#10;        val conversationData = hashMapOf(&#10;            &quot;participants&quot; to listOf(userId1, userId2),&#10;            &quot;lastMessage&quot; to &quot;&quot;,&#10;            &quot;lastTimestamp&quot; to System.currentTimeMillis(),&#10;            &quot;unread&quot; to mapOf(userId1 to 0, userId2 to 0)&#10;        )&#10;        db.collection(&quot;conversations&quot;).add(conversationData).await()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepository.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;&#10;&#10;class UserRepository @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;)  {&#10;&#10;    fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        android.util.Log.d(&quot;UserRepository&quot;, &quot;getUser: docRef=$docRef &quot; +&#10;                &quot;for uid=$uid&quot;)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            val user = snapshot?.toObject(User::class.java)&#10;            // Ensure uid and imageUrl are set from document id and default if missing&#10;            val userWithUid = user?.copy(&#10;                uid = snapshot.id,&#10;                imageUrl = user.imageUrl ?: emptyList()&#10;            )&#10;            android.util.Log.d(&quot;UserRepository&quot;, &quot;getUser: uid=$uid, user=$userWithUid&quot;)&#10;            trySend(userWithUid)&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    suspend fun updateUser(user: User): Resource&lt;Unit&gt; {&#10;        return try {&#10;            android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;updateProfile called with: $user&quot;)&#10;            firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateGender(uid: String, gender: String): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&quot;gender&quot;, gender).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateInterests(uid: String, interests: List&lt;String&gt;): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&quot;interests&quot;, interests).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateJobLocationDescription(uid: String, job: String?, location: String?, description: String?): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&#10;                mapOf(&#10;                    &quot;job&quot; to job,&#10;                    &quot;location&quot; to location,&#10;                    &quot;description&quot; to description&#10;                )&#10;            ).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun uploadAvatar(uid: String, uri: android.net.Uri): String {&#10;        // TODO: Implement Firebase Storage upload and return the URL&#10;        return &quot;&quot;&#10;    }&#10;&#10;    suspend fun createUser(user: User): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;&#10;&#10;class UserRepository @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;)  {&#10;&#10;    fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        android.util.Log.d(&quot;UserRepository&quot;, &quot;getUser: docRef=$docRef &quot; +&#10;                &quot;for uid=$uid&quot;)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            val user = snapshot?.toObject(User::class.java)&#10;            // Ensure uid and imageUrl are set from document id and default if missing&#10;            val userWithUid = user?.copy(&#10;                uid = snapshot.id,&#10;                imageUrl = user.imageUrl ?: emptyList()&#10;            )&#10;            android.util.Log.d(&quot;UserRepository&quot;, &quot;getUser: uid=$uid, user=$userWithUid&quot;)&#10;            trySend(userWithUid)&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    suspend fun updateUser(user: User): Resource&lt;Unit&gt; {&#10;        return try {&#10;            android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;updateProfile called with: $user&quot;)&#10;            firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateGender(uid: String, gender: String): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&quot;gender&quot;, gender).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateInterests(uid: String, interests: List&lt;String&gt;): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&quot;interests&quot;, interests).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateJobLocationDescription(uid: String, job: String?, location: String?, description: String?): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&#10;                mapOf(&#10;                    &quot;job&quot; to job,&#10;                    &quot;location&quot; to location,&#10;                    &quot;description&quot; to description&#10;                )&#10;            ).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun uploadAvatar(uid: String, uri: android.net.Uri): String {&#10;        // TODO: Implement Firebase Storage upload and return the URL&#10;        return &quot;&quot;&#10;    }&#10;&#10;    suspend fun createUser(user: User): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateAvatarUrl(uid: String, avatarUrl: String) {&#10;        firestore.collection(&quot;users&quot;).document(uid)&#10;            .update(&quot;avatarUrl&quot;, avatarUrl)&#10;            .await()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepositoryImpl.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;) : UserRepository {&#10;&#10;    fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            offer(snapshot?.toObject(User::class.java))&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    override suspend fun updateUser(user: User) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun saveProfile(&#10;        userId: String,&#10;        firstName: String,&#10;        lastName: String,&#10;        birthday: String?,&#10;        imageUrl: String?&#10;    ): Resource&lt;Unit&gt; {&#10;        return try {&#10;            val userMap = hashMapOf(&#10;                &quot;firstName&quot; to firstName,&#10;                &quot;lastName&quot; to lastName,&#10;                &quot;birthday&quot; to birthday,&#10;                &quot;imageUrl&quot; to imageUrl&#10;            )&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .set(userMap)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateGender(userId: String, gender: String): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;gender&quot;, gender)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateInterests(userId: String, interests: List&lt;String&gt;): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;interests&quot;, interests)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateJobLocationDescription(&#10;        userId: String,&#10;        job: String?,&#10;        location: String?,&#10;        description: String?&#10;    ): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(mapOf(&#10;                    &quot;job&quot; to job,&#10;                    &quot;location&quot; to location,&#10;                    &quot;description&quot; to description&#10;                ))&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;) : UserRepository {&#10;&#10;    override fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            trySend(snapshot?.toObject(User::class.java))&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    override suspend fun updateUser(user: User) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun saveProfile(&#10;        user: User&#10;    ) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun updateGender(uid: String, gender: String) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&quot;gender&quot;, gender).await()&#10;    }&#10;&#10;    override suspend fun updateInterests(uid: String, interests: List&lt;String&gt;) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&quot;interests&quot;, interests).await()&#10;    }&#10;&#10;    override suspend fun updateJobLocationDescription(uid: String, job: String?, location: String?, description: String?) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&#10;            mapOf(&#10;                &quot;job&quot; to job,&#10;                &quot;location&quot; to location,&#10;                &quot;description&quot; to description&#10;            )&#10;        ).await()&#10;    }&#10;&#10;    override suspend fun uploadAvatar(uid: String, uri: android.net.Uri): String {&#10;        // TODO: Implement Firebase Storage upload and return the URL&#10;        return &quot;&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/FilterDialog.kt.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/FilterDialog.kt.kt" />
              <option name="originalContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FilterScreen(navController: NavController) {&#10;    // State variables&#10;    var selectedInterest by remember { mutableStateOf(&quot;Girls&quot;) }&#10;    var location by remember { mutableStateOf(&quot;Chicago, USA&quot;) }&#10;    var distance by remember { mutableFloatStateOf(40f) }&#10;    var ageRange by remember { mutableStateOf(20f..28f) }&#10;&#10;    // Bottom sheet or dialog content&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .wrapContentHeight()&#10;            .clip(RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp))&#10;            .background(Color.White)&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        // Notch&#10;        Box(&#10;            modifier = Modifier&#10;                .width(40.dp)&#10;                .height(4.dp)&#10;                .background(Color.Gray.copy(alpha = 0.5f), CircleShape)&#10;                .align(Alignment.CenterHorizontally)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Title and Clear&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Filters&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.Black&#10;            )&#10;            TextButton(onClick = { /* TODO: Clear filters */ }) {&#10;                Text(&#10;                    text = &quot;Clear&quot;,&#10;                    color = Color(0xFFFF69B4), // Pink&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Interested in&#10;        Text(&#10;            text = &quot;Interested in&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        SegmentedButtonRow(modifier = Modifier.fillMaxWidth()) {&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Girls&quot;,&#10;                onClick = { selectedInterest = &quot;Girls&quot; },&#10;                shape = RoundedCornerShape(topStart = 8.dp, bottomStart = 8.dp)&#10;            ) {&#10;                Text(&quot;Girls&quot;)&#10;            }&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Boys&quot;,&#10;                onClick = { selectedInterest = &quot;Boys&quot; },&#10;                shape = RoundedCornerShape(0.dp)&#10;            ) {&#10;                Text(&quot;Boys&quot;)&#10;            }&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Both&quot;,&#10;                onClick = { selectedInterest = &quot;Both&quot; },&#10;                shape = RoundedCornerShape(topEnd = 8.dp, bottomEnd = 8.dp)&#10;            ) {&#10;                Text(&quot;Both&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Location&#10;        Text(&#10;            text = &quot;Location&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        OutlinedTextField(&#10;            value = location,&#10;            onValueChange = { /* Read-only, tap to select */ },&#10;            readOnly = true,&#10;            modifier = Modifier.fillMaxWidth(),&#10;            trailingIcon = {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowForward,&#10;                    contentDescription = &quot;Select location&quot;,&#10;                    tint = Color(0xFFFF0000) // Red&#10;                )&#10;            },&#10;            singleLine = true,&#10;            interactionSource = remember { MutableInteractionSource() }.also { interactionSource -&gt;&#10;                // TODO: Handle click to open location selector&#10;            }&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Distance&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;Distance&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;            Text(&#10;                text = &quot;${distance.toInt()}km&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;        Slider(&#10;            value = distance,&#10;            onValueChange = { distance = it },&#10;            valueRange = 0f..100f, // Assuming max 100km&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = SliderDefaults.colors(&#10;                thumbColor = Color(0xFFBB86FC), // Purple&#10;                activeTrackColor = Color(0xFFBB86FC),&#10;                inactiveTrackColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Age&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;Age&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;            Text(&#10;                text = &quot;${ageRange.start.toInt()}-${ageRange.endInclusive.toInt()}&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;        RangeSlider(&#10;            value = ageRange,&#10;            onValueChange = { ageRange = it },&#10;            valueRange = 18f..100f, // Assuming age range&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = SliderDefaults.colors(&#10;                thumbColor = Color(0xFFBB86FC), // Purple&#10;                activeTrackColor = Color(0xFFBB86FC),&#10;                inactiveTrackColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // Continue button&#10;        Button(&#10;            onClick = { /* TODO: Apply filters and navigate */ },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(48.dp),&#10;            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFBB86FC).copy(alpha = 0.2f)), // Light purple&#10;            shape = RoundedCornerShape(24.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Continue&quot;,&#10;                color = Color.Black,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FilterDialog(&#10;    show: Boolean,&#10;    onDismiss: () -&gt; Unit,&#10;    onApply: (selectedInterest: String, location: String, distance: Float, ageRange: ClosedFloatingPointRange&lt;Float&gt;) -&gt; Unit&#10;) {&#10;    if (!show) return&#10;    var selectedInterest by remember { mutableStateOf(&quot;Girls&quot;) }&#10;    var location by remember { mutableStateOf(&quot;Chicago, USA&quot;) }&#10;    var distance by remember { mutableStateOf(40f) }&#10;    var ageRange by remember { mutableStateOf(20f..28f) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    onApply(selectedInterest, location, distance, ageRange)&#10;                    onDismiss()&#10;                },&#10;                modifier = Modifier.fillMaxWidth().height(48.dp),&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFBB86FC).copy(alpha = 0.2f)),&#10;                shape = RoundedCornerShape(24.dp)&#10;            ) {&#10;                Text(&quot;Continue&quot;, color = Color.Black, fontSize = 16.sp, fontWeight = FontWeight.Bold)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;, color = Color.Gray)&#10;            }&#10;        },&#10;        title = {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&quot;Filters&quot;, fontSize = 20.sp, fontWeight = FontWeight.Bold, color = Color.Black)&#10;                TextButton(onClick = {&#10;                    selectedInterest = &quot;Girls&quot;&#10;                    location = &quot;Chicago, USA&quot;&#10;                    distance = 40f&#10;                    ageRange = 20f..28f&#10;                }) {&#10;                    Text(&quot;Clear&quot;, color = Color(0xFFFF69B4), fontSize = 16.sp)&#10;                }&#10;            }&#10;        },&#10;        text = {&#10;            Column(modifier = Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {&#10;                // Interested in&#10;                Text(&quot;Interested in&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.Center) {&#10;                    FilterSegmentButton(&quot;Girls&quot;, selectedInterest == &quot;Girls&quot;) { selectedInterest = &quot;Girls&quot; }&#10;                    FilterSegmentButton(&quot;Boys&quot;, selectedInterest == &quot;Boys&quot;) { selectedInterest = &quot;Boys&quot; }&#10;                    FilterSegmentButton(&quot;Both&quot;, selectedInterest == &quot;Both&quot;) { selectedInterest = &quot;Both&quot; }&#10;                }&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Location&#10;                Text(&quot;Location&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                OutlinedTextField(&#10;                    value = location,&#10;                    onValueChange = { location = it },&#10;                    readOnly = false,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    trailingIcon = {&#10;                        Icon(imageVector = Icons.Default.ArrowForward, contentDescription = &quot;Select location&quot;, tint = Color(0xFFFF0000))&#10;                    },&#10;                    singleLine = true&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Distance&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Distance&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${distance.toInt()}km&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                Slider(&#10;                    value = distance,&#10;                    onValueChange = { distance = it },&#10;                    valueRange = 0f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = Color(0xFFBB86FC),&#10;                        activeTrackColor = Color(0xFFBB86FC),&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Age&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Age&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${ageRange.start.toInt()}-${ageRange.endInclusive.toInt()}&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                RangeSlider(&#10;                    value = ageRange,&#10;                    onValueChange = { ageRange = it },&#10;                    valueRange = 18f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = Color(0xFFBB86FC),&#10;                        activeTrackColor = Color(0xFFBB86FC),&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;            }&#10;        },&#10;        shape = RoundedCornerShape(24.dp),&#10;        containerColor = Color.White&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun FilterSegmentButton(text: String, selected: Boolean, onClick: () -&gt; Unit) {&#10;    Button(&#10;        onClick = onClick,&#10;        colors = ButtonDefaults.buttonColors(&#10;            containerColor = if (selected) Color(0xFFBB86FC) else Color.LightGray,&#10;            contentColor = if (selected) Color.White else Color.Black&#10;        ),&#10;        modifier = Modifier&#10;            .weight(1f)&#10;            .height(36.dp)&#10;            .padding(horizontal = 2.dp),&#10;        shape = RoundedCornerShape(8.dp)&#10;    ) {&#10;        Text(text)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/ProfileCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/ProfileCard.kt" />
              <option name="originalContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.snapshots.SnapshotStateList&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.example.dating.data.model.Interest&#10;import com.example.dating.ui.theme.AppColors&#10;&#10;@Composable&#10;fun ProfileCard(&#10;    isEditMode: Boolean,&#10;    onEditToggle: () -&gt; Unit,&#10;    isSaving: Boolean,&#10;    saveError: String?,&#10;    editableFirstName: String,&#10;    editableLastName: String,&#10;    editableBirthday: String,&#10;    editableGender: String,&#10;    editableJob: String,&#10;    editableLocation: String,&#10;    editableDescription: String,&#10;    selectedInterests: SnapshotStateList&lt;String&gt;,&#10;    allInterests: List&lt;Interest&gt;,&#10;    onFirstNameChange: (String) -&gt; Unit,&#10;    onLastNameChange: (String) -&gt; Unit,&#10;    onBirthdayClick: () -&gt; Unit,&#10;    onGenderChange: (String) -&gt; Unit,&#10;    onJobChange: (String) -&gt; Unit,&#10;    onLocationChange: (String) -&gt; Unit,&#10;    onDescriptionChange: (String) -&gt; Unit,&#10;    isEditModeChange: (Boolean) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp, vertical = 16.dp),&#10;        shape = MaterialTheme.shapes.large,&#10;        elevation = CardDefaults.cardElevation(8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                TextButton(onClick = onEditToggle) {&#10;                    Text(&#10;                        text = if (isEditMode) &quot;Done&quot; else &quot;Edit&quot;,&#10;                        color = AppColors.Text_Pink,&#10;                        fontWeight = androidx.compose.ui.text.font.FontWeight.Bold&#10;                    )&#10;                }&#10;            }&#10;            if (isSaving) {&#10;                CircularProgressIndicator(modifier = Modifier.padding(vertical = 8.dp))&#10;            }&#10;            if (saveError != null) {&#10;                Text(&#10;                    text = saveError,&#10;                    color = androidx.compose.ui.graphics.Color.Red,&#10;                    modifier = Modifier.padding(vertical = 8.dp)&#10;                )&#10;            }&#10;            NameFields(&#10;                firstName = editableFirstName,&#10;                lastName = editableLastName,&#10;                isEditMode = isEditMode,&#10;                onFirstNameChange = onFirstNameChange,&#10;                onLastNameChange = onLastNameChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            BirthdayGenderFields(&#10;                birthday = editableBirthday,&#10;                gender = editableGender,&#10;                isEditMode = isEditMode,&#10;                showCalendar = false,&#10;                onShowCalendar = onBirthdayClick,&#10;                onGenderChange = onGenderChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            JobDropdown(&#10;                job = editableJob,&#10;                isEditMode = isEditMode,&#10;                onJobChange = onJobChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            LocationField(&#10;                location = editableLocation,&#10;                isEditMode = isEditMode,&#10;                onLocationChange = onLocationChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            DescriptionField(&#10;                description = editableDescription,&#10;                isEditMode = isEditMode,&#10;                onDescriptionChange = onDescriptionChange&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Interests&quot;,&#10;                fontSize = androidx.compose.ui.unit.sp(20),&#10;                color = AppColors.Text_Pink,&#10;                fontWeight = androidx.compose.ui.text.font.FontWeight.Bold,&#10;                modifier = Modifier&#10;                    .padding(bottom = 8.dp)&#10;                    .fillMaxWidth(),&#10;                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;            )&#10;            InterestsSection(&#10;                allInterests = allInterests,&#10;                selectedInterests = selectedInterests,&#10;                isEditMode = isEditMode&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.snapshots.SnapshotStateList&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.example.dating.data.model.Interest&#10;import com.example.dating.ui.theme.AppColors&#10;&#10;// Add missing imports for field components&#10;import com.example.dating.ui.components.NameFields&#10;import com.example.dating.ui.components.BirthdayGenderFields&#10;import com.example.dating.ui.components.JobDropdown&#10;import com.example.dating.ui.components.LocationField&#10;import com.example.dating.ui.components.DescriptionField&#10;import com.example.dating.ui.components.InterestsSection&#10;&#10;@Composable&#10;fun ProfileCard(&#10;    isEditMode: Boolean,&#10;    onEditToggle: () -&gt; Unit,&#10;    isSaving: Boolean,&#10;    saveError: String?,&#10;    editableFirstName: String,&#10;    editableLastName: String,&#10;    editableBirthday: String,&#10;    editableGender: String,&#10;    editableJob: String,&#10;    editableLocation: String,&#10;    editableDescription: String,&#10;    selectedInterests: SnapshotStateList&lt;String&gt;,&#10;    allInterests: List&lt;Interest&gt;,&#10;    onFirstNameChange: (String) -&gt; Unit,&#10;    onLastNameChange: (String) -&gt; Unit,&#10;    onBirthdayClick: () -&gt; Unit,&#10;    onGenderChange: (String) -&gt; Unit,&#10;    onJobChange: (String) -&gt; Unit,&#10;    onLocationChange: (String) -&gt; Unit,&#10;    onDescriptionChange: (String) -&gt; Unit,&#10;    isEditModeChange: (Boolean) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp, vertical = 16.dp),&#10;        shape = MaterialTheme.shapes.large,&#10;        elevation = CardDefaults.cardElevation(8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                TextButton(onClick = onEditToggle) {&#10;                    Text(&#10;                        text = if (isEditMode) &quot;Done&quot; else &quot;Edit&quot;,&#10;                        color = AppColors.Text_Pink,&#10;                        fontWeight = androidx.compose.ui.text.font.FontWeight.Bold&#10;                    )&#10;                }&#10;            }&#10;            if (isSaving) {&#10;                CircularProgressIndicator(modifier = Modifier.padding(vertical = 8.dp))&#10;            }&#10;            if (saveError != null) {&#10;                Text(&#10;                    text = saveError,&#10;                    color = androidx.compose.ui.graphics.Color.Red,&#10;                    modifier = Modifier.padding(vertical = 8.dp)&#10;                )&#10;            }&#10;            NameFields(&#10;                firstName = editableFirstName,&#10;                lastName = editableLastName,&#10;                isEditMode = isEditMode,&#10;                onFirstNameChange = onFirstNameChange,&#10;                onLastNameChange = onLastNameChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            BirthdayGenderFields(&#10;                birthday = editableBirthday,&#10;                gender = editableGender,&#10;                isEditMode = isEditMode,&#10;                showCalendar = false,&#10;                onShowCalendar = onBirthdayClick,&#10;                onGenderChange = onGenderChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            JobDropdown(&#10;                job = editableJob,&#10;                isEditMode = isEditMode,&#10;                onJobChange = onJobChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            LocationField(&#10;                location = editableLocation,&#10;                isEditMode = isEditMode,&#10;                onLocationChange = onLocationChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            DescriptionField(&#10;                description = editableDescription,&#10;                isEditMode = isEditMode,&#10;                onDescriptionChange = onDescriptionChange&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Interests&quot;,&#10;                fontSize = androidx.compose.ui.unit.sp(20),&#10;                color = AppColors.Text_Pink,&#10;                fontWeight = androidx.compose.ui.text.font.FontWeight.Bold,&#10;                modifier = Modifier&#10;                    .padding(bottom = 8.dp)&#10;                    .fillMaxWidth(),&#10;                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;            )&#10;            InterestsSection(&#10;                allInterests = allInterests,&#10;                selectedInterests = selectedInterests,&#10;                isEditMode = isEditMode&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class HomeViewModel : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val _addFavoriteState = MutableStateFlow&lt;Result&lt;Unit&gt;?&gt;(null)&#10;    val addFavoriteState: StateFlow&lt;Result&lt;Unit&gt;?&gt; = _addFavoriteState&#10;&#10;    fun addFavorite(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        val favorite = hashMapOf(&#10;            &quot;likerId&quot; to likerId,&#10;            &quot;likedId&quot; to likedId,&#10;            &quot;timestamp&quot; to Timestamp.now()&#10;        )&#10;        viewModelScope.launch {&#10;            try {&#10;                db.collection(&quot;favorites&quot;).add(favorite)&#10;                _addFavoriteState.value = Result.success(Unit)&#10;            } catch (e: Exception) {&#10;                _addFavoriteState.value = Result.failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearAddFavoriteState() {&#10;        _addFavoriteState.value = null&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/profile/ProfileScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/profile/ProfileScreen.kt" />
              <option name="originalContent" value="// ui/profile/ProfileDetailsScreen.kt&#10;package com.example.dating.ui.profile&#10;&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.CameraAlt&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import coil.compose.AsyncImage&#10;import com.example.dating.ui.components.CustomCalendarDialog&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;import com.example.dating.ui.theme.AppColors&#10;import com.example.dating.R&#10;import androidx.compose.ui.res.painterResource&#10;import com.example.dating.viewmodel.ProfileViewModel&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.data.model.User&#10;@Composable&#10;fun ProfileScreen(navController: NavController, viewModel: ProfileViewModel = hiltViewModel()) {&#10;    val userState by viewModel.user.collectAsState()&#10;&#10;    var firstName by remember { mutableStateOf(userState?.firstName ?: &quot;&quot;) }&#10;    var lastName by remember { mutableStateOf(userState?.lastName ?: &quot;&quot;) }&#10;    var birthday by remember { mutableStateOf(userState?.birthday?.let { SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(it) } ?: null) }&#10;    var selectedImageUrl by remember { mutableStateOf&lt;android.net.Uri?&gt;(null) }&#10;    var showCalendar by remember { mutableStateOf(false) }&#10;    var isSaving by remember { mutableStateOf(false) }&#10;    var saveError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    // Image picker launcher&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri -&gt;&#10;        selectedImageUrl = uri&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;            .padding(horizontal = 24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Header with Skip button&#10;        Box(modifier = Modifier.fillMaxWidth()) {&#10;            // Back&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(RoundedCornerShape(12.dp))&#10;                    .background(Color.White)&#10;                    .clickable { navController.popBackStack() }&#10;                    .align(Alignment.CenterStart),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(Icons.Default.ArrowBack, contentDescription = &quot;Back&quot;, tint = AppColors.Text_Pink,)&#10;            }&#10;&#10;            // Skip&#10;            Text(&#10;                text = &quot;Skip&quot;,&#10;                color = AppColors.Text_Pink,&#10;                fontSize = 16.sp,&#10;                modifier = Modifier&#10;                    .align(Alignment.CenterEnd)&#10;                    .clickable { navController.navigate(&quot;gender_select&quot;) }&#10;            )&#10;        }&#10;&#10;&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // Title&#10;        Text(&#10;            text = &quot;Profile details&quot;,&#10;            fontSize = 28.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = AppColors.Text_LightBlack&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(48.dp))&#10;&#10;        // Avatar Section với Icons.Person&#10;        Box(&#10;            contentAlignment = Alignment.BottomEnd&#10;        ) {&#10;            // Main avatar circle&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(120.dp)&#10;                    .clip(CircleShape)&#10;                    .background(Color(0xFFE0E0E0))&#10;                    .clickable { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                if (selectedImageUrl != null) {&#10;                    AsyncImage(&#10;                        model = selectedImageUrl,&#10;                        contentDescription = &quot;Profile Image&quot;,&#10;                        modifier = Modifier&#10;                            .size(120.dp)&#10;                            .clip(CircleShape),&#10;                        contentScale = ContentScale.Crop&#10;                    )&#10;                } else {&#10;                    // Default avatar - sử dụng Icons.Default.Person&#10;                    Icon(&#10;                        imageVector = Icons.Default.Person,&#10;                        contentDescription = &quot;Default Avatar&quot;,&#10;                        modifier = Modifier.size(60.dp),&#10;                        tint = Color.Gray&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Camera icon for editing&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(36.dp)&#10;                    .clip(CircleShape)&#10;                    .background(AppColors.Main_Secondary1)&#10;                    .clickable { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.CameraAlt,&#10;                    contentDescription = &quot;Change Photo&quot;,&#10;                    tint = AppColors.Main_Primary,&#10;                    modifier = Modifier.size(20.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(48.dp))&#10;&#10;        // First Name Field&#10;        OutlinedTextField(&#10;            value = firstName,&#10;            onValueChange = { firstName = it },&#10;            label = { Text(&quot;First name&quot;) },&#10;            singleLine = true,&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = OutlinedTextFieldDefaults.colors(&#10;                focusedBorderColor = AppColors.Text_Pink,&#10;                unfocusedBorderColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Last Name Field&#10;        OutlinedTextField(&#10;            value = lastName,&#10;            onValueChange = { lastName = it },&#10;            label = { Text(&quot;Last name&quot;) },&#10;            singleLine = true,&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = OutlinedTextFieldDefaults.colors(&#10;                focusedBorderColor = AppColors.Text_Pink,&#10;                unfocusedBorderColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Birthday Button&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .clickable { showCalendar = true },&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = CardDefaults.cardColors(containerColor = Color(0xFFF8E8F5))&#10;        ) {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    painter = painterResource(id = R.drawable.ic_profile_calender),&#10;                    contentDescription = &quot;Calendar&quot;,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;&#10;                Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                Text(&#10;                    text = birthday?.let {&#10;                        SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()).format(it)&#10;                    } ?: &quot;Choose birthday date&quot;,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = AppColors.Main_Primary&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.weight(1f))&#10;&#10;        // Confirm Button&#10;        Button(&#10;            onClick = {&#10;                isSaving = true&#10;                saveError = null&#10;                val user = viewModel.user.value?.copy(&#10;                    firstName = firstName,&#10;                    lastName = lastName,&#10;                    birthday = birthday?.let { SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()).format(it) },&#10;                ) ?: User(&#10;                    uid = &quot;&quot;, // Set the correct uid if available&#10;                    firstName = firstName,&#10;                    lastName = lastName,&#10;                    birthday = birthday?.let { SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()).format(it) }&#10;                )&#10;                viewModel.updateProfile(user)&#10;                isSaving = false&#10;                navController.navigate(&quot;gender_select&quot;)&#10;            },&#10;            enabled = firstName.isNotBlank() &amp;&amp; lastName.isNotBlank() &amp;&amp; birthday != null &amp;&amp; !isSaving,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(56.dp),&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = AppColors.Main_Secondary1,&#10;                disabledContainerColor = Color.LightGray&#10;            )&#10;        ) {&#10;            if (isSaving) {&#10;                CircularProgressIndicator(modifier = Modifier.size(24.dp), color = AppColors.Main_Primary)&#10;            } else {&#10;                Text(&#10;                    text = &quot;Confirm&quot;,&#10;                    color = AppColors.Main_Primary,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;        }&#10;        if (saveError != null) {&#10;            Text(&#10;                text = saveError ?: &quot;&quot;,&#10;                color = Color.Red,&#10;                modifier = Modifier.padding(top = 8.dp)&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;    }&#10;&#10;    // Custom Calendar Dialog&#10;    if (showCalendar) {&#10;        CustomCalendarDialog(&#10;            onDateSelected = { selectedDate -&gt;&#10;                birthday = selectedDate&#10;                showCalendar = false&#10;            },&#10;            onDismiss = { showCalendar = false }&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="// ui/profile/ProfileDetailsScreen.kt&#10;package com.example.dating.ui.profile&#10;&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.CameraAlt&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import coil.compose.AsyncImage&#10;import com.example.dating.ui.components.CustomCalendarDialog&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;import com.example.dating.ui.theme.AppColors&#10;import com.example.dating.R&#10;import androidx.compose.ui.res.painterResource&#10;import com.example.dating.viewmodel.ProfileViewModel&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.data.model.User&#10;@Composable&#10;fun ProfileScreen(navController: NavController, viewModel: ProfileViewModel = hiltViewModel()) {&#10;    val userState by viewModel.user.collectAsState()&#10;&#10;    var firstName by remember { mutableStateOf(userState?.firstName ?: &quot;&quot;) }&#10;    var lastName by remember { mutableStateOf(userState?.lastName ?: &quot;&quot;) }&#10;    var birthday by remember { mutableStateOf(userState?.birthday?.let { SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(it) } ?: null) }&#10;    var selectedImageUrl by remember { mutableStateOf&lt;android.net.Uri?&gt;(null) }&#10;    var showCalendar by remember { mutableStateOf(false) }&#10;    var isSaving by remember { mutableStateOf(false) }&#10;    var saveError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    // Image picker launcher&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri -&gt;&#10;        selectedImageUrl = uri&#10;        if (uri != null) {&#10;            viewModel.uploadAvatar(uri)&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;            .padding(horizontal = 24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Header with Skip button&#10;        Box(modifier = Modifier.fillMaxWidth()) {&#10;            // Back&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(RoundedCornerShape(12.dp))&#10;                    .background(Color.White)&#10;                    .clickable { navController.popBackStack() }&#10;                    .align(Alignment.CenterStart),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(Icons.Default.ArrowBack, contentDescription = &quot;Back&quot;, tint = AppColors.Text_Pink,)&#10;            }&#10;&#10;            // Skip&#10;            Text(&#10;                text = &quot;Skip&quot;,&#10;                color = AppColors.Text_Pink,&#10;                fontSize = 16.sp,&#10;                modifier = Modifier&#10;                    .align(Alignment.CenterEnd)&#10;                    .clickable { navController.navigate(&quot;gender_select&quot;) }&#10;            )&#10;        }&#10;&#10;&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // Title&#10;        Text(&#10;            text = &quot;Profile details&quot;,&#10;            fontSize = 28.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = AppColors.Text_LightBlack&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(48.dp))&#10;&#10;        // Avatar Section với Icons.Person&#10;        Box(&#10;            contentAlignment = Alignment.BottomEnd&#10;        ) {&#10;            // Main avatar circle&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(120.dp)&#10;                    .clip(CircleShape)&#10;                    .background(Color(0xFFE0E0E0))&#10;                    .clickable { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                if (selectedImageUrl != null) {&#10;                    AsyncImage(&#10;                        model = selectedImageUrl,&#10;                        contentDescription = &quot;Profile Image&quot;,&#10;                        modifier = Modifier&#10;                            .size(120.dp)&#10;                            .clip(CircleShape),&#10;                        contentScale = ContentScale.Crop&#10;                    )&#10;                } else {&#10;                    // Default avatar - sử dụng Icons.Default.Person&#10;                    Icon(&#10;                        imageVector = Icons.Default.Person,&#10;                        contentDescription = &quot;Default Avatar&quot;,&#10;                        modifier = Modifier.size(60.dp),&#10;                        tint = Color.Gray&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Camera icon for editing&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(36.dp)&#10;                    .clip(CircleShape)&#10;                    .background(AppColors.Main_Secondary1)&#10;                    .clickable { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.CameraAlt,&#10;                    contentDescription = &quot;Change Photo&quot;,&#10;                    tint = AppColors.Main_Primary,&#10;                    modifier = Modifier.size(20.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(48.dp))&#10;&#10;        // First Name Field&#10;        OutlinedTextField(&#10;            value = firstName,&#10;            onValueChange = { firstName = it },&#10;            label = { Text(&quot;First name&quot;) },&#10;            singleLine = true,&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = OutlinedTextFieldDefaults.colors(&#10;                focusedBorderColor = AppColors.Text_Pink,&#10;                unfocusedBorderColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Last Name Field&#10;        OutlinedTextField(&#10;            value = lastName,&#10;            onValueChange = { lastName = it },&#10;            label = { Text(&quot;Last name&quot;) },&#10;            singleLine = true,&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = OutlinedTextFieldDefaults.colors(&#10;                focusedBorderColor = AppColors.Text_Pink,&#10;                unfocusedBorderColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Birthday Button&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .clickable { showCalendar = true },&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = CardDefaults.cardColors(containerColor = Color(0xFFF8E8F5))&#10;        ) {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    painter = painterResource(id = R.drawable.ic_profile_calender),&#10;                    contentDescription = &quot;Calendar&quot;,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;&#10;                Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                Text(&#10;                    text = birthday?.let {&#10;                        SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()).format(it)&#10;                    } ?: &quot;Choose birthday date&quot;,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = AppColors.Main_Primary&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.weight(1f))&#10;&#10;        // Confirm Button&#10;        Button(&#10;            onClick = {&#10;                isSaving = true&#10;                saveError = null&#10;                val user = viewModel.user.value?.copy(&#10;                    firstName = firstName,&#10;                    lastName = lastName,&#10;                    birthday = birthday?.let { SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()).format(it) },&#10;                ) ?: User(&#10;                    uid = &quot;&quot;, // Set the correct uid if available&#10;                    firstName = firstName,&#10;                    lastName = lastName,&#10;                    birthday = birthday?.let { SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()).format(it) }&#10;                )&#10;                viewModel.updateProfile(user)&#10;                isSaving = false&#10;                navController.navigate(&quot;gender_select&quot;)&#10;            },&#10;            enabled = firstName.isNotBlank() &amp;&amp; lastName.isNotBlank() &amp;&amp; birthday != null &amp;&amp; !isSaving,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(56.dp),&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = AppColors.Main_Secondary1,&#10;                disabledContainerColor = Color.LightGray&#10;            )&#10;        ) {&#10;            if (isSaving) {&#10;                CircularProgressIndicator(modifier = Modifier.size(24.dp), color = AppColors.Main_Primary)&#10;            } else {&#10;                Text(&#10;                    text = &quot;Confirm&quot;,&#10;                    color = AppColors.Main_Primary,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;        }&#10;        if (saveError != null) {&#10;            Text(&#10;                text = saveError ?: &quot;&quot;,&#10;                color = Color.Red,&#10;                modifier = Modifier.padding(top = 8.dp)&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;    }&#10;&#10;    // Custom Calendar Dialog&#10;    if (showCalendar) {&#10;        CustomCalendarDialog(&#10;            onDateSelected = { selectedDate -&gt;&#10;                birthday = selectedDate&#10;                showCalendar = false&#10;            },&#10;            onDismiss = { showCalendar = false }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/FavoriteViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/FavoriteViewModel.kt" />
              <option name="originalContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.FavoriteRepository&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;&#10;@HiltViewModel&#10;class FavoriteViewModel @Inject constructor(&#10;    private val favoriteRepository: FavoriteRepository&#10;) : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val _likedMeProfiles = MutableStateFlow&lt;Resource&lt;List&lt;String&gt;&gt;&gt;(Resource.Loading)&#10;    val likedMeProfiles: StateFlow&lt;Resource&lt;List&lt;String&gt;&gt;&gt; = _likedMeProfiles&#10;&#10;    private val _usersState = MutableStateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt;(Resource.Loading)&#10;    val usersState: StateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt; = _usersState&#10;&#10;    init {&#10;        fetchFavorites()&#10;    }&#10;&#10;    fun fetchFavorites() {&#10;        val currentUserId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        android.util.Log.d(&quot;FavoriteViewModel&quot;, &quot;likedMeIds: $currentUserId&quot;)&#10;&#10;        viewModelScope.launch {&#10;            try {&#10;                _likedMeProfiles.value = Resource.Loading&#10;                val likedMeSnapshot = favoriteRepository.getFavoritesByLikedId(currentUserId)&#10;                val likedMeIds = likedMeSnapshot.mapNotNull { it[&quot;likerId&quot;] as? String }&#10;                android.util.Log.d(&quot;FavoriteViewModel&quot;, &quot;likedMeIds: $likedMeIds&quot;)&#10;                _likedMeProfiles.value = Resource.Success(likedMeIds)&#10;            } catch (e: Exception) {&#10;                _likedMeProfiles.value = Resource.Failure(e as? Exception ?: Exception(e.message))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteFavorite(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            try {&#10;                favoriteRepository.deleteFavorite(likerId, likedId)&#10;                fetchFavorites() // Refresh after delete&#10;            } catch (_: Exception) {}&#10;        }&#10;    }&#10;&#10;    fun getUserProfilesByIds(uids: List&lt;String&gt;) {&#10;        viewModelScope.launch {&#10;            _usersState.value = Resource.Loading&#10;            try {&#10;                val users = favoriteRepository.getUserProfilesByIds(uids)&#10;                _usersState.value = Resource.Success(users)&#10;            } catch (e: Exception) {&#10;                _usersState.value = Resource.Failure(e as? Exception ?: Exception(e.message))&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.FavoriteRepository&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;&#10;@HiltViewModel&#10;class FavoriteViewModel @Inject constructor(&#10;    private val favoriteRepository: FavoriteRepository&#10;) : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    private val _usersState = MutableStateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt;(Resource.Loading)&#10;    val usersState: StateFlow&lt;Resource&lt;List&lt;User&gt;&gt;&gt; = _usersState&#10;&#10;    init {&#10;        fetchFavorites()&#10;    }&#10;&#10;    fun fetchFavorites() {&#10;        val currentUserId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        android.util.Log.d(&quot;FavoriteViewModel&quot;, &quot;currentUserId: $currentUserId&quot;)&#10;&#10;        viewModelScope.launch {&#10;            try {&#10;                _usersState.value = Resource.Loading&#10;&#10;                // Get list of users who liked me&#10;                val likedMeSnapshot = favoriteRepository.getFavoritesByLikedId(currentUserId)&#10;                val likedMeIds = likedMeSnapshot.mapNotNull { it[&quot;likerId&quot;] as? String }&#10;                android.util.Log.d(&quot;FavoriteViewModel&quot;, &quot;likedMeIds: $likedMeIds&quot;)&#10;&#10;                // If empty, return immediately&#10;                if (likedMeIds.isEmpty()) {&#10;                    _usersState.value = Resource.Success(emptyList())&#10;                    return@launch&#10;                }&#10;&#10;                // Fetch user profiles&#10;                val users = getUserProfilesByIds(likedMeIds)&#10;                _usersState.value = Resource.Success(users)&#10;            } catch (e: Exception) {&#10;                _usersState.value = Resource.Failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    private suspend fun getUserProfilesByIds(uids: List&lt;String&gt;): List&lt;User&gt; {&#10;        return try {&#10;            val snapshot = db.collection(&quot;users&quot;)&#10;                .whereIn(&quot;uid&quot;, uids)&#10;                .get()&#10;                .await()&#10;&#10;            snapshot.documents.mapNotNull { it.toObject(User::class.java) }&#10;        } catch (e: Exception) {&#10;            android.util.Log.e(&quot;FavoriteViewModel&quot;, &quot;Error fetching users: &quot;, e)&#10;            emptyList()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/ProfileViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/ProfileViewModel.kt" />
              <option name="originalContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.repository.AuthRepository&#10;import com.example.dating.data.model.repository.UserRepository&#10;import com.example.dating.data.model.Resource&#10;&#10;@HiltViewModel&#10;class ProfileViewModel @Inject constructor(&#10;    private val userRepository: UserRepository,&#10;    private val auth: AuthRepository,&#10;    ) : ViewModel() {&#10;    private val _user = MutableStateFlow&lt;User?&gt;(null)&#10;    val user: StateFlow&lt;User?&gt; = _user&#10;&#10;    private val _updateState = MutableStateFlow&lt;Resource&lt;Unit&gt;?&gt;(null)&#10;    val updateState: StateFlow&lt;Resource&lt;Unit&gt;?&gt; = _updateState&#10;&#10;    init {&#10;        val uid = auth.currentUser?.uid&#10;        if (uid != null) {&#10;            viewModelScope.launch {&#10;                userRepository.getUser(uid).collect { fetchedUser -&gt;&#10;                    android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;Fetched user: $fetchedUser&quot;)&#10;                    _user.value = fetchedUser&#10;                }&#10;            }&#10;        } else {&#10;            android.util.Log.w(&quot;ProfileViewModel&quot;, &quot;No UID found in AuthRepository&quot;)&#10;        }&#10;    }&#10;&#10;    fun loadUser(uid: String) {&#10;        viewModelScope.launch {&#10;            userRepository.getUser(uid).collect { _user.value = it }&#10;        }&#10;    }&#10;&#10;    fun updateProfile(user: User) {&#10;        android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;updateProfile called with: $user&quot;)&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.updateUser(user)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = user&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateGender(gender: String) {&#10;        val currentUser = _user.value ?: return&#10;        val updatedUser = currentUser.copy(gender = gender)&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.updateGender(updatedUser.uid, gender)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = updatedUser&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateInterests(interests: List&lt;String&gt;) {&#10;        val currentUser = _user.value ?: return&#10;        val updatedUser = currentUser.copy(interests = interests)&#10;        android.util.Log.w(&quot;ProfileViewModel&quot;, currentUser.toString())&#10;&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.updateInterests(updatedUser.uid, interests)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = updatedUser&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateJobLocationDescription(job: String?, location: String?, description: String?) {&#10;        val currentUser = _user.value ?: return&#10;        val updatedUser = currentUser.copy(job = job, location = location, description = description)&#10;        viewModelScope.launch {&#10;            userRepository.updateJobLocationDescription(updatedUser.uid, job, location, description)&#10;            _user.value = updatedUser&#10;        }&#10;    }&#10;&#10;    fun createUser(user: User) {&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.createUser(user)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = user&#10;            }&#10;        }&#10;    }&#10;&#10;    fun uploadAvatar(uri: android.net.Uri) {&#10;        val uid = auth.currentUser?.uid ?: return&#10;        val storage = com.google.firebase.storage.FirebaseStorage.getInstance()&#10;        val avatarRef = storage.reference.child(&quot;avatars/$uid.jpg&quot;)&#10;        viewModelScope.launch {&#10;            try {&#10;                avatarRef.putFile(uri).addOnSuccessListener {&#10;                    avatarRef.downloadUrl.addOnSuccessListener { downloadUrl -&gt;&#10;                        viewModelScope.launch {&#10;                            userRepository.updateAvatarUrl(uid, downloadUrl.toString())&#10;                            android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;Avatar updated: $downloadUrl&quot;)&#10;                        }&#10;                    }&#10;                }.addOnFailureListener { e -&gt;&#10;                    android.util.Log.e(&quot;ProfileViewModel&quot;, &quot;Failed to upload avatar: ${e.message}&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                android.util.Log.e(&quot;ProfileViewModel&quot;, &quot;Exception in uploadAvatar: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.repository.AuthRepository&#10;import com.example.dating.data.model.repository.UserRepository&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.storage.FirebaseStorage&#10;&#10;@HiltViewModel&#10;class ProfileViewModel @Inject constructor(&#10;    private val userRepository: UserRepository,&#10;    private val auth: AuthRepository,&#10;    ) : ViewModel() {&#10;    private val _user = MutableStateFlow&lt;User?&gt;(null)&#10;    val user: StateFlow&lt;User?&gt; = _user&#10;&#10;    private val _updateState = MutableStateFlow&lt;Resource&lt;Unit&gt;?&gt;(null)&#10;    val updateState: StateFlow&lt;Resource&lt;Unit&gt;?&gt; = _updateState&#10;&#10;    init {&#10;        val uid = auth.currentUser?.uid&#10;        if (uid != null) {&#10;            viewModelScope.launch {&#10;                userRepository.getUser(uid).collect { fetchedUser -&gt;&#10;                    android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;Fetched user: $fetchedUser&quot;)&#10;                    _user.value = fetchedUser&#10;                }&#10;            }&#10;        } else {&#10;            android.util.Log.w(&quot;ProfileViewModel&quot;, &quot;No UID found in AuthRepository&quot;)&#10;        }&#10;    }&#10;&#10;    fun loadUser(uid: String) {&#10;        viewModelScope.launch {&#10;            userRepository.getUser(uid).collect { _user.value = it }&#10;        }&#10;    }&#10;&#10;    fun updateProfile(user: User) {&#10;        android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;updateProfile called with: $user&quot;)&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.updateUser(user)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = user&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateGender(gender: String) {&#10;        val currentUser = _user.value ?: return&#10;        val updatedUser = currentUser.copy(gender = gender)&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.updateGender(updatedUser.uid, gender)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = updatedUser&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateInterests(interests: List&lt;String&gt;) {&#10;        val currentUser = _user.value ?: return&#10;        val updatedUser = currentUser.copy(interests = interests)&#10;        android.util.Log.w(&quot;ProfileViewModel&quot;, currentUser.toString())&#10;&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.updateInterests(updatedUser.uid, interests)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = updatedUser&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateJobLocationDescription(job: String?, location: String?, description: String?) {&#10;        val currentUser = _user.value ?: return&#10;        val updatedUser = currentUser.copy(job = job, location = location, description = description)&#10;        viewModelScope.launch {&#10;            userRepository.updateJobLocationDescription(updatedUser.uid, job, location, description)&#10;            _user.value = updatedUser&#10;        }&#10;    }&#10;&#10;    fun createUser(user: User) {&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.createUser(user)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = user&#10;            }&#10;        }&#10;    }&#10;&#10;    fun uploadAvatar(uri: android.net.Uri) {&#10;        val uid = auth.currentUser?.uid ?: return&#10;        val storage = FirebaseStorage.getInstance()&#10;        val avatarRef = storage.reference.child(&quot;avatars/$uid.jpg&quot;)&#10;        avatarRef.putFile(uri)&#10;            .addOnSuccessListener { taskSnapshot: com.google.firebase.storage.UploadTask.TaskSnapshot -&gt;&#10;                avatarRef.downloadUrl.addOnSuccessListener { downloadUrl: android.net.Uri -&gt;&#10;                    viewModelScope.launch {&#10;                        userRepository.updateAvatarUrl(uid, downloadUrl.toString())&#10;                        android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;Avatar updated: $downloadUrl&quot;)&#10;                    }&#10;                }&#10;            }&#10;            .addOnFailureListener { e: Exception -&gt;&#10;                android.util.Log.e(&quot;ProfileViewModel&quot;, &quot;Failed to upload avatar: ${e.message}&quot;)&#10;            }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>