<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/components/DateUtils.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/components/DateUtils.kt" />
              <option name="updatedContent" value="package com.example.dating.components&#10;&#10;import java.util.Calendar&#10;&#10;object DateUtils {&#10;    /**&#10;     * Calculates age from a birthday string supporting multiple formats.&#10;     * Supported formats: &quot;dd/MM/yyyy&quot;, &quot;yyyy-MM-dd&quot;, &quot;dd-MM-yyyy&quot;, &quot;MM/dd/yyyy&quot;&#10;     * Returns null if parsing fails.&#10;     */&#10;    fun calculateAgeFromBirthday(birthday: String?): Int? {&#10;        if (birthday == null) return null&#10;        try {&#10;            val year = birthday.split(&quot;/&quot;).getOrNull(2)?.toInt()&#10;            val currentYear = Calendar.getInstance().get(Calendar.YEAR)&#10;            if (year != null) return currentYear - year&#10;        } catch (_: Exception) {}&#10;        val formats = listOf(&quot;yyyy-MM-dd&quot;, &quot;dd-MM-yyyy&quot;, &quot;MM/dd/yyyy&quot;)&#10;        for (fmt in formats) {&#10;            try {&#10;                val sdf = java.text.SimpleDateFormat(fmt)&#10;                val date = sdf.parse(birthday)&#10;                if (date != null) {&#10;                    val dobCal = Calendar.getInstance()&#10;                    dobCal.time = date&#10;                    val birthYear = dobCal.get(Calendar.YEAR)&#10;                    val currentYear = Calendar.getInstance().get(Calendar.YEAR)&#10;                    return currentYear - birthYear&#10;                }&#10;            } catch (_: Exception) {}&#10;        }&#10;        return null&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/MatchRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/MatchRepository.kt" />
              <option name="updatedContent" value="package com.example.dating.data&#10;&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class MatchRepository {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    suspend fun saveMatch(userId1: String, userId2: String, status: Boolean) {&#10;        // Ensure userId1 &lt; userId2 alphabetically&#10;        val (firstId, secondId) = if (userId1 &lt; userId2) userId1 to userId2 else userId2 to userId1&#10;        val matchData = hashMapOf(&#10;            &quot;userId1&quot; to firstId,&#10;            &quot;userId2&quot; to secondId,&#10;            &quot;timestamp&quot; to Timestamp.now(),&#10;            &quot;status&quot; to status&#10;        )&#10;        // Check for duplicate (userId1/userId2 only)&#10;        val query = db.collection(&quot;match&quot;)&#10;            .whereEqualTo(&quot;userId1&quot;, firstId)&#10;            .whereEqualTo(&quot;userId2&quot;, secondId)&#10;            .get().await()&#10;        android.util.Log.d(&quot;MatchRepository&quot;, &quot;MatchQuery: userId1=$firstId, userId2=$secondId, resultCount=${query.size()}&quot;)&#10;        if (query.isEmpty) {&#10;            db.collection(&quot;match&quot;).add(matchData)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/RecommendationRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/RecommendationRepository.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import android.content.Context&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.utils.DateUtils&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import kotlinx.coroutines.async&#10;import kotlinx.coroutines.coroutineScope&#10;import kotlinx.coroutines.tasks.await&#10;import org.json.JSONObject&#10;import javax.inject.Inject&#10;import kotlin.math.sqrt&#10;&#10;class RecommendationRepository @Inject constructor(&#10;    @ApplicationContext context: Context&#10;) {&#10;&#10;    // --- Config: predefined interests ---&#10;    private val allInterests = listOf(&#10;        &quot;music&quot;, &quot;travel&quot;, &quot;cooking&quot;, &quot;sports&quot;, &quot;reading&quot;,&#10;        &quot;movies&quot;, &quot;art&quot;, &quot;gaming&quot;, &quot;fitness&quot;, &quot;photography&quot;,&#10;        &quot;dancing&quot;, &quot;fashion&quot;, &quot;technology&quot;, &quot;pets&quot;&#10;    )&#10;&#10;    // --- Load job embeddings from JSON asset ---&#10;    private val jobEmbeddingMap: Map&lt;String, FloatArray&gt; = loadJobEmbeddings(context, &quot;job_embeddings_8d.json&quot;)&#10;&#10;    private fun loadJobEmbeddings(context: Context, assetFile: String): Map&lt;String, FloatArray&gt; {&#10;        val jsonStr = context.assets.open(assetFile).bufferedReader().use { it.readText() }&#10;        val json = JSONObject(jsonStr)&#10;        val map = mutableMapOf&lt;String, FloatArray&gt;()&#10;        json.keys().forEach { key -&gt;&#10;            val arr = json.getJSONArray(key)&#10;            val floatArr = FloatArray(arr.length()) { i -&gt; arr.getDouble(i).toFloat() }&#10;            map[key] = floatArr&#10;        }&#10;        return map&#10;    }&#10;&#10;    // --- Placeholder for text embedding model (e.g., SentenceTransformer / TFLite) ---&#10;    private fun textEmbedding(text: String, dim: Int = 384): FloatArray {&#10;        val hash = text.hashCode()&#10;        return FloatArray(dim) { i -&gt; ((hash + i) % 100) / 100f }&#10;    }&#10;&#10;    suspend fun getEmbeddingFromFirestore(userId: String): FloatArray? {&#10;        val db = com.google.firebase.firestore.FirebaseFirestore.getInstance()&#10;        val embeddingDoc = db.collection(&quot;user_embeddings&quot;).document(userId).get().await()&#10;        if (embeddingDoc.exists()) {&#10;            val embeddingMap = embeddingDoc.data ?: emptyMap&lt;String, Any&gt;()&#10;            return FloatArray(embeddingMap.size) { i -&gt;&#10;                (embeddingMap[&quot;dim_$i&quot;] as? Number)?.toFloat() ?: 0f&#10;            }&#10;        }&#10;        return null&#10;    }&#10;&#10;    private fun saveEmbeddingToFirestore(userId: String, userEmbedding: FloatArray) {&#10;        val db = com.google.firebase.firestore.FirebaseFirestore.getInstance()&#10;        val embeddingMap = userEmbedding.mapIndexed { i, v -&gt; &quot;dim_$i&quot; to v }.toMap()&#10;        db.collection(&quot;user_embeddings&quot;).document(userId)&#10;            .set(embeddingMap)&#10;            .addOnSuccessListener {&#10;                android.util.Log.d(&quot;RecommendationRepository&quot;, &quot;Saved embedding for $userId&quot;)&#10;            }&#10;            .addOnFailureListener { e -&gt;&#10;                android.util.Log.e(&quot;RecommendationRepository&quot;, &quot;Failed to save embedding for $userId&quot;, e)&#10;            }&#10;    }&#10;&#10;    fun mergeEmbeddings(base: FloatArray, feedback: FloatArray): FloatArray {&#10;        return FloatArray(base.size) { i -&gt; 0.8f*base[i] + 0.2f*feedback[i] } // weighting tuỳ ý&#10;    }&#10;    &#10;    // --- Create user embedding ---&#10;    suspend fun createEmbedding(user: User): FloatArray {&#10;        // --- Age ---&#10;        val age = DateUtils.calculateAgeFromBirthday(user.birthday) ?: 0&#10;        val ageFeature = ((age - 18) / 42f).coerceIn(0f, 1f)&#10;&#10;&#10;        // --- Last Active ---&#10;        val now = System.currentTimeMillis()&#10;        val daysSinceLastActive = if (user.lastActive != null &amp;&amp; user.lastActive &gt; 0) {&#10;            ((now - user.lastActive) / (1000 * 60 * 60 * 24)).toFloat()&#10;        } else 365f&#10;        val lastActiveFeature = (daysSinceLastActive / 365f).coerceIn(0f, 1f)&#10;&#10;        // --- Interests ---&#10;        val interestFeature = FloatArray(allInterests.size) { 0f }&#10;        user.interests.forEach { interest -&gt;&#10;            val index = allInterests.indexOf(interest)&#10;            if (index != -1) interestFeature[index] = 1f&#10;        }&#10;&#10;        // --- Job embedding 8-dim ---&#10;        val jobFeature = user.job?.let { jobEmbeddingMap[it] } ?: FloatArray(8) { 0f }&#10;&#10;        // --- Description embedding ---&#10;        val descriptionFeature = if (!user.description.isNullOrBlank()) {&#10;            textEmbedding(user.description)&#10;        } else {&#10;            FloatArray(384) { 0f }&#10;        }&#10;&#10;        // --- Concat all features ---&#10;        val embedding = floatArrayOf(ageFeature, lastActiveFeature) +&#10;                interestFeature +&#10;                jobFeature +&#10;                descriptionFeature&#10;&#10;        saveEmbeddingToFirestore(user.uid, embedding)&#10;        return embedding&#10;    }&#10;&#10;    // --- Similarity ---&#10;    fun dotProduct(a: FloatArray, b: FloatArray): Float {&#10;        var sum = 0f&#10;        for(i in a.indices) sum += a[i] * b[i]&#10;        return sum&#10;    }&#10;&#10;    fun cosineSimilarity(a: FloatArray, b: FloatArray): Float {&#10;        val dot = dotProduct(a, b)&#10;        val normA = sqrt(a.map { it * it }.sum())&#10;        val normB = sqrt(b.map { it * it }.sum())&#10;        return if (normA &gt; 0 &amp;&amp; normB &gt; 0) dot / (normA * normB) else 0f&#10;    }&#10;&#10;    // --- Compute scores ---&#10;    suspend fun computeScores(&#10;        currentEmbedding: FloatArray,&#10;        users: List&lt;User&gt;,&#10;        useCosine: Boolean = false&#10;    ): List&lt;Pair&lt;User, Float&gt;&gt; = coroutineScope {&#10;        users.map { user -&gt;&#10;            async {&#10;                val embedding = getEmbeddingFromFirestore(user.uid) ?: createEmbedding(user)&#10;                val score = if (useCosine) cosineSimilarity(currentEmbedding, embedding) else dotProduct(currentEmbedding, embedding)&#10;                user to score&#10;            }&#10;        }.map { it.await() }&#10;    }&#10;&#10;    fun sortUsersByScore(scoredUsers: List&lt;Pair&lt;User, Float&gt;&gt;): List&lt;User&gt; {&#10;        return scoredUsers.sortedByDescending { it.second }.map { it.first }&#10;    }&#10;&#10;    // --- Main recommendation ---&#10;    suspend fun getRecommendedUsers(currentUser: User, users: List&lt;User&gt;): List&lt;User&gt; {&#10;        val currentEmbedding = createEmbedding(currentUser)&#10;        val scoredUsers = computeScores(currentEmbedding, users)&#10;&#10;        // chỉ lấy score dương&#10;        val filtered = scoredUsers.filter { it.second &gt; 0f }&#10;            .sortedByDescending { it.second }&#10;&#10;        val batchSize = (filtered.size / 3).coerceAtLeast(1) // tránh chia 0&#10;        val batches = filtered.chunked(batchSize)&#10;&#10;        val shuffledBatches = batches.mapIndexed { index, batch -&gt;&#10;            val shuffled = batch.shuffled()&#10;            android.util.Log.d(&quot;RecommendationRepository&quot;, &quot;Batch $index size: ${shuffled.size}&quot;)&#10;            shuffled.forEach { (user, score) -&gt;&#10;                android.util.Log.d(&quot;RecommendationRepository&quot;, &quot;Batch $index -&gt; User: ${user.uid}, ${user.firstName} ${user.lastName}, Score: $score&quot;)&#10;            }&#10;            shuffled&#10;        }&#10;&#10;        // gộp lại thành danh sách cuối cùng&#10;        return shuffledBatches.flatten().map { it.first }&#10;    }&#10;&#10;&#10;&#10;    // --- Update embedding online khi swipe ---&#10;    fun updateEmbeddingWithFeedback(currentUserId: String, userEmbedding: FloatArray, otherEmbedding: FloatArray, liked: Boolean, learningRate: Float = 0.05f) {&#10;        val sign = if (liked) 1f else -1f&#10;        for(i in userEmbedding.indices) {&#10;            userEmbedding[i] += learningRate * sign * otherEmbedding[i]&#10;        }&#10;        saveEmbeddingToFirestore(currentUserId, userEmbedding)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import android.content.Context&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.utils.DateUtils&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import kotlinx.coroutines.async&#10;import kotlinx.coroutines.coroutineScope&#10;import kotlinx.coroutines.tasks.await&#10;import org.json.JSONObject&#10;import javax.inject.Inject&#10;import kotlin.math.sqrt&#10;&#10;class RecommendationRepository @Inject constructor(&#10;    @ApplicationContext context: Context&#10;) {&#10;&#10;    // --- Config: predefined interests ---&#10;    private val allInterests = listOf(&#10;        &quot;music&quot;, &quot;travel&quot;, &quot;cooking&quot;, &quot;sports&quot;, &quot;reading&quot;,&#10;        &quot;movies&quot;, &quot;art&quot;, &quot;gaming&quot;, &quot;fitness&quot;, &quot;photography&quot;,&#10;        &quot;dancing&quot;, &quot;fashion&quot;, &quot;technology&quot;, &quot;pets&quot;&#10;    )&#10;&#10;    // --- Load job embeddings from JSON asset ---&#10;    private val jobEmbeddingMap: Map&lt;String, FloatArray&gt; = loadJobEmbeddings(context, &quot;job_embeddings_8d.json&quot;)&#10;&#10;    private fun loadJobEmbeddings(context: Context, assetFile: String): Map&lt;String, FloatArray&gt; {&#10;        val jsonStr = context.assets.open(assetFile).bufferedReader().use { it.readText() }&#10;        val json = JSONObject(jsonStr)&#10;        val map = mutableMapOf&lt;String, FloatArray&gt;()&#10;        json.keys().forEach { key -&gt;&#10;            val arr = json.getJSONArray(key)&#10;            val floatArr = FloatArray(arr.length()) { i -&gt; arr.getDouble(i).toFloat() }&#10;            map[key] = floatArr&#10;        }&#10;        return map&#10;    }&#10;&#10;    // --- Placeholder for text embedding model (e.g., SentenceTransformer / TFLite) ---&#10;    private fun textEmbedding(text: String, dim: Int = 384): FloatArray {&#10;        val hash = text.hashCode()&#10;        return FloatArray(dim) { i -&gt; ((hash + i) % 100) / 100f }&#10;    }&#10;&#10;    suspend fun getEmbeddingFromFirestore(userId: String): FloatArray? {&#10;        val db = com.google.firebase.firestore.FirebaseFirestore.getInstance()&#10;        val embeddingDoc = db.collection(&quot;user_embeddings&quot;).document(userId).get().await()&#10;        if (embeddingDoc.exists()) {&#10;            val embeddingMap = embeddingDoc.data ?: emptyMap&lt;String, Any&gt;()&#10;            return FloatArray(embeddingMap.size) { i -&gt;&#10;                (embeddingMap[&quot;dim_$i&quot;] as? Number)?.toFloat() ?: 0f&#10;            }&#10;        }&#10;        return null&#10;    }&#10;&#10;    private fun saveEmbeddingToFirestore(userId: String, userEmbedding: FloatArray) {&#10;        val db = com.google.firebase.firestore.FirebaseFirestore.getInstance()&#10;        val embeddingMap = userEmbedding.mapIndexed { i, v -&gt; &quot;dim_$i&quot; to v }.toMap()&#10;        db.collection(&quot;user_embeddings&quot;).document(userId)&#10;            .set(embeddingMap)&#10;            .addOnSuccessListener {&#10;                android.util.Log.d(&quot;RecommendationRepository&quot;, &quot;Saved embedding for $userId&quot;)&#10;            }&#10;            .addOnFailureListener { e -&gt;&#10;                android.util.Log.e(&quot;RecommendationRepository&quot;, &quot;Failed to save embedding for $userId&quot;, e)&#10;            }&#10;    }&#10;&#10;    fun mergeEmbeddings(base: FloatArray, feedback: FloatArray): FloatArray {&#10;        return FloatArray(base.size) { i -&gt; 0.8f*base[i] + 0.2f*feedback[i] } // weighting tuỳ ý&#10;    }&#10;    &#10;    // --- Create user embedding ---&#10;    suspend fun createEmbedding(user: User): FloatArray {&#10;        // --- Age ---&#10;        val age = DateUtils.calculateAgeFromBirthday(user.birthday) ?: 0&#10;        val ageFeature = ((age - 18) / 42f).coerceIn(0f, 1f)&#10;&#10;&#10;        // --- Last Active ---&#10;        val now = System.currentTimeMillis()&#10;        val daysSinceLastActive = if (user.lastActive != null &amp;&amp; user.lastActive &gt; 0) {&#10;            ((now - user.lastActive) / (1000 * 60 * 60 * 24)).toFloat()&#10;        } else 365f&#10;        val lastActiveFeature = (daysSinceLastActive / 365f).coerceIn(0f, 1f)&#10;&#10;        // --- Interests ---&#10;        val interestFeature = FloatArray(allInterests.size) { 0f }&#10;        user.interests.forEach { interest -&gt;&#10;            val index = allInterests.indexOf(interest)&#10;            if (index != -1) interestFeature[index] = 1f&#10;        }&#10;&#10;        // --- Job embedding 8-dim ---&#10;        val jobFeature = user.job?.let { jobEmbeddingMap[it] } ?: FloatArray(8) { 0f }&#10;&#10;        // --- Description embedding ---&#10;        val descriptionFeature = if (!user.description.isNullOrBlank()) {&#10;            textEmbedding(user.description)&#10;        } else {&#10;            FloatArray(384) { 0f }&#10;        }&#10;&#10;        // --- Concat all features ---&#10;        var embedding = floatArrayOf(ageFeature, lastActiveFeature) +&#10;                interestFeature +&#10;                jobFeature +&#10;                descriptionFeature&#10;&#10;        // Check if embedding already exists, merge if so&#10;        val existingEmbedding = getEmbeddingFromFirestore(user.uid)&#10;        if (existingEmbedding != null &amp;&amp; existingEmbedding.size == embedding.size) {&#10;            embedding = mergeEmbeddings(existingEmbedding, embedding)&#10;        }&#10;&#10;        saveEmbeddingToFirestore(user.uid, embedding)&#10;        return embedding&#10;    }&#10;&#10;    // --- Similarity ---&#10;    fun dotProduct(a: FloatArray, b: FloatArray): Float {&#10;        var sum = 0f&#10;        for(i in a.indices) sum += a[i] * b[i]&#10;        return sum&#10;    }&#10;&#10;    fun cosineSimilarity(a: FloatArray, b: FloatArray): Float {&#10;        val dot = dotProduct(a, b)&#10;        val normA = sqrt(a.map { it * it }.sum())&#10;        val normB = sqrt(b.map { it * it }.sum())&#10;        return if (normA &gt; 0 &amp;&amp; normB &gt; 0) dot / (normA * normB) else 0f&#10;    }&#10;&#10;    // --- Compute scores ---&#10;    suspend fun computeScores(&#10;        currentEmbedding: FloatArray,&#10;        users: List&lt;User&gt;,&#10;        useCosine: Boolean = false&#10;    ): List&lt;Pair&lt;User, Float&gt;&gt; = coroutineScope {&#10;        users.map { user -&gt;&#10;            async {&#10;                val embedding = getEmbeddingFromFirestore(user.uid) ?: createEmbedding(user)&#10;                val score = if (useCosine) cosineSimilarity(currentEmbedding, embedding) else dotProduct(currentEmbedding, embedding)&#10;                user to score&#10;            }&#10;        }.map { it.await() }&#10;    }&#10;&#10;    fun sortUsersByScore(scoredUsers: List&lt;Pair&lt;User, Float&gt;&gt;): List&lt;User&gt; {&#10;        return scoredUsers.sortedByDescending { it.second }.map { it.first }&#10;    }&#10;&#10;    // --- Main recommendation ---&#10;    suspend fun getRecommendedUsers(currentUser: User, users: List&lt;User&gt;): List&lt;User&gt; {&#10;        val currentEmbedding = createEmbedding(currentUser)&#10;        val scoredUsers = computeScores(currentEmbedding, users)&#10;&#10;        // chỉ lấy score dương&#10;        val filtered = scoredUsers.filter { it.second &gt; 0f }&#10;            .sortedByDescending { it.second }&#10;&#10;        val batchSize = (filtered.size / 3).coerceAtLeast(1) // tránh chia 0&#10;        val batches = filtered.chunked(batchSize)&#10;&#10;        val shuffledBatches = batches.mapIndexed { index, batch -&gt;&#10;            val shuffled = batch.shuffled()&#10;            android.util.Log.d(&quot;RecommendationRepository&quot;, &quot;Batch $index size: ${shuffled.size}&quot;)&#10;            shuffled.forEach { (user, score) -&gt;&#10;                android.util.Log.d(&quot;RecommendationRepository&quot;, &quot;Batch $index -&gt; User: ${user.uid}, ${user.firstName} ${user.lastName}, Score: $score&quot;)&#10;            }&#10;            shuffled&#10;        }&#10;&#10;        // gộp lại thành danh sách cuối cùng&#10;        return shuffledBatches.flatten().map { it.first }&#10;    }&#10;&#10;&#10;&#10;    // --- Update embedding online khi swipe ---&#10;    fun updateEmbeddingWithFeedback(currentUserId: String, userEmbedding: FloatArray, otherEmbedding: FloatArray, liked: Boolean, learningRate: Float = 0.05f) {&#10;        val sign = if (liked) 1f else -1f&#10;        for(i in userEmbedding.indices) {&#10;            userEmbedding[i] += learningRate * sign * otherEmbedding[i]&#10;        }&#10;        saveEmbeddingToFirestore(currentUserId, userEmbedding)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepositoryImpl.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;) : UserRepository {&#10;&#10;    fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            offer(snapshot?.toObject(User::class.java))&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    override suspend fun updateUser(user: User) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun saveProfile(&#10;        userId: String,&#10;        firstName: String,&#10;        lastName: String,&#10;        birthday: String?,&#10;        imageUrl: String?&#10;    ): Resource&lt;Unit&gt; {&#10;        return try {&#10;            val userMap = hashMapOf(&#10;                &quot;firstName&quot; to firstName,&#10;                &quot;lastName&quot; to lastName,&#10;                &quot;birthday&quot; to birthday,&#10;                &quot;imageUrl&quot; to imageUrl&#10;            )&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .set(userMap)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateGender(userId: String, gender: String): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;gender&quot;, gender)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateInterests(userId: String, interests: List&lt;String&gt;): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;interests&quot;, interests)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateJobLocationDescription(&#10;        userId: String,&#10;        job: String?,&#10;        location: String?,&#10;        description: String?&#10;    ): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(mapOf(&#10;                    &quot;job&quot; to job,&#10;                    &quot;location&quot; to location,&#10;                    &quot;description&quot; to description&#10;                ))&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;) : UserRepository {&#10;&#10;    override fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            trySend(snapshot?.toObject(User::class.java))&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    override suspend fun updateUser(user: User) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun saveProfile(&#10;        user: User&#10;    ) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun updateGender(uid: String, gender: String) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&quot;gender&quot;, gender).await()&#10;    }&#10;&#10;    override suspend fun updateInterests(uid: String, interests: List&lt;String&gt;) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&quot;interests&quot;, interests).await()&#10;    }&#10;&#10;    override suspend fun updateJobLocationDescription(uid: String, job: String?, location: String?, description: String?) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&#10;            mapOf(&#10;                &quot;job&quot; to job,&#10;                &quot;location&quot; to location,&#10;                &quot;description&quot; to description&#10;            )&#10;        ).await()&#10;    }&#10;&#10;    override suspend fun uploadAvatar(uid: String, uri: android.net.Uri): String {&#10;        // TODO: Implement Firebase Storage upload and return the URL&#10;        return &quot;&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/chat/ChatDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/chat/ChatDetailScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.chat&#10;&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.layout.widthIn&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Send&#10;import androidx.compose.material.icons.filled.Tune&#10;import androidx.compose.material.icons.outlined.Mic&#10;import androidx.compose.material.icons.outlined.Schedule&#10;import androidx.compose.material3.Divider&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.OutlinedTextFieldDefaults&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.DisposableEffect&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import coil.compose.AsyncImage&#10;import com.example.dating.data.model.ChatMessage&#10;import com.example.dating.ui.theme.AppColors&#10;import com.example.dating.viewmodel.ChatViewModel&#10;import com.google.firebase.auth.FirebaseAuth&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;&#10;private val PinkPeer = Color(0xFFFFEEF6)&#10;private val GrayMe = Color(0xFFF2F2F5)&#10;private val Outline = Color(0xFFE7E7EA)&#10;private val Title = Color(0xFF1C1C1E)&#10;private val Subtle = Color(0xFF9A9AA0)&#10;&#10;@Composable&#10;fun ChatDetailScreen(&#10;    conversationId: String,&#10;    navController: NavController,&#10;    viewModel: ChatViewModel&#10;) {&#10;    val peerName by viewModel.peerName.collectAsState(initial = &quot;Grace&quot;)&#10;    val peerAvatar by viewModel.peerAvatar.collectAsState(initial = null)&#10;    val groupedMessages by viewModel.groupedMessages.collectAsState()&#10;    val lastActive by viewModel.lastActive.collectAsState()&#10;    val peerUid by viewModel.peerUid.collectAsState() // &lt;-- Add this line&#10;&#10;    LaunchedEffect(conversationId) {&#10;        viewModel.loadMessages(conversationId)&#10;        viewModel.loadPeer(conversationId)&#10;        //set user as active&#10;        viewModel.setActive(conversationId, true)&#10;    }&#10;    DisposableEffect(conversationId) {&#10;        onDispose {&#10;            // Set user as inactive when leaving the screen&#10;            viewModel.setActive(conversationId, false)&#10;        }&#10;    }&#10;&#10;    // Online detection: consider online if lastActive within 2 minutes&#10;    val isOnline = lastActive?.let { System.currentTimeMillis() - it &lt; 2 * 60 * 1000 } ?: false&#10;&#10;    // đảm bảo thứ tự cũ -&gt; mới, và tự cuộn xuống cuối&#10;    val listState = rememberLazyListState()&#10;    // Flatten groupedMessages to get total message count&#10;    val totalMessages = remember(groupedMessages) { groupedMessages.sumOf { it.messages.size } }&#10;    LaunchedEffect(totalMessages) {&#10;        if (totalMessages &gt; 0) {&#10;            listState.scrollToItem(totalMessages - 1)&#10;        }&#10;    }&#10;&#10;&#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;            .padding(16.dp)&#10;    ) {&#10;        ChatHeaderWhite(&#10;            title = &quot;Messages&quot;,&#10;            name = peerName,&#10;            avatarUrl = peerAvatar,&#10;            online = isOnline,&#10;            navController = navController,&#10;            lastActive = lastActive,&#10;            onBack = { navController.popBackStack() },&#10;            onMore = { /*TODO*/ },&#10;            peerUid = peerUid // &lt;-- Pass peerUid here&#10;        )&#10;&#10;        Spacer(Modifier.height(16.dp))&#10;&#10;        // List&#10;        LazyColumn(&#10;            state = listState,&#10;            modifier = Modifier&#10;                .weight(1f)&#10;                .padding(horizontal = 16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp),&#10;            contentPadding = PaddingValues(top = 8.dp, bottom = 8.dp)&#10;        ) {&#10;            groupedMessages.forEach { dayMessages -&gt;&#10;                item {&#10;                    DayDividerWhite(dayMessages.dayLabel)&#10;                }&#10;                items(dayMessages.messages) { msg -&gt;&#10;                    ChatBubble(&#10;                        msg = msg,&#10;                        meColor = GrayMe,&#10;                        peerColor = PinkPeer&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        ChatInputBarWhite(&#10;            onSend = { text -&gt;&#10;                if (text.isNotBlank()) {&#10;                    viewModel.sendMessage(conversationId, text.trim())&#10;                }&#10;            },&#10;            onSchedule = { /*TODO*/ },&#10;            onVoice = { /*TODO*/ }&#10;        )&#10;    }&#10;}&#10;&#10;/* ---------------- Header ---------------- */&#10;&#10;@Composable&#10;private fun ChatHeaderWhite(&#10;    title: String,&#10;    name: String,&#10;    avatarUrl: String?,&#10;    online: Boolean,&#10;    navController: NavController,&#10;    lastActive: Long? = null,&#10;    onBack: () -&gt; Unit,&#10;    onMore: () -&gt; Unit,&#10;    peerUid: String? = null // &lt;-- Add this parameter&#10;) {&#10;    Column(&#10;        Modifier&#10;            .fillMaxWidth()&#10;            .background(Color.White)&#10;            .padding(top = 8.dp, start = 8.dp, end = 8.dp, bottom = 6.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            RoundIconButton(onClick = onBack, icon = Icons.Default.ArrowBack, tint = AppColors.Text_Pink)&#10;            Text(&#10;                text = title,&#10;                color = Title,&#10;                style = MaterialTheme.typography.headlineMedium.copy(fontWeight = FontWeight.Bold),&#10;                modifier = Modifier.weight(1f),&#10;                textAlign = TextAlign.Center&#10;            )&#10;            RoundIconButton(icon = Icons.Default.Tune, onClick = onMore, tint = AppColors.Text_Pink)&#10;        }&#10;&#10;        Spacer(Modifier.height(6.dp))&#10;&#10;        Row(&#10;            Modifier.padding(horizontal = 8.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            AsyncImage(&#10;                model = avatarUrl ?: &quot;https://i.pravatar.cc/150?u=$name&quot;,&#10;                contentDescription = null,&#10;                modifier = Modifier&#10;                    .size(44.dp)&#10;                    .clip(CircleShape)&#10;                    .clickable {&#10;                        peerUid?.let {&#10;                            navController.navigate(&quot;user_profile2/$it&quot;)&#10;                        }&#10;                    }&#10;            )&#10;            Spacer(Modifier.width(12.dp))&#10;            Column {&#10;                Text(&#10;                    text = name,&#10;                    style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.SemiBold),&#10;                    color = Title&#10;                )&#10;                if (online) {&#10;                    Row(verticalAlignment = Alignment.CenterVertically) {&#10;                        Box(&#10;                            Modifier&#10;                                .size(8.dp)&#10;                                .clip(CircleShape)&#10;                                .background(Color(0xFF58D38C))&#10;                        )&#10;                        Spacer(Modifier.width(6.dp))&#10;                        Text(&quot;Online&quot;, color = Subtle, fontSize = 12.sp)&#10;                    }&#10;                } else if (lastActive != null &amp;&amp; lastActive != 0L) {&#10;                    Text(&#10;                        text = &quot;Last active ${formatTimeAgo(lastActive)}&quot;,&#10;                        color = Subtle,&#10;                        fontSize = 12.sp&#10;                    )&#10;                } else {&#10;                    Text(&#10;                        text = &quot;Last active unknown&quot;,&#10;                        color = Subtle,&#10;                        fontSize = 12.sp&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private fun formatTimeAgo(lastActive: Long?): String {&#10;    if (lastActive == null || lastActive == 0L) return &quot;unknown&quot;&#10;    val now = System.currentTimeMillis()&#10;    val diff = now - lastActive&#10;    return when {&#10;        diff &lt; 60_000 -&gt; &quot;just now&quot;&#10;        diff &lt; 3600_000 -&gt; &quot;${diff / 60_000}m ago&quot;&#10;        diff &lt; 86400_000 -&gt; &quot;${diff / 3600_000}h ago&quot;&#10;        else -&gt; &quot;${diff / 86400_000}d ago&quot;&#10;    }&#10;}&#10;&#10;/* ---------------- Day divider ---------------- */&#10;&#10;@Composable&#10;private fun DayDividerWhite(label: String) {&#10;    Row(&#10;        Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 8.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Divider(Modifier.weight(1f), color = Outline, thickness = 1.dp)&#10;        Text(text = label, color = Subtle, modifier = Modifier.padding(horizontal = 12.dp))&#10;        Divider(Modifier.weight(1f), color = Outline, thickness = 1.dp)&#10;    }&#10;}&#10;&#10;/* ---------------- Bubble ---------------- */&#10;&#10;@Composable&#10;fun ChatBubble(&#10;    msg: ChatMessage,&#10;    meColor: Color,&#10;    peerColor: Color&#10;) {&#10;    val myUid = FirebaseAuth.getInstance().currentUser?.uid&#10;    val isMe = msg.fromUid == myUid&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        horizontalAlignment = if (isMe) Alignment.End else Alignment.Start&#10;    ) {&#10;        Surface(&#10;            color = if (isMe) meColor else peerColor,&#10;            shape = if (isMe)&#10;                RoundedCornerShape(topStart = 18.dp, topEnd = 18.dp, bottomStart = 18.dp, bottomEnd = 8.dp)&#10;            else&#10;                RoundedCornerShape(topStart = 18.dp, topEnd = 18.dp, bottomStart = 8.dp, bottomEnd = 18.dp),&#10;            shadowElevation = 0.dp,&#10;            tonalElevation = 0.dp,&#10;            modifier = Modifier.widthIn(min = 10.dp, max = 280.dp) // Giới hạn độ rộng tối thiểu và tối đa&#10;        ) {&#10;            Text(&#10;                text = msg.text,&#10;                modifier = Modifier.padding(horizontal = 14.dp, vertical = 10.dp),&#10;                color = Color(0xFF1E1E1E)&#10;            )&#10;        }&#10;&#10;        val time = remember(msg.timestamp) {&#10;            SimpleDateFormat(&quot;h:mm a&quot;, Locale.getDefault()).format(msg.timestamp)&#10;        }&#10;        Text(&#10;            text = time,&#10;            fontSize = 12.sp,&#10;            color = Subtle,&#10;            modifier = Modifier&#10;                .padding(horizontal = 6.dp, vertical = 4.dp)&#10;                .align(if (isMe) Alignment.End else Alignment.Start)&#10;        )&#10;    }&#10;}&#10;&#10;/* ---------------- Input bar ---------------- */&#10;&#10;@Composable&#10;private fun ChatInputBarWhite(&#10;    onSend: (String) -&gt; Unit,&#10;    onSchedule: () -&gt; Unit,&#10;    onVoice: () -&gt; Unit&#10;) {&#10;    var text by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Row(&#10;        Modifier&#10;            .fillMaxWidth()&#10;            .background(Color.White)&#10;            .padding(horizontal = 16.dp, vertical = 12.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        OutlinedTextField(&#10;            value = text,&#10;            onValueChange = { text = it },&#10;            placeholder = { Text(&quot;Your message&quot;, color = Subtle) },&#10;            shape = RoundedCornerShape(28.dp),&#10;            colors = OutlinedTextFieldDefaults.colors(&#10;                focusedBorderColor = Outline,&#10;                unfocusedBorderColor = Outline,&#10;                focusedContainerColor = Color.White,&#10;                unfocusedContainerColor = Color.White&#10;            ),&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;        Spacer(Modifier.width(10.dp))&#10;        RoundIconButton(Icons.Outlined.Schedule, onSchedule)&#10;        Spacer(Modifier.width(8.dp))&#10;        RoundIconButton(Icons.Outlined.Mic, onVoice)&#10;        Spacer(Modifier.width(8.dp))&#10;        RoundIconButton(&#10;            icon = Icons.Default.Send,&#10;            onClick = {&#10;                if (text.isNotBlank()) {&#10;                    onSend(text)&#10;                    text = &quot;&quot;&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;/* ---------------- Small helper ---------------- */&#10;&#10;@Composable&#10;private fun RoundIconButton(&#10;    icon: ImageVector,&#10;    onClick: () -&gt; Unit,&#10;    size: Dp = 44.dp,&#10;    tint: Color = AppColors.Text_Pink&#10;) {&#10;    Surface(&#10;        color = Color.White,&#10;        shape = RoundedCornerShape(14.dp),&#10;        border = BorderStroke(1.dp, Outline),&#10;        shadowElevation = 0.dp,&#10;        onClick = onClick&#10;    ) {&#10;        Box(Modifier.size(size), contentAlignment = Alignment.Center) {&#10;            Icon(icon, contentDescription = null, tint = tint)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.chat&#10;&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.layout.widthIn&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Send&#10;import androidx.compose.material.icons.filled.Tune&#10;import androidx.compose.material.icons.outlined.Mic&#10;import androidx.compose.material.icons.outlined.Schedule&#10;import androidx.compose.material3.Divider&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.OutlinedTextFieldDefaults&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.DisposableEffect&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import coil.compose.AsyncImage&#10;import com.example.dating.data.model.ChatMessage&#10;import com.example.dating.ui.theme.AppColors&#10;import com.example.dating.viewmodel.ChatViewModel&#10;import com.google.firebase.auth.FirebaseAuth&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;&#10;private val PinkPeer = Color(0xFFFFEEF6)&#10;private val GrayMe = Color(0xFFF2F2F5)&#10;private val Outline = Color(0xFFE7E7EA)&#10;private val Title = Color(0xFF1C1C1E)&#10;private val Subtle = Color(0xFF9A9AA0)&#10;&#10;@Composable&#10;fun ChatDetailScreen(&#10;    conversationId: String,&#10;    navController: NavController,&#10;    viewModel: ChatViewModel&#10;) {&#10;    val peerName by viewModel.peerName.collectAsState(initial = &quot;Grace&quot;)&#10;    val peerAvatar by viewModel.peerAvatar.collectAsState(initial = null)&#10;    val groupedMessages by viewModel.groupedMessages.collectAsState()&#10;    val lastActive by viewModel.lastActive.collectAsState()&#10;    val peerUid by viewModel.peerUid.collectAsState() // &lt;-- Add this line&#10;&#10;    LaunchedEffect(conversationId) {&#10;        viewModel.loadMessages(conversationId)&#10;        viewModel.loadPeer(conversationId)&#10;        //set user as active&#10;        viewModel.setActive(conversationId, true)&#10;    }&#10;    DisposableEffect(conversationId) {&#10;        onDispose {&#10;            // Set user as inactive when leaving the screen&#10;            viewModel.setActive(conversationId, false)&#10;        }&#10;    }&#10;&#10;    // Online detection: consider online if lastActive within 2 minutes&#10;    val isOnline = lastActive?.let { System.currentTimeMillis() - it &lt; 2 * 60 * 1000 } ?: false&#10;&#10;    // đảm bảo thứ tự cũ -&gt; mới, và tự cuộn xuống cuối&#10;    val listState = rememberLazyListState()&#10;    // Flatten groupedMessages to get total message count&#10;    val totalMessages = remember(groupedMessages) { groupedMessages.sumOf { it.messages.size } }&#10;    LaunchedEffect(totalMessages) {&#10;        if (totalMessages &gt; 0) {&#10;            listState.scrollToItem(totalMessages - 1)&#10;        }&#10;    }&#10;&#10;&#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;            .padding(16.dp)&#10;    ) {&#10;        ChatHeaderWhite(&#10;            title = &quot;Messages&quot;,&#10;            name = peerName,&#10;            avatarUrl = peerAvatar,&#10;            online = isOnline,&#10;            navController = navController,&#10;            lastActive = lastActive,&#10;            onBack = { navController.popBackStack() },&#10;            onMore = { /*TODO*/ },&#10;            peerUid = peerUid // &lt;-- Pass peerUid here&#10;        )&#10;&#10;        Spacer(Modifier.height(16.dp))&#10;&#10;        // List&#10;        LazyColumn(&#10;            state = listState,&#10;            modifier = Modifier&#10;                .weight(1f)&#10;                .padding(horizontal = 16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp),&#10;            contentPadding = PaddingValues(top = 8.dp, bottom = 8.dp)&#10;        ) {&#10;            groupedMessages.forEach { dayMessages -&gt;&#10;                item {&#10;                    DayDividerWhite(dayMessages.dayLabel)&#10;                }&#10;                items(dayMessages.messages) { msg -&gt;&#10;                    ChatBubble(&#10;                        msg = msg,&#10;                        meColor = GrayMe,&#10;                        peerColor = PinkPeer&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        ChatInputBarWhite(&#10;            onSend = { text -&gt;&#10;                if (text.isNotBlank()) {&#10;                    viewModel.sendMessage(conversationId, text.trim())&#10;                }&#10;            },&#10;            onSchedule = { /*TODO*/ },&#10;            onVoice = { /*TODO*/ }&#10;        )&#10;    }&#10;}&#10;&#10;/* ---------------- Header ---------------- */&#10;&#10;@Composable&#10;private fun ChatHeaderWhite(&#10;    title: String,&#10;    name: String,&#10;    avatarUrl: String?,&#10;    online: Boolean,&#10;    navController: NavController,&#10;    lastActive: Long? = null,&#10;    onBack: () -&gt; Unit,&#10;    onMore: () -&gt; Unit,&#10;    peerUid: String? = null // &lt;-- Add this parameter&#10;) {&#10;    Column(&#10;        Modifier&#10;            .fillMaxWidth()&#10;            .background(Color.White)&#10;            .padding(top = 8.dp, start = 8.dp, end = 8.dp, bottom = 6.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            RoundIconButton(onClick = onBack, icon = Icons.Default.ArrowBack, tint = AppColors.Text_Pink)&#10;            Text(&#10;                text = title,&#10;                color = Title,&#10;                style = MaterialTheme.typography.headlineMedium.copy(fontWeight = FontWeight.Bold),&#10;                modifier = Modifier.weight(1f),&#10;                textAlign = TextAlign.Center&#10;            )&#10;            RoundIconButton(icon = Icons.Default.Tune, onClick = onMore, tint = AppColors.Text_Pink)&#10;        }&#10;&#10;        Spacer(Modifier.height(6.dp))&#10;&#10;        Row(&#10;            Modifier.padding(horizontal = 8.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            AsyncImage(&#10;                model = avatarUrl ?: &quot;https://i.pravatar.cc/150?u=$name&quot;,&#10;                contentDescription = null,&#10;                modifier = Modifier&#10;                    .size(44.dp)&#10;                    .clip(CircleShape)&#10;                    .clickable {&#10;                        peerUid?.let {&#10;                            navController.navigate(&quot;user_profile2/$it&quot;)&#10;                        }&#10;                    }&#10;            )&#10;            Spacer(Modifier.width(12.dp))&#10;            Column {&#10;                Text(&#10;                    text = name,&#10;                    style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.SemiBold),&#10;                    color = Title&#10;                )&#10;                if (online) {&#10;                    Row(verticalAlignment = Alignment.CenterVertically) {&#10;                        Box(&#10;                            Modifier&#10;                                .size(8.dp)&#10;                                .clip(CircleShape)&#10;                                .background(Color(0xFF58D38C))&#10;                        )&#10;                        Spacer(Modifier.width(6.dp))&#10;                        Text(&quot;Online&quot;, color = Subtle, fontSize = 12.sp)&#10;                    }&#10;                } else if (lastActive != null &amp;&amp; lastActive != 0L) {&#10;                    Text(&#10;                        text = &quot;Last active ${formatTimeAgo(lastActive)}&quot;,&#10;                        color = Subtle,&#10;                        fontSize = 12.sp&#10;                    )&#10;                } else {&#10;                    Text(&#10;                        text = &quot;Last active unknown&quot;,&#10;                        color = Subtle,&#10;                        fontSize = 12.sp&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private fun formatTimeAgo(lastActive: Long?): String {&#10;    if (lastActive == null || lastActive == 0L) return &quot;unknown&quot;&#10;    val now = System.currentTimeMillis()&#10;    val diff = now - lastActive&#10;    return when {&#10;        diff &lt; 60_000 -&gt; &quot;just now&quot;&#10;        diff &lt; 3600_000 -&gt; &quot;${diff / 60_000}m ago&quot;&#10;        diff &lt; 86400_000 -&gt; &quot;${diff / 3600_000}h ago&quot;&#10;        else -&gt; &quot;${diff / 86400_000}d ago&quot;&#10;    }&#10;}&#10;&#10;/* ---------------- Day divider ---------------- */&#10;&#10;@Composable&#10;private fun DayDividerWhite(label: String) {&#10;    Row(&#10;        Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 8.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Divider(Modifier.weight(1f), color = Outline, thickness = 1.dp)&#10;        Text(text = label, color = Subtle, modifier = Modifier.padding(horizontal = 12.dp))&#10;        Divider(Modifier.weight(1f), color = Outline, thickness = 1.dp)&#10;    }&#10;}&#10;&#10;/* ---------------- Bubble ---------------- */&#10;&#10;@Composable&#10;fun ChatBubble(&#10;    msg: ChatMessage,&#10;    meColor: Color,&#10;    peerColor: Color&#10;) {&#10;    val myUid = FirebaseAuth.getInstance().currentUser?.uid&#10;    val isMe = msg.fromUid == myUid&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        horizontalAlignment = if (isMe) Alignment.End else Alignment.Start&#10;    ) {&#10;        Surface(&#10;            color = if (isMe) meColor else peerColor,&#10;            shape = if (isMe)&#10;                RoundedCornerShape(topStart = 18.dp, topEnd = 18.dp, bottomStart = 18.dp, bottomEnd = 8.dp)&#10;            else&#10;                RoundedCornerShape(topStart = 18.dp, topEnd = 18.dp, bottomStart = 8.dp, bottomEnd = 18.dp),&#10;            shadowElevation = 0.dp,&#10;            tonalElevation = 0.dp,&#10;            modifier = Modifier.widthIn(min = 10.dp, max = 280.dp) // Giới hạn độ rộng tối thiểu và tối đa&#10;        ) {&#10;            Text(&#10;                text = msg.text,&#10;                modifier = Modifier.padding(horizontal = 14.dp, vertical = 10.dp),&#10;                color = Color(0xFF1E1E1E)&#10;            )&#10;        }&#10;&#10;        val time = remember(msg.timestamp) {&#10;            SimpleDateFormat(&quot;h:mm a&quot;, Locale.getDefault()).format(msg.timestamp)&#10;        }&#10;        Text(&#10;            text = time,&#10;            fontSize = 12.sp,&#10;            color = Subtle,&#10;            modifier = Modifier&#10;                .padding(horizontal = 6.dp, vertical = 4.dp)&#10;                .align(if (isMe) Alignment.End else Alignment.Start)&#10;        )&#10;    }&#10;}&#10;&#10;/* ---------------- Input bar ---------------- */&#10;&#10;@Composable&#10;private fun ChatInputBarWhite(&#10;    onSend: (String) -&gt; Unit,&#10;    onSchedule: () -&gt; Unit,&#10;    onVoice: () -&gt; Unit&#10;) {&#10;    var text by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Row(&#10;        Modifier&#10;            .fillMaxWidth()&#10;            .background(Color.White)&#10;            .padding(horizontal = 16.dp, vertical = 12.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        OutlinedTextField(&#10;            value = text,&#10;            onValueChange = { text = it },&#10;            placeholder = { Text(&quot;Your message&quot;, color = Subtle) },&#10;            shape = RoundedCornerShape(28.dp),&#10;            colors = OutlinedTextFieldDefaults.colors(&#10;                focusedBorderColor = Outline,&#10;                unfocusedBorderColor = Outline,&#10;                focusedContainerColor = Color.White,&#10;                unfocusedContainerColor = Color.White&#10;            ),&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;        Spacer(Modifier.width(10.dp))&#10;        RoundIconButton(Icons.Outlined.Schedule, onSchedule)&#10;        Spacer(Modifier.width(8.dp))&#10;        RoundIconButton(Icons.Outlined.Mic, onVoice)&#10;        Spacer(Modifier.width(8.dp))&#10;        RoundIconButton(&#10;            icon = Icons.Default.Send,&#10;            onClick = {&#10;                if (text.isNotBlank()) {&#10;                    onSend(text)&#10;                    text = &quot;&quot;&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;/* ---------------- Small helper ---------------- */&#10;&#10;@Composable&#10;private fun RoundIconButton(&#10;    icon: ImageVector,&#10;    onClick: () -&gt; Unit,&#10;    size: Dp = 44.dp,&#10;    tint: Color = AppColors.Text_Pink&#10;) {&#10;    Surface(&#10;        color = Color.White,&#10;        shape = RoundedCornerShape(14.dp),&#10;        border = BorderStroke(1.dp, Outline),&#10;        shadowElevation = 0.dp,&#10;        onClick = onClick&#10;    ) {&#10;        Box(Modifier.size(size), contentAlignment = Alignment.Center) {&#10;            Icon(icon, contentDescription = null, tint = tint)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/FilterDialog.kt.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/FilterDialog.kt.kt" />
              <option name="originalContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FilterScreen(navController: NavController) {&#10;    // State variables&#10;    var selectedInterest by remember { mutableStateOf(&quot;Girls&quot;) }&#10;    var location by remember { mutableStateOf(&quot;Chicago, USA&quot;) }&#10;    var distance by remember { mutableFloatStateOf(40f) }&#10;    var ageRange by remember { mutableStateOf(20f..28f) }&#10;&#10;    // Bottom sheet or dialog content&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .wrapContentHeight()&#10;            .clip(RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp))&#10;            .background(Color.White)&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        // Notch&#10;        Box(&#10;            modifier = Modifier&#10;                .width(40.dp)&#10;                .height(4.dp)&#10;                .background(Color.Gray.copy(alpha = 0.5f), CircleShape)&#10;                .align(Alignment.CenterHorizontally)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Title and Clear&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Filters&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.Black&#10;            )&#10;            TextButton(onClick = { /* TODO: Clear filters */ }) {&#10;                Text(&#10;                    text = &quot;Clear&quot;,&#10;                    color = Color(0xFFFF69B4), // Pink&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Interested in&#10;        Text(&#10;            text = &quot;Interested in&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        SegmentedButtonRow(modifier = Modifier.fillMaxWidth()) {&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Girls&quot;,&#10;                onClick = { selectedInterest = &quot;Girls&quot; },&#10;                shape = RoundedCornerShape(topStart = 8.dp, bottomStart = 8.dp)&#10;            ) {&#10;                Text(&quot;Girls&quot;)&#10;            }&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Boys&quot;,&#10;                onClick = { selectedInterest = &quot;Boys&quot; },&#10;                shape = RoundedCornerShape(0.dp)&#10;            ) {&#10;                Text(&quot;Boys&quot;)&#10;            }&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Both&quot;,&#10;                onClick = { selectedInterest = &quot;Both&quot; },&#10;                shape = RoundedCornerShape(topEnd = 8.dp, bottomEnd = 8.dp)&#10;            ) {&#10;                Text(&quot;Both&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Location&#10;        Text(&#10;            text = &quot;Location&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        OutlinedTextField(&#10;            value = location,&#10;            onValueChange = { /* Read-only, tap to select */ },&#10;            readOnly = true,&#10;            modifier = Modifier.fillMaxWidth(),&#10;            trailingIcon = {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowForward,&#10;                    contentDescription = &quot;Select location&quot;,&#10;                    tint = Color(0xFFFF0000) // Red&#10;                )&#10;            },&#10;            singleLine = true,&#10;            interactionSource = remember { MutableInteractionSource() }.also { interactionSource -&gt;&#10;                // TODO: Handle click to open location selector&#10;            }&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Distance&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;Distance&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;            Text(&#10;                text = &quot;${distance.toInt()}km&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;        Slider(&#10;            value = distance,&#10;            onValueChange = { distance = it },&#10;            valueRange = 0f..100f, // Assuming max 100km&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = SliderDefaults.colors(&#10;                thumbColor = Color(0xFFBB86FC), // Purple&#10;                activeTrackColor = Color(0xFFBB86FC),&#10;                inactiveTrackColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Age&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;Age&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;            Text(&#10;                text = &quot;${ageRange.start.toInt()}-${ageRange.endInclusive.toInt()}&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;        RangeSlider(&#10;            value = ageRange,&#10;            onValueChange = { ageRange = it },&#10;            valueRange = 18f..100f, // Assuming age range&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = SliderDefaults.colors(&#10;                thumbColor = Color(0xFFBB86FC), // Purple&#10;                activeTrackColor = Color(0xFFBB86FC),&#10;                inactiveTrackColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // Continue button&#10;        Button(&#10;            onClick = { /* TODO: Apply filters and navigate */ },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(48.dp),&#10;            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFBB86FC).copy(alpha = 0.2f)), // Light purple&#10;            shape = RoundedCornerShape(24.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Continue&quot;,&#10;                color = Color.Black,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FilterDialog(&#10;    show: Boolean,&#10;    onDismiss: () -&gt; Unit,&#10;    onApply: (selectedInterest: String, location: String, distance: Float, ageRange: ClosedFloatingPointRange&lt;Float&gt;) -&gt; Unit&#10;) {&#10;    if (!show) return&#10;    var selectedInterest by remember { mutableStateOf(&quot;Girls&quot;) }&#10;    var location by remember { mutableStateOf(&quot;Chicago, USA&quot;) }&#10;    var distance by remember { mutableStateOf(40f) }&#10;    var ageRange by remember { mutableStateOf(20f..28f) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    onApply(selectedInterest, location, distance, ageRange)&#10;                    onDismiss()&#10;                },&#10;                modifier = Modifier.fillMaxWidth().height(48.dp),&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFBB86FC).copy(alpha = 0.2f)),&#10;                shape = RoundedCornerShape(24.dp)&#10;            ) {&#10;                Text(&quot;Continue&quot;, color = Color.Black, fontSize = 16.sp, fontWeight = FontWeight.Bold)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;, color = Color.Gray)&#10;            }&#10;        },&#10;        title = {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&quot;Filters&quot;, fontSize = 20.sp, fontWeight = FontWeight.Bold, color = Color.Black)&#10;                TextButton(onClick = {&#10;                    selectedInterest = &quot;Girls&quot;&#10;                    location = &quot;Chicago, USA&quot;&#10;                    distance = 40f&#10;                    ageRange = 20f..28f&#10;                }) {&#10;                    Text(&quot;Clear&quot;, color = Color(0xFFFF69B4), fontSize = 16.sp)&#10;                }&#10;            }&#10;        },&#10;        text = {&#10;            Column(modifier = Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {&#10;                // Interested in&#10;                Text(&quot;Interested in&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.Center) {&#10;                    FilterSegmentButton(&quot;Girls&quot;, selectedInterest == &quot;Girls&quot;) { selectedInterest = &quot;Girls&quot; }&#10;                    FilterSegmentButton(&quot;Boys&quot;, selectedInterest == &quot;Boys&quot;) { selectedInterest = &quot;Boys&quot; }&#10;                    FilterSegmentButton(&quot;Both&quot;, selectedInterest == &quot;Both&quot;) { selectedInterest = &quot;Both&quot; }&#10;                }&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Location&#10;                Text(&quot;Location&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                OutlinedTextField(&#10;                    value = location,&#10;                    onValueChange = { location = it },&#10;                    readOnly = false,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    trailingIcon = {&#10;                        Icon(imageVector = Icons.Default.ArrowForward, contentDescription = &quot;Select location&quot;, tint = Color(0xFFFF0000))&#10;                    },&#10;                    singleLine = true&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Distance&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Distance&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${distance.toInt()}km&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                Slider(&#10;                    value = distance,&#10;                    onValueChange = { distance = it },&#10;                    valueRange = 0f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = Color(0xFFBB86FC),&#10;                        activeTrackColor = Color(0xFFBB86FC),&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Age&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Age&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${ageRange.start.toInt()}-${ageRange.endInclusive.toInt()}&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                RangeSlider(&#10;                    value = ageRange,&#10;                    onValueChange = { ageRange = it },&#10;                    valueRange = 18f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = Color(0xFFBB86FC),&#10;                        activeTrackColor = Color(0xFFBB86FC),&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;            }&#10;        },&#10;        shape = RoundedCornerShape(24.dp),&#10;        containerColor = Color.White&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun FilterSegmentButton(text: String, selected: Boolean, onClick: () -&gt; Unit) {&#10;    Button(&#10;        onClick = onClick,&#10;        colors = ButtonDefaults.buttonColors(&#10;            containerColor = if (selected) Color(0xFFBB86FC) else Color.LightGray,&#10;            contentColor = if (selected) Color.White else Color.Black&#10;        ),&#10;        modifier = Modifier&#10;            .weight(1f)&#10;            .height(36.dp)&#10;            .padding(horizontal = 2.dp),&#10;        shape = RoundedCornerShape(8.dp)&#10;    ) {&#10;        Text(text)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/ProfileCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/ProfileCard.kt" />
              <option name="originalContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.snapshots.SnapshotStateList&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.example.dating.data.model.Interest&#10;import com.example.dating.ui.theme.AppColors&#10;&#10;@Composable&#10;fun ProfileCard(&#10;    isEditMode: Boolean,&#10;    onEditToggle: () -&gt; Unit,&#10;    isSaving: Boolean,&#10;    saveError: String?,&#10;    editableFirstName: String,&#10;    editableLastName: String,&#10;    editableBirthday: String,&#10;    editableGender: String,&#10;    editableJob: String,&#10;    editableLocation: String,&#10;    editableDescription: String,&#10;    selectedInterests: SnapshotStateList&lt;String&gt;,&#10;    allInterests: List&lt;Interest&gt;,&#10;    onFirstNameChange: (String) -&gt; Unit,&#10;    onLastNameChange: (String) -&gt; Unit,&#10;    onBirthdayClick: () -&gt; Unit,&#10;    onGenderChange: (String) -&gt; Unit,&#10;    onJobChange: (String) -&gt; Unit,&#10;    onLocationChange: (String) -&gt; Unit,&#10;    onDescriptionChange: (String) -&gt; Unit,&#10;    isEditModeChange: (Boolean) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp, vertical = 16.dp),&#10;        shape = MaterialTheme.shapes.large,&#10;        elevation = CardDefaults.cardElevation(8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                TextButton(onClick = onEditToggle) {&#10;                    Text(&#10;                        text = if (isEditMode) &quot;Done&quot; else &quot;Edit&quot;,&#10;                        color = AppColors.Text_Pink,&#10;                        fontWeight = androidx.compose.ui.text.font.FontWeight.Bold&#10;                    )&#10;                }&#10;            }&#10;            if (isSaving) {&#10;                CircularProgressIndicator(modifier = Modifier.padding(vertical = 8.dp))&#10;            }&#10;            if (saveError != null) {&#10;                Text(&#10;                    text = saveError,&#10;                    color = androidx.compose.ui.graphics.Color.Red,&#10;                    modifier = Modifier.padding(vertical = 8.dp)&#10;                )&#10;            }&#10;            NameFields(&#10;                firstName = editableFirstName,&#10;                lastName = editableLastName,&#10;                isEditMode = isEditMode,&#10;                onFirstNameChange = onFirstNameChange,&#10;                onLastNameChange = onLastNameChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            BirthdayGenderFields(&#10;                birthday = editableBirthday,&#10;                gender = editableGender,&#10;                isEditMode = isEditMode,&#10;                showCalendar = false,&#10;                onShowCalendar = onBirthdayClick,&#10;                onGenderChange = onGenderChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            JobDropdown(&#10;                job = editableJob,&#10;                isEditMode = isEditMode,&#10;                onJobChange = onJobChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            LocationField(&#10;                location = editableLocation,&#10;                isEditMode = isEditMode,&#10;                onLocationChange = onLocationChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            DescriptionField(&#10;                description = editableDescription,&#10;                isEditMode = isEditMode,&#10;                onDescriptionChange = onDescriptionChange&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Interests&quot;,&#10;                fontSize = androidx.compose.ui.unit.sp(20),&#10;                color = AppColors.Text_Pink,&#10;                fontWeight = androidx.compose.ui.text.font.FontWeight.Bold,&#10;                modifier = Modifier&#10;                    .padding(bottom = 8.dp)&#10;                    .fillMaxWidth(),&#10;                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;            )&#10;            InterestsSection(&#10;                allInterests = allInterests,&#10;                selectedInterests = selectedInterests,&#10;                isEditMode = isEditMode&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.snapshots.SnapshotStateList&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.example.dating.data.model.Interest&#10;import com.example.dating.ui.theme.AppColors&#10;&#10;// Add missing imports for field components&#10;import com.example.dating.ui.components.NameFields&#10;import com.example.dating.ui.components.BirthdayGenderFields&#10;import com.example.dating.ui.components.JobDropdown&#10;import com.example.dating.ui.components.LocationField&#10;import com.example.dating.ui.components.DescriptionField&#10;import com.example.dating.ui.components.InterestsSection&#10;&#10;@Composable&#10;fun ProfileCard(&#10;    isEditMode: Boolean,&#10;    onEditToggle: () -&gt; Unit,&#10;    isSaving: Boolean,&#10;    saveError: String?,&#10;    editableFirstName: String,&#10;    editableLastName: String,&#10;    editableBirthday: String,&#10;    editableGender: String,&#10;    editableJob: String,&#10;    editableLocation: String,&#10;    editableDescription: String,&#10;    selectedInterests: SnapshotStateList&lt;String&gt;,&#10;    allInterests: List&lt;Interest&gt;,&#10;    onFirstNameChange: (String) -&gt; Unit,&#10;    onLastNameChange: (String) -&gt; Unit,&#10;    onBirthdayClick: () -&gt; Unit,&#10;    onGenderChange: (String) -&gt; Unit,&#10;    onJobChange: (String) -&gt; Unit,&#10;    onLocationChange: (String) -&gt; Unit,&#10;    onDescriptionChange: (String) -&gt; Unit,&#10;    isEditModeChange: (Boolean) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp, vertical = 16.dp),&#10;        shape = MaterialTheme.shapes.large,&#10;        elevation = CardDefaults.cardElevation(8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                TextButton(onClick = onEditToggle) {&#10;                    Text(&#10;                        text = if (isEditMode) &quot;Done&quot; else &quot;Edit&quot;,&#10;                        color = AppColors.Text_Pink,&#10;                        fontWeight = androidx.compose.ui.text.font.FontWeight.Bold&#10;                    )&#10;                }&#10;            }&#10;            if (isSaving) {&#10;                CircularProgressIndicator(modifier = Modifier.padding(vertical = 8.dp))&#10;            }&#10;            if (saveError != null) {&#10;                Text(&#10;                    text = saveError,&#10;                    color = androidx.compose.ui.graphics.Color.Red,&#10;                    modifier = Modifier.padding(vertical = 8.dp)&#10;                )&#10;            }&#10;            NameFields(&#10;                firstName = editableFirstName,&#10;                lastName = editableLastName,&#10;                isEditMode = isEditMode,&#10;                onFirstNameChange = onFirstNameChange,&#10;                onLastNameChange = onLastNameChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            BirthdayGenderFields(&#10;                birthday = editableBirthday,&#10;                gender = editableGender,&#10;                isEditMode = isEditMode,&#10;                showCalendar = false,&#10;                onShowCalendar = onBirthdayClick,&#10;                onGenderChange = onGenderChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            JobDropdown(&#10;                job = editableJob,&#10;                isEditMode = isEditMode,&#10;                onJobChange = onJobChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            LocationField(&#10;                location = editableLocation,&#10;                isEditMode = isEditMode,&#10;                onLocationChange = onLocationChange&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            DescriptionField(&#10;                description = editableDescription,&#10;                isEditMode = isEditMode,&#10;                onDescriptionChange = onDescriptionChange&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Interests&quot;,&#10;                fontSize = androidx.compose.ui.unit.sp(20),&#10;                color = AppColors.Text_Pink,&#10;                fontWeight = androidx.compose.ui.text.font.FontWeight.Bold,&#10;                modifier = Modifier&#10;                    .padding(bottom = 8.dp)&#10;                    .fillMaxWidth(),&#10;                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;            )&#10;            InterestsSection(&#10;                allInterests = allInterests,&#10;                selectedInterests = selectedInterests,&#10;                isEditMode = isEditMode&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class HomeViewModel : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val _addFavoriteState = MutableStateFlow&lt;Result&lt;Unit&gt;?&gt;(null)&#10;    val addFavoriteState: StateFlow&lt;Result&lt;Unit&gt;?&gt; = _addFavoriteState&#10;&#10;    fun addFavorite(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        val favorite = hashMapOf(&#10;            &quot;likerId&quot; to likerId,&#10;            &quot;likedId&quot; to likedId,&#10;            &quot;timestamp&quot; to Timestamp.now()&#10;        )&#10;        viewModelScope.launch {&#10;            try {&#10;                db.collection(&quot;favorites&quot;).add(favorite)&#10;                _addFavoriteState.value = Result.success(Unit)&#10;            } catch (e: Exception) {&#10;                _addFavoriteState.value = Result.failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearAddFavoriteState() {&#10;        _addFavoriteState.value = null&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>