<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/FavoriteScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/FavoriteScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material.icons.filled.ViewModule&#10;import androidx.compose.material.icons.filled.Chat&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.viewmodel.FavoriteViewModel&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.navigation.NavController&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;&#10;@Composable&#10;fun FavoriteScreen(navController: NavController) {&#10;    val favoriteViewModel: FavoriteViewModel = viewModel()&#10;    val likedMeProfiles by favoriteViewModel.likedMeProfiles.collectAsState()&#10;    val isLoading by favoriteViewModel.isLoading.collectAsState()&#10;    val errorMessage by favoriteViewModel.errorMessage.collectAsState()&#10;&#10;    LaunchedEffect(Unit) {&#10;        favoriteViewModel.fetchFavorites()&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(AppColors.MainBackground)&#10;            .verticalScroll(rememberScrollState())&#10;    ) {&#10;        FavoriteHeader(navController)&#10;        Text(&quot;Favorites&quot;, fontWeight = FontWeight.Bold, fontSize = 28.sp, modifier = Modifier.padding(16.dp))&#10;        if (isLoading) {&#10;            Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                CircularProgressIndicator()&#10;            }&#10;        } else if (errorMessage != null) {&#10;            Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                Text(&quot;Error: $errorMessage&quot;, color = Color.Red)&#10;            }&#10;        } else {&#10;            Text(&quot;Users who liked you&quot;, fontWeight = FontWeight.Bold, fontSize = 20.sp, modifier = Modifier.padding(8.dp))&#10;            ProfileGrid(&#10;                profiles = likedMeProfiles,&#10;                navController = navController,&#10;                showDelete = false,&#10;                moreAvailable = likedMeProfiles.size &gt;= 9,&#10;                onMoreClick = { /* TODO: Show all likedMeProfiles */ }&#10;            )&#10;        }&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth(),&#10;            contentAlignment = Alignment.BottomCenter&#10;        ) {&#10;            FavoriteBottomNavigationBar(navController)&#10;        }&#10;    }&#10;&#10;}&#10;&#10;@Composable&#10;fun FavoriteHeader(navController: NavController) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(start = 48.dp, end = 48.dp, top = 40.dp, bottom = 30.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;&#10;        Text(&#10;            text = &quot;Matches&quot;,&#10;            color = Color.Black,&#10;            fontWeight = FontWeight.Bold,&#10;            fontSize = 24.sp&#10;        )&#10;&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileGrid(&#10;    profiles: List&lt;Map&lt;String, Any&gt;&gt;,&#10;    navController: NavController,&#10;    showDelete: Boolean,&#10;    moreAvailable: Boolean,&#10;    onDelete: ((Map&lt;String, Any&gt;) -&gt; Unit)? = null,&#10;    onMoreClick: () -&gt; Unit&#10;) {&#10;    var showAll by remember { mutableStateOf(false) }&#10;    val profilesToShow = if (showAll) profiles else profiles.take(6)&#10;    val rowCount = if (showAll) (profilesToShow.size + 1) / 2 else 3&#10;    Column {&#10;        for (row in 0 until rowCount) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp),&#10;            ) {&#10;                for (col in 0 until 2) {&#10;                    val idx = row * 2 + col&#10;                    val profile = profilesToShow.getOrNull(idx)&#10;                    if (profile != null) {&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .padding(8.dp)&#10;                                .weight(1f)&#10;                                .height(220.dp)&#10;                                .clip(RoundedCornerShape(24.dp))&#10;                                .background(Color(0xFF23222B))&#10;                                .clickable {&#10;                                    navController.navigate(&quot;profile_display/${profile[&quot;uid&quot;]}&quot;)&#10;                                }&#10;                        ) {&#10;                            // Profile image placeholder&#10;                            Image(&#10;                                imageVector = Icons.Default.Person,&#10;                                contentDescription = &quot;Profile&quot;,&#10;                                modifier = Modifier&#10;                                    .size(80.dp)&#10;                                    .align(Alignment.TopCenter)&#10;                                    .clip(CircleShape)&#10;                                    .background(Color.Gray)&#10;                            )&#10;                            // Name, Age, Description&#10;                            val firstName = profile[&quot;firstName&quot;] as? String ?: &quot;&quot;&#10;                            val lastName = profile[&quot;lastName&quot;] as? String ?: &quot;&quot;&#10;                            val name = (firstName + &quot; &quot; + lastName).trim().ifEmpty { &quot;Unknown&quot; }&#10;                            val birthday = profile[&quot;birthday&quot;] as? String&#10;                            val age = birthday?.let {&#10;                                try {&#10;                                    val year = it.split(&quot;/&quot;).getOrNull(2)?.toInt() ?: throw Exception(&quot;Invalid date&quot;)&#10;                                    val currentYear = java.util.Calendar.getInstance().get(java.util.Calendar.YEAR)&#10;                                    (currentYear - year).toString()&#10;                                } catch (e: Exception) { &quot;?&quot; }&#10;                            } ?: &quot;?&quot;&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .align(Alignment.BottomCenter)&#10;                                    .fillMaxWidth()&#10;                                    .background(Color.White.copy(alpha = 0.85f), RoundedCornerShape(bottomStart = 24.dp, bottomEnd = 24.dp))&#10;                                    .padding(8.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                Text(&quot;$name, $age&quot;, fontWeight = FontWeight.Bold, fontSize = 16.sp, color = Color.Black, maxLines = 1)&#10;                            }&#10;                            if (showDelete &amp;&amp; onDelete != null) {&#10;                                IconButton(onClick = { onDelete(profile) }, modifier = Modifier.align(Alignment.TopEnd)) {&#10;                                    Icon(Icons.Default.Close, contentDescription = &quot;Delete&quot;, tint = Color.Red)&#10;                                }&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Spacer(modifier = Modifier.weight(1f))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        if (!showAll &amp;&amp; moreAvailable) {&#10;            Button(onClick = { showAll = true }, modifier = Modifier.align(Alignment.CenterHorizontally).padding(8.dp)) {&#10;                Text(&quot;More&quot;)&#10;            }&#10;        }&#10;        if (showAll &amp;&amp; profiles.size &gt; 6) {&#10;            Button(onClick = { showAll = false }, modifier = Modifier.align(Alignment.CenterHorizontally).padding(8.dp)) {&#10;                Text(&quot;Show Less&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FavoriteBottomNavigationBar(navController: NavController) {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(103.dp)&#10;            .background(Color.White.copy(alpha = 1.0f)),&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 32.dp, vertical = 20.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            BottomNavIcon(&#10;                icon = Icons.Default.ViewModule,&#10;                isActive = false&#10;            ) { navController.navigate(&quot;home&quot;) }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Favorite,&#10;                isActive = true&#10;            ) { /* Already on favorite */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Chat,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Person,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material.icons.filled.ViewModule&#10;import androidx.compose.material.icons.filled.Chat&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.viewmodel.FavoriteViewModel&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.navigation.NavController&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;&#10;@Composable&#10;fun FavoriteScreen(navController: NavController) {&#10;    val favoriteViewModel: FavoriteViewModel = viewModel()&#10;    val likedMeProfiles by favoriteViewModel.likedMeProfiles.collectAsState()&#10;    val isLoading by favoriteViewModel.isLoading.collectAsState()&#10;    val errorMessage by favoriteViewModel.errorMessage.collectAsState()&#10;&#10;    LaunchedEffect(Unit) {&#10;        favoriteViewModel.fetchFavorites()&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(AppColors.MainBackground)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .verticalScroll(rememberScrollState())&#10;        ) {&#10;            FavoriteHeader(navController)&#10;            Text(&quot;Favorites&quot;, fontWeight = FontWeight.Bold, fontSize = 28.sp, modifier = Modifier.padding(16.dp))&#10;            if (isLoading) {&#10;                Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else if (errorMessage != null) {&#10;                Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                    Text(&quot;Error: $errorMessage&quot;, color = Color.Red)&#10;                }&#10;            } else {&#10;                Text(&quot;Users who liked you&quot;, fontWeight = FontWeight.Bold, fontSize = 20.sp, modifier = Modifier.padding(8.dp))&#10;                ProfileGrid(&#10;                    profiles = likedMeProfiles,&#10;                    navController = navController,&#10;                    showDelete = false,&#10;                    moreAvailable = likedMeProfiles.size &gt;= 9,&#10;                    onMoreClick = { /* TODO: Show all likedMeProfiles */ }&#10;                )&#10;            }&#10;        }&#10;        Box(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .fillMaxWidth()&#10;        ) {&#10;            FavoriteBottomNavigationBar(navController)&#10;        }&#10;    }&#10;&#10;}&#10;&#10;@Composable&#10;fun FavoriteHeader(navController: NavController) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(start = 48.dp, end = 48.dp, top = 40.dp, bottom = 30.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;&#10;        Text(&#10;            text = &quot;Matches&quot;,&#10;            color = Color.Black,&#10;            fontWeight = FontWeight.Bold,&#10;            fontSize = 24.sp&#10;        )&#10;&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileGrid(&#10;    profiles: List&lt;Map&lt;String, Any&gt;&gt;,&#10;    navController: NavController,&#10;    showDelete: Boolean,&#10;    moreAvailable: Boolean,&#10;    onDelete: ((Map&lt;String, Any&gt;) -&gt; Unit)? = null,&#10;    onMoreClick: () -&gt; Unit&#10;) {&#10;    var showAll by remember { mutableStateOf(false) }&#10;    val profilesToShow = if (showAll) profiles else profiles.take(6)&#10;    val rowCount = if (showAll) (profilesToShow.size + 1) / 2 else 3&#10;    Column {&#10;        for (row in 0 until rowCount) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp),&#10;            ) {&#10;                for (col in 0 until 2) {&#10;                    val idx = row * 2 + col&#10;                    val profile = profilesToShow.getOrNull(idx)&#10;                    if (profile != null) {&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .padding(8.dp)&#10;                                .weight(1f)&#10;                                .height(220.dp)&#10;                                .clip(RoundedCornerShape(24.dp))&#10;                                .background(Color(0xFF23222B))&#10;                                .clickable {&#10;                                    navController.navigate(&quot;profile_display/${profile[&quot;uid&quot;]}&quot;)&#10;                                }&#10;                        ) {&#10;                            // Profile image placeholder&#10;                            Image(&#10;                                imageVector = Icons.Default.Person,&#10;                                contentDescription = &quot;Profile&quot;,&#10;                                modifier = Modifier&#10;                                    .size(80.dp)&#10;                                    .align(Alignment.TopCenter)&#10;                                    .clip(CircleShape)&#10;                                    .background(Color.Gray)&#10;                            )&#10;                            // Name, Age, Description&#10;                            val firstName = profile[&quot;firstName&quot;] as? String ?: &quot;&quot;&#10;                            val lastName = profile[&quot;lastName&quot;] as? String ?: &quot;&quot;&#10;                            val name = (firstName + &quot; &quot; + lastName).trim().ifEmpty { &quot;Unknown&quot; }&#10;                            val birthday = profile[&quot;birthday&quot;] as? String&#10;                            val age = birthday?.let {&#10;                                try {&#10;                                    val year = it.split(&quot;/&quot;).getOrNull(2)?.toInt() ?: throw Exception(&quot;Invalid date&quot;)&#10;                                    val currentYear = java.util.Calendar.getInstance().get(java.util.Calendar.YEAR)&#10;                                    (currentYear - year).toString()&#10;                                } catch (e: Exception) { &quot;?&quot; }&#10;                            } ?: &quot;?&quot;&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .align(Alignment.BottomCenter)&#10;                                    .fillMaxWidth()&#10;                                    .background(Color.White.copy(alpha = 0.85f), RoundedCornerShape(bottomStart = 24.dp, bottomEnd = 24.dp))&#10;                                    .padding(8.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                Text(&quot;$name, $age&quot;, fontWeight = FontWeight.Bold, fontSize = 16.sp, color = Color.Black, maxLines = 1)&#10;                            }&#10;                            if (showDelete &amp;&amp; onDelete != null) {&#10;                                IconButton(onClick = { onDelete(profile) }, modifier = Modifier.align(Alignment.TopEnd)) {&#10;                                    Icon(Icons.Default.Close, contentDescription = &quot;Delete&quot;, tint = Color.Red)&#10;                                }&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Spacer(modifier = Modifier.weight(1f))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        if (!showAll &amp;&amp; moreAvailable) {&#10;            Button(onClick = { showAll = true }, modifier = Modifier.align(Alignment.CenterHorizontally).padding(8.dp)) {&#10;                Text(&quot;More&quot;)&#10;            }&#10;        }&#10;        if (showAll &amp;&amp; profiles.size &gt; 6) {&#10;            Button(onClick = { showAll = false }, modifier = Modifier.align(Alignment.CenterHorizontally).padding(8.dp)) {&#10;                Text(&quot;Show Less&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FavoriteBottomNavigationBar(navController: NavController) {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(103.dp)&#10;            .background(Color.White.copy(alpha = 1.0f)),&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 32.dp, vertical = 20.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            BottomNavIcon(&#10;                icon = Icons.Default.ViewModule,&#10;                isActive = false&#10;            ) { navController.navigate(&quot;home&quot;) }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Favorite,&#10;                isActive = true&#10;            ) { /* Already on favorite */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Chat,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Person,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.gestures.detectDragGestures&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateListOf&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.IntOffset&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.dating.R&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.animation.core.Animatable&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.runtime.Applier&#10;import kotlinx.coroutines.tasks.await&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.compose.ui.zIndex&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import java.util.Calendar&#10;import androidx.compose.runtime.MutableState&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.util.lerp&#10;import androidx.compose.animation.core.Spring&#10;import androidx.compose.animation.core.spring&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.viewmodel.HomeViewModel&#10;import androidx.compose.runtime.collectAsState&#10;&#10;@Composable&#10;fun HomeScreen(navController: NavController) {&#10;    val currentUserId = FirebaseAuth.getInstance().currentUser?.uid&#10;    val homeViewModel: HomeViewModel = viewModel()&#10;    val profiles by homeViewModel.profiles.collectAsState()&#10;    val isLoading by homeViewModel.isLoading.collectAsState()&#10;    val errorMessage by homeViewModel.errorMessage.collectAsState()&#10;&#10;    LaunchedEffect(Unit) {&#10;        homeViewModel.fetchHome()&#10;    }&#10;&#10;    // Use Box to overlay BottomNavigationBar and keep it fixed at the bottom&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        val profileIndex = remember { mutableStateOf(0) }&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(AppColors.MainBackground)&#10;        ) {&#10;            HomeHeader(navController)&#10;            if (isLoading) {&#10;                Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else if (errorMessage != null) {&#10;                Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                    Text(&quot;Error: $errorMessage&quot;, color = Color.Red)&#10;                }&#10;            } else {&#10;                val handleProfileAction: suspend (Boolean, MutableState&lt;Int&gt;, List&lt;Map&lt;String, Any&gt;&gt;, HomeViewModel) -&gt; Unit =&#10;                    { isLike, profileIndex, profiles, homeViewModel -&gt;&#10;                        val currentProfile = profiles.getOrNull(profileIndex.value)&#10;                        if (currentProfile != null) {&#10;                            if (isLike) {&#10;                                val likedUserId = currentProfile[&quot;uid&quot;] as? String&#10;                                if (likedUserId != null) {&#10;                                    homeViewModel.addFavorite(likedUserId)&#10;                                }&#10;                            }&#10;                            profileIndex.value++&#10;                        }&#10;                    }&#10;&#10;                suspend fun animateSwipe(offsetX: Animatable&lt;Float, *&gt;, direction: Float) {&#10;                    offsetX.animateTo(direction * 400f, tween(300))&#10;                    offsetX.snapTo(0f)&#10;                }&#10;&#10;                ProfileCard(&#10;                    profiles,&#10;                    profileIndex = profileIndex,&#10;                    handleProfileAction = handleProfileAction,&#10;                    animateSwipe = animateSwipe&#10;                )&#10;                ActionButtons(&#10;                    profiles = profiles,&#10;                    profileIndex = profileIndex,&#10;                    handleProfileAction = handleProfileAction,&#10;                    animateSwipe = animateSwipe&#10;                )&#10;            }&#10;        }&#10;        // Fixed BottomNavigationBar&#10;        Box(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .fillMaxWidth()&#10;        ) {&#10;            BottomNavigationBar(navController)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HomeHeader(navController: NavController) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(start = 48.dp, end = 48.dp, top = 40.dp, bottom = 30.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;&#10;        Text(&#10;            text = &quot;Discover&quot;,&#10;            color = Color.Black,&#10;            fontWeight = FontWeight.Bold,&#10;            fontSize = 24.sp&#10;        )&#10;&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileCard(&#10;    profiles: List&lt;Map&lt;String, Any&gt;&gt;,&#10;    profileIndex: MutableState&lt;Int&gt;,&#10;    handleProfileAction: suspend (Boolean, MutableState&lt;Int&gt;, List&lt;Map&lt;String, Any&gt;&gt;, HomeViewModel) -&gt; Unit,&#10;    animateSwipe: suspend (Animatable&lt;Float, *&gt;, Float) -&gt; Unit,&#10;    homeViewModel: HomeViewModel = viewModel()&#10;) {&#10;    val currentProfile = profiles.getOrNull(profileIndex.value)&#10;&#10;    if (currentProfile == null) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(900.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Text(&quot;No profiles available&quot;, color = Color.Gray)&#10;        }&#10;        return&#10;    }&#10;&#10;    val firstName = currentProfile[&quot;firstName&quot;] as? String ?: &quot;&quot;&#10;    val lastName = currentProfile[&quot;lastName&quot;] as? String ?: &quot;&quot;&#10;    val name = (firstName + &quot; &quot; + lastName).trim().ifEmpty { &quot;Unknown&quot; }&#10;    val birthday = currentProfile[&quot;birthday&quot;] as? String&#10;    Log.d(&quot;YearBug&quot;, &quot;Year: $birthday&quot;)&#10;&#10;    val age = birthday?.let {&#10;        try {&#10;            // Expecting format dd/MM/yyyy&#10;            val year = it.split(&quot;/&quot;).getOrNull(2)?.toInt() ?: throw Exception(&quot;Invalid date&quot;)&#10;            Log.d(&quot;YearBug&quot;, &quot;Year: $year&quot;)&#10;            val currentYear = Calendar.getInstance().get(Calendar.YEAR)&#10;            (currentYear - year).toString()&#10;        } catch (e: Exception) {&#10;            &quot;?&quot;&#10;        }&#10;    } ?: &quot;?&quot;&#10;    val description = currentProfile[&quot;description&quot;] as? String ?: &quot;No description&quot;&#10;    val distance = currentProfile[&quot;distance&quot;]?.toString() ?: &quot;1 km&quot;&#10;&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;    val offsetY = remember { Animatable(0f) }&#10;    val isDragging = remember { mutableStateOf(false) }&#10;    val likeProgress = (offsetX.value / 200f).coerceIn(0f, 1f)&#10;    val dislikeProgress = (-offsetX.value / 200f).coerceIn(0f, 1f)&#10;    val iconAlpha = maxOf(likeProgress, dislikeProgress)&#10;    val iconScale = 1f + 0.3f * iconAlpha&#10;    val cardRotation = (offsetX.value / 15).coerceIn(-25f, 25f)&#10;    val threshold = 200f&#10;    val nextProfile = profiles.getOrNull(profileIndex.value + 1)&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(550.dp)&#10;            .padding(horizontal = 30.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Next card (subtle scale/alpha)&#10;        if (nextProfile != null) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(550.dp)&#10;                    .clip(RoundedCornerShape(32.dp))&#10;                    .background(Color(0xFF23222B))&#10;                    .graphicsLayer(&#10;                        scaleX = lerp(0.95f, 1f, iconAlpha),&#10;                        scaleY = lerp(0.95f, 1f, iconAlpha),&#10;                        alpha = lerp(0.7f, 1f, iconAlpha)&#10;                    )&#10;            ) {}&#10;        }&#10;        // Top card (draggable)&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(550.dp)&#10;                .offset { IntOffset(offsetX.value.toInt(), offsetY.value.toInt()) }&#10;                .rotate(cardRotation)&#10;                .clip(RoundedCornerShape(32.dp))&#10;                .background(Color(0xFF23222B))&#10;                .pointerInput(profileIndex.value) {&#10;                    detectDragGestures(&#10;                        onDragStart = { isDragging.value = true },&#10;                        onDragEnd = {&#10;                            isDragging.value = false&#10;                            scope.launch {&#10;                                when {&#10;                                    offsetX.value &gt; threshold -&gt; {&#10;                                        handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                                        animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;                                        offsetY.snapTo(0f)&#10;                                    }&#10;                                    offsetX.value &lt; -threshold -&gt; {&#10;                                        handleProfileAction(false, profileIndex, profiles, homeViewModel)&#10;                                        animateSwipe(offsetX, -1f) // Pass direction explicitly&#10;                                        offsetY.snapTo(0f)&#10;                                    }&#10;                                    else -&gt; {&#10;                                        offsetX.animateTo(0f, spring(stiffness = Spring.StiffnessMedium))&#10;                                        offsetY.animateTo(0f, spring(stiffness = Spring.StiffnessMedium))&#10;                                    }&#10;                                }&#10;                            }&#10;                        },&#10;                        onDrag = { change, dragAmount -&gt;&#10;                            scope.launch {&#10;                                offsetX.snapTo(offsetX.value + dragAmount.x)&#10;                                offsetY.snapTo(offsetY.value + dragAmount.y)&#10;                            }&#10;                        }&#10;                    )&#10;                },&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            // Portrait Image (placeholder)&#10;            Image(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile Image&quot;,&#10;                contentScale = ContentScale.Crop,&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .clip(RoundedCornerShape(32.dp))&#10;            )&#10;            // Distance Label&#10;            Box(&#10;                modifier = Modifier&#10;                    .padding(16.dp)&#10;                    .align(Alignment.TopStart)&#10;                    .background(Color.White.copy(alpha = 0.85f), RoundedCornerShape(50))&#10;                    .padding(horizontal = 16.dp, vertical = 6.dp)&#10;            ) {&#10;                Text(distance, color = Color.Black, fontWeight = FontWeight.Bold, fontSize = 14.sp)&#10;            }&#10;            // Gradient Overlay&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(120.dp)&#10;                    .align(Alignment.BottomCenter)&#10;                    .background(&#10;                        Brush.verticalGradient(&#10;                            colors = listOf(Color.Transparent, Color.Black),&#10;                            startY = 0f,&#10;                            endY = 300f&#10;                        ),&#10;                        shape = RoundedCornerShape(bottomStart = 32.dp, bottomEnd = 32.dp)&#10;                    )&#10;            )&#10;            // Name, Age, Description&#10;            Column(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.Center,&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;$name, $age&quot;,&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 28.sp,&#10;                    maxLines = 1,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;                Text(&#10;                    text = description,&#10;                    color = Color(0xFFCCCCCC),&#10;                    fontSize = 16.sp,&#10;                    maxLines = 1,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;            // Like/Dislike Icon Overlay&#10;            if (likeProgress &gt; 0.05f) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Favorite,&#10;                    contentDescription = &quot;Like&quot;,&#10;                    tint = Color.Red.copy(alpha = iconAlpha),&#10;                    modifier = Modifier&#10;                        .size((96f * iconScale).dp)&#10;                        .align(Alignment.Center)&#10;                )&#10;            } else if (dislikeProgress &gt; 0.05f) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Close,&#10;                    contentDescription = &quot;Dislike&quot;,&#10;                    tint = Color.White.copy(alpha = iconAlpha),&#10;                    modifier = Modifier&#10;                        .size((96f * iconScale).dp)&#10;                        .align(Alignment.Center)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionButtons(&#10;    profiles: List&lt;Map&lt;String, Any&gt;&gt;,&#10;    profileIndex: MutableState&lt;Int&gt;,&#10;    handleProfileAction: suspend (Boolean, MutableState&lt;Int&gt;, List&lt;Map&lt;String, Any&gt;&gt;, HomeViewModel) -&gt; Unit,&#10;    animateSwipe: suspend (Animatable&lt;Float, *&gt;, Float) -&gt; Unit,&#10;    homeViewModel: HomeViewModel = viewModel()&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 24.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(25.dp, Alignment.CenterHorizontally),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        // Dislike Button&#10;        ActionButton(&#10;            icon = Icons.Default.Close,&#10;            background = Color.White,&#10;            iconTint = Color.Black,&#10;            size = 75.dp,&#10;            shadow = 8.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(false, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, -1f) // Pass direction explicitly&#10;            }&#10;        }&#10;        // Like Button&#10;        ActionButton(&#10;            icon = Icons.Default.Favorite,&#10;            background = AppColors.Text_Pink,&#10;            iconTint = Color.White,&#10;            size = 95.dp,&#10;            shadow = 12.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;            }&#10;        }&#10;        // Super Like Button (calls a different method for clarity)&#10;        ActionButton(&#10;            icon = Icons.Default.Star,&#10;            background = Color(0xFF4A154B),&#10;            iconTint = Color.White,&#10;            size = 75.dp,&#10;            shadow = 8.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionButton(&#10;    icon: ImageVector,&#10;    background: Color,&#10;    iconTint: Color,&#10;    size: Dp,&#10;    shadow: Dp,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .size(size)&#10;            .shadow(shadow, CircleShape)&#10;            .clip(CircleShape)&#10;            .background(background)&#10;            .clickable { onClick() },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = iconTint,&#10;            modifier = Modifier.size(size * 0.5f)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BottomNavIcon(&#10;    icon: ImageVector,&#10;    isActive: Boolean,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    IconButton(onClick = onClick) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = if (isActive) AppColors.Text_Pink else Color(0xFFBDBDBD),&#10;            modifier = Modifier.size(32.dp)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BottomNavigationBar(navController: NavController) {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(103.dp)&#10;            .background(Color.White.copy(alpha = 1.0f)),&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 32.dp, vertical = 20.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            BottomNavIcon(&#10;                icon = Icons.Default.ViewModule,&#10;                isActive = true&#10;            ) { /* TODO: Handle navigation */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Favorite,&#10;                isActive = false&#10;            ) { navController.navigate(&quot;favorite&quot;) }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Chat,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Person,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.gestures.detectDragGestures&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateListOf&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.IntOffset&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.dating.R&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.animation.core.Animatable&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.runtime.Applier&#10;import kotlinx.coroutines.tasks.await&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.compose.ui.zIndex&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import java.util.Calendar&#10;import androidx.compose.runtime.MutableState&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.util.lerp&#10;import androidx.compose.animation.core.Spring&#10;import androidx.compose.animation.core.spring&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.viewmodel.HomeViewModel&#10;import androidx.compose.runtime.collectAsState&#10;&#10;@Composable&#10;fun HomeScreen(navController: NavController) {&#10;    val homeViewModel: HomeViewModel = viewModel()&#10;    val profiles by homeViewModel.profiles.collectAsState()&#10;    val isLoading by homeViewModel.isLoading.collectAsState()&#10;    val errorMessage by homeViewModel.errorMessage.collectAsState()&#10;    val profileIndex = remember { mutableStateOf(0) }&#10;&#10;    // Helper functions&#10;    suspend fun handleProfileAction(isLike: Boolean, profileIndex: MutableState&lt;Int&gt;, profiles: List&lt;Map&lt;String, Any&gt;&gt;, homeViewModel: HomeViewModel) {&#10;        val currentProfile = profiles.getOrNull(profileIndex.value)&#10;        if (currentProfile != null) {&#10;            if (isLike) {&#10;                val likedUserId = currentProfile[&quot;uid&quot;] as? String&#10;                if (likedUserId != null) {&#10;                    homeViewModel.addFavorite(likedUserId)&#10;                }&#10;            }&#10;            profileIndex.value++&#10;        }&#10;    }&#10;    suspend fun animateSwipe(offsetX: Animatable&lt;Float, *&gt;, direction: Float) {&#10;        offsetX.animateTo(direction * 400f, tween(300))&#10;        offsetX.snapTo(0f)&#10;    }&#10;&#10;    LaunchedEffect(Unit) {&#10;        homeViewModel.fetchHome()&#10;    }&#10;&#10;    // Use Box to overlay BottomNavigationBar and keep it fixed at the bottom&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(AppColors.MainBackground)&#10;        ) {&#10;            HomeHeader(navController)&#10;            if (isLoading) {&#10;                Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else if (errorMessage != null) {&#10;                Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                    Text(&quot;Error: $errorMessage&quot;, color = Color.Red)&#10;                }&#10;            } else {&#10;                ProfileCard(&#10;                    profiles = profiles,&#10;                    profileIndex = profileIndex,&#10;                    handleProfileAction = ::handleProfileAction,&#10;                    animateSwipe = ::animateSwipe&#10;                )&#10;                ActionButtons(&#10;                    profiles = profiles,&#10;                    profileIndex = profileIndex,&#10;                    handleProfileAction = ::handleProfileAction,&#10;                    animateSwipe = ::animateSwipe&#10;                )&#10;            }&#10;        }&#10;        // Fixed BottomNavigationBar&#10;        Box(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .fillMaxWidth()&#10;        ) {&#10;            BottomNavigationBar(navController)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HomeHeader(navController: NavController) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(start = 48.dp, end = 48.dp, top = 40.dp, bottom = 30.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;&#10;        Text(&#10;            text = &quot;Discover&quot;,&#10;            color = Color.Black,&#10;            fontWeight = FontWeight.Bold,&#10;            fontSize = 24.sp&#10;        )&#10;&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileCard(&#10;    profiles: List&lt;Map&lt;String, Any&gt;&gt;,&#10;    profileIndex: MutableState&lt;Int&gt;,&#10;    handleProfileAction: suspend (Boolean, MutableState&lt;Int&gt;, List&lt;Map&lt;String, Any&gt;&gt;, HomeViewModel) -&gt; Unit,&#10;    animateSwipe: suspend (Animatable&lt;Float, *&gt;, Float) -&gt; Unit,&#10;    homeViewModel: HomeViewModel = viewModel()&#10;) {&#10;    val currentProfile = profiles.getOrNull(profileIndex.value)&#10;&#10;    if (currentProfile == null) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(900.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Text(&quot;No profiles available&quot;, color = Color.Gray)&#10;        }&#10;        return&#10;    }&#10;&#10;    val firstName = currentProfile[&quot;firstName&quot;] as? String ?: &quot;&quot;&#10;    val lastName = currentProfile[&quot;lastName&quot;] as? String ?: &quot;&quot;&#10;    val name = (firstName + &quot; &quot; + lastName).trim().ifEmpty { &quot;Unknown&quot; }&#10;    val birthday = currentProfile[&quot;birthday&quot;] as? String&#10;    Log.d(&quot;YearBug&quot;, &quot;Year: $birthday&quot;)&#10;&#10;    val age = birthday?.let {&#10;        try {&#10;            // Expecting format dd/MM/yyyy&#10;            val year = it.split(&quot;/&quot;).getOrNull(2)?.toInt() ?: throw Exception(&quot;Invalid date&quot;)&#10;            Log.d(&quot;YearBug&quot;, &quot;Year: $year&quot;)&#10;            val currentYear = Calendar.getInstance().get(Calendar.YEAR)&#10;            (currentYear - year).toString()&#10;        } catch (e: Exception) {&#10;            &quot;?&quot;&#10;        }&#10;    } ?: &quot;?&quot;&#10;    val description = currentProfile[&quot;description&quot;] as? String ?: &quot;No description&quot;&#10;    val distance = currentProfile[&quot;distance&quot;]?.toString() ?: &quot;1 km&quot;&#10;&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;    val offsetY = remember { Animatable(0f) }&#10;    val isDragging = remember { mutableStateOf(false) }&#10;    val likeProgress = (offsetX.value / 200f).coerceIn(0f, 1f)&#10;    val dislikeProgress = (-offsetX.value / 200f).coerceIn(0f, 1f)&#10;    val iconAlpha = maxOf(likeProgress, dislikeProgress)&#10;    val iconScale = 1f + 0.3f * iconAlpha&#10;    val cardRotation = (offsetX.value / 15).coerceIn(-25f, 25f)&#10;    val threshold = 200f&#10;    val nextProfile = profiles.getOrNull(profileIndex.value + 1)&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(550.dp)&#10;            .padding(horizontal = 30.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Next card (subtle scale/alpha)&#10;        if (nextProfile != null) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(550.dp)&#10;                    .clip(RoundedCornerShape(32.dp))&#10;                    .background(Color(0xFF23222B))&#10;                    .graphicsLayer(&#10;                        scaleX = lerp(0.95f, 1f, iconAlpha),&#10;                        scaleY = lerp(0.95f, 1f, iconAlpha),&#10;                        alpha = lerp(0.7f, 1f, iconAlpha)&#10;                    )&#10;            ) {}&#10;        }&#10;        // Top card (draggable)&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(550.dp)&#10;                .offset { IntOffset(offsetX.value.toInt(), offsetY.value.toInt()) }&#10;                .rotate(cardRotation)&#10;                .clip(RoundedCornerShape(32.dp))&#10;                .background(Color(0xFF23222B))&#10;                .pointerInput(profileIndex.value) {&#10;                    detectDragGestures(&#10;                        onDragStart = { isDragging.value = true },&#10;                        onDragEnd = {&#10;                            isDragging.value = false&#10;                            scope.launch {&#10;                                when {&#10;                                    offsetX.value &gt; threshold -&gt; {&#10;                                        handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                                        animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;                                        offsetY.snapTo(0f)&#10;                                    }&#10;                                    offsetX.value &lt; -threshold -&gt; {&#10;                                        handleProfileAction(false, profileIndex, profiles, homeViewModel)&#10;                                        animateSwipe(offsetX, -1f) // Pass direction explicitly&#10;                                        offsetY.snapTo(0f)&#10;                                    }&#10;                                    else -&gt; {&#10;                                        offsetX.animateTo(0f, spring(stiffness = Spring.StiffnessMedium))&#10;                                        offsetY.animateTo(0f, spring(stiffness = Spring.StiffnessMedium))&#10;                                    }&#10;                                }&#10;                            }&#10;                        },&#10;                        onDrag = { change, dragAmount -&gt;&#10;                            scope.launch {&#10;                                offsetX.snapTo(offsetX.value + dragAmount.x)&#10;                                offsetY.snapTo(offsetY.value + dragAmount.y)&#10;                            }&#10;                        }&#10;                    )&#10;                },&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            // Portrait Image (placeholder)&#10;            Image(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile Image&quot;,&#10;                contentScale = ContentScale.Crop,&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .clip(RoundedCornerShape(32.dp))&#10;            )&#10;            // Distance Label&#10;            Box(&#10;                modifier = Modifier&#10;                    .padding(16.dp)&#10;                    .align(Alignment.TopStart)&#10;                    .background(Color.White.copy(alpha = 0.85f), RoundedCornerShape(50))&#10;                    .padding(horizontal = 16.dp, vertical = 6.dp)&#10;            ) {&#10;                Text(distance, color = Color.Black, fontWeight = FontWeight.Bold, fontSize = 14.sp)&#10;            }&#10;            // Gradient Overlay&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(120.dp)&#10;                    .align(Alignment.BottomCenter)&#10;                    .background(&#10;                        Brush.verticalGradient(&#10;                            colors = listOf(Color.Transparent, Color.Black),&#10;                            startY = 0f,&#10;                            endY = 300f&#10;                        ),&#10;                        shape = RoundedCornerShape(bottomStart = 32.dp, bottomEnd = 32.dp)&#10;                    )&#10;            )&#10;            // Name, Age, Description&#10;            Column(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.Center,&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;$name, $age&quot;,&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 28.sp,&#10;                    maxLines = 1,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;                Text(&#10;                    text = description,&#10;                    color = Color(0xFFCCCCCC),&#10;                    fontSize = 16.sp,&#10;                    maxLines = 1,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;            // Like/Dislike Icon Overlay&#10;            if (likeProgress &gt; 0.05f) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Favorite,&#10;                    contentDescription = &quot;Like&quot;,&#10;                    tint = Color.Red.copy(alpha = iconAlpha),&#10;                    modifier = Modifier&#10;                        .size((96f * iconScale).dp)&#10;                        .align(Alignment.Center)&#10;                )&#10;            } else if (dislikeProgress &gt; 0.05f) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Close,&#10;                    contentDescription = &quot;Dislike&quot;,&#10;                    tint = Color.White.copy(alpha = iconAlpha),&#10;                    modifier = Modifier&#10;                        .size((96f * iconScale).dp)&#10;                        .align(Alignment.Center)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionButtons(&#10;    profiles: List&lt;Map&lt;String, Any&gt;&gt;,&#10;    profileIndex: MutableState&lt;Int&gt;,&#10;    handleProfileAction: suspend (Boolean, MutableState&lt;Int&gt;, List&lt;Map&lt;String, Any&gt;&gt;, HomeViewModel) -&gt; Unit,&#10;    animateSwipe: suspend (Animatable&lt;Float, *&gt;, Float) -&gt; Unit,&#10;    homeViewModel: HomeViewModel = viewModel()&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 24.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(25.dp, Alignment.CenterHorizontally),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        // Dislike Button&#10;        ActionButton(&#10;            icon = Icons.Default.Close,&#10;            background = Color.White,&#10;            iconTint = Color.Black,&#10;            size = 75.dp,&#10;            shadow = 8.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(false, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, -1f) // Pass direction explicitly&#10;            }&#10;        }&#10;        // Like Button&#10;        ActionButton(&#10;            icon = Icons.Default.Favorite,&#10;            background = AppColors.Text_Pink,&#10;            iconTint = Color.White,&#10;            size = 95.dp,&#10;            shadow = 12.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;            }&#10;        }&#10;        // Super Like Button (calls a different method for clarity)&#10;        ActionButton(&#10;            icon = Icons.Default.Star,&#10;            background = Color(0xFF4A154B),&#10;            iconTint = Color.White,&#10;            size = 75.dp,&#10;            shadow = 8.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionButton(&#10;    icon: ImageVector,&#10;    background: Color,&#10;    iconTint: Color,&#10;    size: Dp,&#10;    shadow: Dp,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .size(size)&#10;            .shadow(shadow, CircleShape)&#10;            .clip(CircleShape)&#10;            .background(background)&#10;            .clickable { onClick() },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = iconTint,&#10;            modifier = Modifier.size(size * 0.5f)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BottomNavIcon(&#10;    icon: ImageVector,&#10;    isActive: Boolean,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    IconButton(onClick = onClick) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = if (isActive) AppColors.Text_Pink else Color(0xFFBDBDBD),&#10;            modifier = Modifier.size(32.dp)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BottomNavigationBar(navController: NavController) {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(103.dp)&#10;            .background(Color.White.copy(alpha = 1.0f)),&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 32.dp, vertical = 20.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            BottomNavIcon(&#10;                icon = Icons.Default.ViewModule,&#10;                isActive = true&#10;            ) { /* TODO: Handle navigation */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Favorite,&#10;                isActive = false&#10;            ) { navController.navigate(&quot;favorite&quot;) }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Chat,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Person,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class HomeViewModel : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val _addFavoriteState = MutableStateFlow&lt;Result&lt;Unit&gt;?&gt;(null)&#10;    val addFavoriteState: StateFlow&lt;Result&lt;Unit&gt;?&gt; = _addFavoriteState&#10;&#10;    fun addFavorite(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        val favorite = hashMapOf(&#10;            &quot;likerId&quot; to likerId,&#10;            &quot;likedId&quot; to likedId,&#10;            &quot;timestamp&quot; to Timestamp.now()&#10;        )&#10;        viewModelScope.launch {&#10;            try {&#10;                db.collection(&quot;favorites&quot;).add(favorite)&#10;                _addFavoriteState.value = Result.success(Unit)&#10;            } catch (e: Exception) {&#10;                _addFavoriteState.value = Result.failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearAddFavoriteState() {&#10;        _addFavoriteState.value = null&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/HomeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/HomeViewModel.kt" />
              <option name="originalContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class HomeViewModel : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val _addFavoriteState = MutableStateFlow&lt;Result&lt;Unit&gt;?&gt;(null)&#10;    val addFavoriteState: StateFlow&lt;Result&lt;Unit&gt;?&gt; = _addFavoriteState&#10;&#10;    fun addFavorite(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        val favorite = hashMapOf(&#10;            &quot;likerId&quot; to likerId,&#10;            &quot;likedId&quot; to likedId,&#10;            &quot;timestamp&quot; to Timestamp.now()&#10;        )&#10;        viewModelScope.launch {&#10;            try {&#10;                db.collection(&quot;favorites&quot;).add(favorite)&#10;                _addFavoriteState.value = Result.success(Unit)&#10;            } catch (e: Exception) {&#10;                _addFavoriteState.value = Result.failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class HomeViewModel : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val _addFavoriteState = MutableStateFlow&lt;Result&lt;Unit&gt;?&gt;(null)&#10;    val addFavoriteState: StateFlow&lt;Result&lt;Unit&gt;?&gt; = _addFavoriteState&#10;&#10;    private val _profiles = MutableStateFlow&lt;List&lt;Map&lt;String, Any&gt;&gt;&gt;(emptyList())&#10;    val profiles: StateFlow&lt;List&lt;Map&lt;String, Any&gt;&gt;&gt; = _profiles&#10;&#10;    private val _isLoading = MutableStateFlow(true)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading&#10;&#10;    private val _errorMessage = MutableStateFlow&lt;String?&gt;(null)&#10;    val errorMessage: StateFlow&lt;String?&gt; = _errorMessage&#10;&#10;    fun addFavorite(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        val favorite = hashMapOf(&#10;            &quot;likerId&quot; to likerId,&#10;            &quot;likedId&quot; to likedId,&#10;            &quot;timestamp&quot; to Timestamp.now()&#10;        )&#10;        viewModelScope.launch {&#10;            try {&#10;                // Check for duplicate before adding&#10;                val query = db.collection(&quot;favorites&quot;)&#10;                    .whereEqualTo(&quot;likerId&quot;, likerId)&#10;                    .whereEqualTo(&quot;likedId&quot;, likedId)&#10;                    .get().await()&#10;                if (query.isEmpty) {&#10;                    db.collection(&quot;favorites&quot;).add(favorite)&#10;                    _addFavoriteState.value = Result.success(Unit)&#10;                } else {&#10;                    _addFavoriteState.value = Result.failure(Exception(&quot;Already liked&quot;))&#10;                }&#10;            } catch (e: Exception) {&#10;                _addFavoriteState.value = Result.failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun fetchHome() {&#10;        val currentUserId = FirebaseAuth.getInstance().currentUser?.uid&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val snapshot = db.collection(&quot;users&quot;).get().await()&#10;                val allProfiles = snapshot.documents.mapNotNull { doc -&gt;&#10;                    val data = doc.data&#10;                    if (doc.id != currentUserId &amp;&amp; data != null) data + (&quot;uid&quot; to doc.id) else null&#10;                }&#10;                _profiles.value = allProfiles&#10;                _isLoading.value = false&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = e.message&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_arrow_drop_down.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_arrow_drop_down.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#757575&quot;&#10;        android:pathData=&quot;M7,10l5,5 5,-5z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_avatar.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_avatar.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;120dp&quot;&#10;    android:height=&quot;120dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#CCCCCC&quot;&#10;        android:pathData=&quot;M12,12c2.67,0 8,1.34 8,4v2H4v-2c0-2.66 5.33-4 8-4zm0-2a4,4 0 1,0 0,-8 4,4 0 0,0 0,8z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>