<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/MatchRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/MatchRepository.kt" />
              <option name="updatedContent" value="package com.example.dating.data&#10;&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class MatchRepository {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    suspend fun saveMatch(userId1: String, userId2: String, status: Boolean) {&#10;        // Ensure userId1 &lt; userId2 alphabetically&#10;        val (firstId, secondId) = if (userId1 &lt; userId2) userId1 to userId2 else userId2 to userId1&#10;        val matchData = hashMapOf(&#10;            &quot;userId1&quot; to firstId,&#10;            &quot;userId2&quot; to secondId,&#10;            &quot;timestamp&quot; to Timestamp.now(),&#10;            &quot;status&quot; to status&#10;        )&#10;        // Check for duplicate (userId1/userId2 only)&#10;        val query = db.collection(&quot;match&quot;)&#10;            .whereEqualTo(&quot;userId1&quot;, firstId)&#10;            .whereEqualTo(&quot;userId2&quot;, secondId)&#10;            .get().await()&#10;        android.util.Log.d(&quot;MatchRepository&quot;, &quot;MatchQuery: userId1=$firstId, userId2=$secondId, resultCount=${query.size()}&quot;)&#10;        if (query.isEmpty) {&#10;            db.collection(&quot;match&quot;).add(matchData)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/FirebaseMessagesRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/FirebaseMessagesRepository.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.ConversationPreview&#10;import com.example.dating.data.model.User&#10;import com.google.android.gms.tasks.Tasks&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.firestore.Query&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;&#10;class FirebaseMessagesRepository @Inject constructor(&#10;    private val db: FirebaseFirestore,&#10;    private val auth: FirebaseAuth&#10;) {&#10;    fun getConversations(): Flow&lt;List&lt;ConversationPreview&gt;&gt; = callbackFlow {&#10;        val currentUid = auth.currentUser?.uid&#10;        if(currentUid == null) {&#10;            trySend(emptyList())&#10;            awaitClose()&#10;            return@callbackFlow&#10;        }&#10;        val query = db.collection(&quot;conversations&quot;)&#10;            .whereArrayContains(&quot;participants&quot;, currentUid)&#10;            .orderBy(&quot;lastTimestamp&quot;, Query.Direction.DESCENDING)&#10;&#10;        val listener = query.addSnapshotListener { snapshot, _ -&gt;&#10;            if (snapshot == null) {&#10;                trySend(emptyList())&#10;                return@addSnapshotListener&#10;            }&#10;&#10;            val tasks = snapshot.documents.map { doc -&gt;&#10;                val data = doc.data ?: return@map null&#10;                val cid = doc.id&#10;                val participants = data[&quot;participants&quot;] as List&lt;String&gt;&#10;                val peerUid = participants.first { it != currentUid }&#10;&#10;                val userTask = db.collection(&quot;users&quot;).document(peerUid).get()&#10;&#10;                userTask.continueWith { userSnap -&gt;&#10;                    val user = userSnap.result?.toObject(User::class.java) ?: User(uid = peerUid)&#10;                    val lastMessage = data[&quot;lastMessage&quot;] as? String ?: &quot;&quot;&#10;                    val timestamp = (data[&quot;lastTimestamp&quot;] as? Timestamp)?.toDate()?.time ?: 0L&#10;                    val unread = (data[&quot;unread&quot;] as? Map&lt;*, *&gt;)?.get(currentUid) as? Long ?: 0L&#10;                    val typing = (data[&quot;typing&quot;] as? Map&lt;*, *&gt;)?.get(peerUid) as? Boolean ?: false&#10;&#10;                    ConversationPreview(&#10;                        id = cid,&#10;                        peer = user,&#10;                        lastMessage = lastMessage,&#10;                        timeAgo = formatTimeAgo(timestamp),&#10;                        unreadCount = unread.toInt(),&#10;                        isTyping = typing&#10;                    )&#10;                }&#10;            }&#10;&#10;            Tasks.whenAllSuccess&lt;ConversationPreview&gt;(tasks)&#10;                .addOnSuccessListener { result -&gt; trySend(result) }&#10;        }&#10;&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    private fun formatTimeAgo(ms: Long): String {&#10;        val min = ((System.currentTimeMillis() - ms) / 60000)&#10;        return when {&#10;            min &lt; 1 -&gt; &quot;Just now&quot;&#10;            min &lt; 60 -&gt; &quot;$min min&quot;&#10;            else -&gt; &quot;${min / 60} hour&quot;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.ConversationPreview&#10;import com.example.dating.data.model.User&#10;import com.google.android.gms.tasks.Tasks&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.firestore.Query&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;&#10;class FirebaseMessagesRepository @Inject constructor(&#10;    private val db: FirebaseFirestore,&#10;    private val auth: FirebaseAuth&#10;) {&#10;    fun getConversations(): Flow&lt;List&lt;ConversationPreview&gt;&gt; = callbackFlow {&#10;        val currentUid = auth.currentUser?.uid&#10;        if(currentUid == null) {&#10;            trySend(emptyList())&#10;            awaitClose()&#10;            return@callbackFlow&#10;        }&#10;        val query = db.collection(&quot;conversations&quot;)&#10;            .whereArrayContains(&quot;participants&quot;, currentUid)&#10;            .orderBy(&quot;lastTimestamp&quot;, Query.Direction.DESCENDING)&#10;&#10;        val listener = query.addSnapshotListener { snapshot, _ -&gt;&#10;            if (snapshot == null) {&#10;                trySend(emptyList())&#10;                return@addSnapshotListener&#10;            }&#10;&#10;            val tasks = snapshot.documents.map { doc -&gt;&#10;                val data = doc.data ?: return@map null&#10;                val cid = doc.id&#10;                val participants = data[&quot;participants&quot;] as List&lt;String&gt;&#10;                val peerUid = participants.first { it != currentUid }&#10;&#10;                val userTask = db.collection(&quot;users&quot;).document(peerUid).get()&#10;&#10;                userTask.continueWith { userSnap -&gt;&#10;                    val user = userSnap.result?.toObject(User::class.java) ?: User(uid = peerUid)&#10;                    val lastMessage = data[&quot;lastMessage&quot;] as? String ?: &quot;&quot;&#10;                    val timestamp = (data[&quot;lastTimestamp&quot;] as? Timestamp)?.toDate()?.time ?: 0L&#10;                    val unread = (data[&quot;unread&quot;] as? Map&lt;*, *&gt;)?.get(currentUid) as? Long ?: 0L&#10;                    val typing = (data[&quot;typing&quot;] as? Map&lt;*, *&gt;)?.get(peerUid) as? Boolean ?: false&#10;&#10;                    ConversationPreview(&#10;                        id = cid,&#10;                        peer = user,&#10;                        lastMessage = lastMessage,&#10;                        timeAgo = formatTimeAgo(timestamp),&#10;                        unreadCount = unread.toInt(),&#10;                        isTyping = typing&#10;                    )&#10;                }&#10;            }&#10;&#10;            Tasks.whenAllSuccess&lt;ConversationPreview&gt;(tasks)&#10;                .addOnSuccessListener { result -&gt; trySend(result) }&#10;        }&#10;&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    private fun formatTimeAgo(ms: Long): String {&#10;        val min = ((System.currentTimeMillis() - ms) / 60000)&#10;        return when {&#10;            min &lt; 1 -&gt; &quot;Just now&quot;&#10;            min &lt; 60 -&gt; &quot;$min min&quot;&#10;            else -&gt; &quot;${min / 60} hour&quot;&#10;        }&#10;    }&#10;&#10;    suspend fun createConversation(userId1: String, userId2: String) {&#10;        val conversationData = hashMapOf(&#10;            &quot;participants&quot; to listOf(userId1, userId2),&#10;            &quot;lastMessage&quot; to &quot;&quot;,&#10;            &quot;lastTimestamp&quot; to System.currentTimeMillis(),&#10;            &quot;unread&quot; to mapOf(userId1 to 0, userId2 to 0)&#10;        )&#10;        db.collection(&quot;conversations&quot;).add(conversationData).await()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepository.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;&#10;&#10;class UserRepository @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;)  {&#10;&#10;    fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        android.util.Log.d(&quot;UserRepository&quot;, &quot;getUser: docRef=$docRef &quot; +&#10;                &quot;for uid=$uid&quot;)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            val user = snapshot?.toObject(User::class.java)&#10;            // Ensure uid and imageUrl are set from document id and default if missing&#10;            val userWithUid = user?.copy(&#10;                uid = snapshot.id,&#10;                imageUrl = user.imageUrl ?: emptyList()&#10;            )&#10;            android.util.Log.d(&quot;UserRepository&quot;, &quot;getUser: uid=$uid, user=$userWithUid&quot;)&#10;            trySend(userWithUid)&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    suspend fun updateUser(user: User): Resource&lt;Unit&gt; {&#10;        return try {&#10;            android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;updateProfile called with: $user&quot;)&#10;            firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateGender(uid: String, gender: String): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&quot;gender&quot;, gender).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateInterests(uid: String, interests: List&lt;String&gt;): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&quot;interests&quot;, interests).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateJobLocationDescription(uid: String, job: String?, location: String?, description: String?): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&#10;                mapOf(&#10;                    &quot;job&quot; to job,&#10;                    &quot;location&quot; to location,&#10;                    &quot;description&quot; to description&#10;                )&#10;            ).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun uploadAvatar(uid: String, uri: android.net.Uri): String {&#10;        // TODO: Implement Firebase Storage upload and return the URL&#10;        return &quot;&quot;&#10;    }&#10;&#10;    suspend fun createUser(user: User): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;&#10;&#10;class UserRepository @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;)  {&#10;&#10;    fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        android.util.Log.d(&quot;UserRepository&quot;, &quot;getUser: docRef=$docRef &quot; +&#10;                &quot;for uid=$uid&quot;)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            val user = snapshot?.toObject(User::class.java)&#10;            // Ensure uid and imageUrl are set from document id and default if missing&#10;            val userWithUid = user?.copy(&#10;                uid = snapshot.id,&#10;                imageUrl = user.imageUrl ?: emptyList()&#10;            )&#10;            android.util.Log.d(&quot;UserRepository&quot;, &quot;getUser: uid=$uid, user=$userWithUid&quot;)&#10;            trySend(userWithUid)&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    suspend fun updateUser(user: User): Resource&lt;Unit&gt; {&#10;        return try {&#10;            android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;updateProfile called with: $user&quot;)&#10;            firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateGender(uid: String, gender: String): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&quot;gender&quot;, gender).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateInterests(uid: String, interests: List&lt;String&gt;): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&quot;interests&quot;, interests).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateJobLocationDescription(uid: String, job: String?, location: String?, description: String?): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(uid).update(&#10;                mapOf(&#10;                    &quot;job&quot; to job,&#10;                    &quot;location&quot; to location,&#10;                    &quot;description&quot; to description&#10;                )&#10;            ).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun uploadAvatar(uid: String, uri: android.net.Uri): String {&#10;        // TODO: Implement Firebase Storage upload and return the URL&#10;        return &quot;&quot;&#10;    }&#10;&#10;    suspend fun createUser(user: User): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun updateAvatarUrl(uid: String, avatarUrl: String) {&#10;        firestore.collection(&quot;users&quot;).document(uid)&#10;            .update(&quot;avatarUrl&quot;, avatarUrl)&#10;            .await()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepositoryImpl.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;) : UserRepository {&#10;&#10;    fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            offer(snapshot?.toObject(User::class.java))&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    override suspend fun updateUser(user: User) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun saveProfile(&#10;        userId: String,&#10;        firstName: String,&#10;        lastName: String,&#10;        birthday: String?,&#10;        imageUrl: String?&#10;    ): Resource&lt;Unit&gt; {&#10;        return try {&#10;            val userMap = hashMapOf(&#10;                &quot;firstName&quot; to firstName,&#10;                &quot;lastName&quot; to lastName,&#10;                &quot;birthday&quot; to birthday,&#10;                &quot;imageUrl&quot; to imageUrl&#10;            )&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .set(userMap)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateGender(userId: String, gender: String): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;gender&quot;, gender)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateInterests(userId: String, interests: List&lt;String&gt;): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;interests&quot;, interests)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateJobLocationDescription(&#10;        userId: String,&#10;        job: String?,&#10;        location: String?,&#10;        description: String?&#10;    ): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(mapOf(&#10;                    &quot;job&quot; to job,&#10;                    &quot;location&quot; to location,&#10;                    &quot;description&quot; to description&#10;                ))&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;) : UserRepository {&#10;&#10;    override fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            trySend(snapshot?.toObject(User::class.java))&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    override suspend fun updateUser(user: User) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun saveProfile(&#10;        user: User&#10;    ) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun updateGender(uid: String, gender: String) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&quot;gender&quot;, gender).await()&#10;    }&#10;&#10;    override suspend fun updateInterests(uid: String, interests: List&lt;String&gt;) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&quot;interests&quot;, interests).await()&#10;    }&#10;&#10;    override suspend fun updateJobLocationDescription(uid: String, job: String?, location: String?, description: String?) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&#10;            mapOf(&#10;                &quot;job&quot; to job,&#10;                &quot;location&quot; to location,&#10;                &quot;description&quot; to description&#10;            )&#10;        ).await()&#10;    }&#10;&#10;    override suspend fun uploadAvatar(uid: String, uri: android.net.Uri): String {&#10;        // TODO: Implement Firebase Storage upload and return the URL&#10;        return &quot;&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/FilterDialog.kt.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/FilterDialog.kt.kt" />
              <option name="originalContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FilterScreen(navController: NavController) {&#10;    // State variables&#10;    var selectedInterest by remember { mutableStateOf(&quot;Girls&quot;) }&#10;    var location by remember { mutableStateOf(&quot;Chicago, USA&quot;) }&#10;    var distance by remember { mutableFloatStateOf(40f) }&#10;    var ageRange by remember { mutableStateOf(20f..28f) }&#10;&#10;    // Bottom sheet or dialog content&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .wrapContentHeight()&#10;            .clip(RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp))&#10;            .background(Color.White)&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        // Notch&#10;        Box(&#10;            modifier = Modifier&#10;                .width(40.dp)&#10;                .height(4.dp)&#10;                .background(Color.Gray.copy(alpha = 0.5f), CircleShape)&#10;                .align(Alignment.CenterHorizontally)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Title and Clear&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Filters&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.Black&#10;            )&#10;            TextButton(onClick = { /* TODO: Clear filters */ }) {&#10;                Text(&#10;                    text = &quot;Clear&quot;,&#10;                    color = Color(0xFFFF69B4), // Pink&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Interested in&#10;        Text(&#10;            text = &quot;Interested in&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        SegmentedButtonRow(modifier = Modifier.fillMaxWidth()) {&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Girls&quot;,&#10;                onClick = { selectedInterest = &quot;Girls&quot; },&#10;                shape = RoundedCornerShape(topStart = 8.dp, bottomStart = 8.dp)&#10;            ) {&#10;                Text(&quot;Girls&quot;)&#10;            }&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Boys&quot;,&#10;                onClick = { selectedInterest = &quot;Boys&quot; },&#10;                shape = RoundedCornerShape(0.dp)&#10;            ) {&#10;                Text(&quot;Boys&quot;)&#10;            }&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Both&quot;,&#10;                onClick = { selectedInterest = &quot;Both&quot; },&#10;                shape = RoundedCornerShape(topEnd = 8.dp, bottomEnd = 8.dp)&#10;            ) {&#10;                Text(&quot;Both&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Location&#10;        Text(&#10;            text = &quot;Location&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        OutlinedTextField(&#10;            value = location,&#10;            onValueChange = { /* Read-only, tap to select */ },&#10;            readOnly = true,&#10;            modifier = Modifier.fillMaxWidth(),&#10;            trailingIcon = {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowForward,&#10;                    contentDescription = &quot;Select location&quot;,&#10;                    tint = Color(0xFFFF0000) // Red&#10;                )&#10;            },&#10;            singleLine = true,&#10;            interactionSource = remember { MutableInteractionSource() }.also { interactionSource -&gt;&#10;                // TODO: Handle click to open location selector&#10;            }&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Distance&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;Distance&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;            Text(&#10;                text = &quot;${distance.toInt()}km&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;        Slider(&#10;            value = distance,&#10;            onValueChange = { distance = it },&#10;            valueRange = 0f..100f, // Assuming max 100km&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = SliderDefaults.colors(&#10;                thumbColor = Color(0xFFBB86FC), // Purple&#10;                activeTrackColor = Color(0xFFBB86FC),&#10;                inactiveTrackColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Age&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;Age&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;            Text(&#10;                text = &quot;${ageRange.start.toInt()}-${ageRange.endInclusive.toInt()}&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;        RangeSlider(&#10;            value = ageRange,&#10;            onValueChange = { ageRange = it },&#10;            valueRange = 18f..100f, // Assuming age range&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = SliderDefaults.colors(&#10;                thumbColor = Color(0xFFBB86FC), // Purple&#10;                activeTrackColor = Color(0xFFBB86FC),&#10;                inactiveTrackColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // Continue button&#10;        Button(&#10;            onClick = { /* TODO: Apply filters and navigate */ },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(48.dp),&#10;            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFBB86FC).copy(alpha = 0.2f)), // Light purple&#10;            shape = RoundedCornerShape(24.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Continue&quot;,&#10;                color = Color.Black,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FilterDialog(&#10;    show: Boolean,&#10;    onDismiss: () -&gt; Unit,&#10;    onApply: (selectedInterest: String, location: String, distance: Float, ageRange: ClosedFloatingPointRange&lt;Float&gt;) -&gt; Unit&#10;) {&#10;    if (!show) return&#10;    var selectedInterest by remember { mutableStateOf(&quot;Girls&quot;) }&#10;    var location by remember { mutableStateOf(&quot;Chicago, USA&quot;) }&#10;    var distance by remember { mutableStateOf(40f) }&#10;    var ageRange by remember { mutableStateOf(20f..28f) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    onApply(selectedInterest, location, distance, ageRange)&#10;                    onDismiss()&#10;                },&#10;                modifier = Modifier.fillMaxWidth().height(48.dp),&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFBB86FC).copy(alpha = 0.2f)),&#10;                shape = RoundedCornerShape(24.dp)&#10;            ) {&#10;                Text(&quot;Continue&quot;, color = Color.Black, fontSize = 16.sp, fontWeight = FontWeight.Bold)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;, color = Color.Gray)&#10;            }&#10;        },&#10;        title = {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&quot;Filters&quot;, fontSize = 20.sp, fontWeight = FontWeight.Bold, color = Color.Black)&#10;                TextButton(onClick = {&#10;                    selectedInterest = &quot;Girls&quot;&#10;                    location = &quot;Chicago, USA&quot;&#10;                    distance = 40f&#10;                    ageRange = 20f..28f&#10;                }) {&#10;                    Text(&quot;Clear&quot;, color = Color(0xFFFF69B4), fontSize = 16.sp)&#10;                }&#10;            }&#10;        },&#10;        text = {&#10;            Column(modifier = Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {&#10;                // Interested in&#10;                Text(&quot;Interested in&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.Center) {&#10;                    FilterSegmentButton(&quot;Girls&quot;, selectedInterest == &quot;Girls&quot;) { selectedInterest = &quot;Girls&quot; }&#10;                    FilterSegmentButton(&quot;Boys&quot;, selectedInterest == &quot;Boys&quot;) { selectedInterest = &quot;Boys&quot; }&#10;                    FilterSegmentButton(&quot;Both&quot;, selectedInterest == &quot;Both&quot;) { selectedInterest = &quot;Both&quot; }&#10;                }&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Location&#10;                Text(&quot;Location&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                OutlinedTextField(&#10;                    value = location,&#10;                    onValueChange = { location = it },&#10;                    readOnly = false,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    trailingIcon = {&#10;                        Icon(imageVector = Icons.Default.ArrowForward, contentDescription = &quot;Select location&quot;, tint = Color(0xFFFF0000))&#10;                    },&#10;                    singleLine = true&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Distance&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Distance&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${distance.toInt()}km&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                Slider(&#10;                    value = distance,&#10;                    onValueChange = { distance = it },&#10;                    valueRange = 0f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = Color(0xFFBB86FC),&#10;                        activeTrackColor = Color(0xFFBB86FC),&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Age&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Age&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${ageRange.start.toInt()}-${ageRange.endInclusive.toInt()}&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                RangeSlider(&#10;                    value = ageRange,&#10;                    onValueChange = { ageRange = it },&#10;                    valueRange = 18f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = Color(0xFFBB86FC),&#10;                        activeTrackColor = Color(0xFFBB86FC),&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;            }&#10;        },&#10;        shape = RoundedCornerShape(24.dp),&#10;        containerColor = Color.White&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun FilterSegmentButton(text: String, selected: Boolean, onClick: () -&gt; Unit) {&#10;    Button(&#10;        onClick = onClick,&#10;        colors = ButtonDefaults.buttonColors(&#10;            containerColor = if (selected) Color(0xFFBB86FC) else Color.LightGray,&#10;            contentColor = if (selected) Color.White else Color.Black&#10;        ),&#10;        modifier = Modifier&#10;            .weight(1f)&#10;            .height(36.dp)&#10;            .padding(horizontal = 2.dp),&#10;        shape = RoundedCornerShape(8.dp)&#10;    ) {&#10;        Text(text)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/FavoriteScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/FavoriteScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material.icons.filled.ViewModule&#10;import androidx.compose.material.icons.filled.Chat&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.viewmodel.FavoriteViewModel&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.navigation.NavController&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.ui.components.BottomNavigationBar&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import coil.compose.AsyncImage&#10;import coil.request.ImageRequest&#10;import coil.ImageLoader&#10;import androidx.compose.ui.platform.LocalContext&#10;import com.example.dating.R&#10;import androidx.compose.ui.graphics.vector.rememberVectorPainter&#10;&#10;@Composable&#10;fun FavoriteScreen(navController: NavController, favoriteViewModel: FavoriteViewModel = hiltViewModel()) {&#10;    val usersState by favoriteViewModel.usersState.collectAsState()&#10;&#10;    Scaffold(&#10;        bottomBar = {&#10;            BottomNavigationBar(navController, 1)&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(AppColors.MainBackground)&#10;                .padding(paddingValues)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .verticalScroll(rememberScrollState())&#10;            ) {&#10;                FavoriteHeader(navController)&#10;                when (usersState) {&#10;                    is Resource.Loading -&gt; {&#10;                        Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                            CircularProgressIndicator()&#10;                        }&#10;                    }&#10;                    is Resource.Failure -&gt; {&#10;                        val error = (usersState as Resource.Failure).exception?.message ?: &quot;Unknown error&quot;&#10;                        Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                            Text(&quot;Error: $error&quot;, color = Color.Red)&#10;                        }&#10;                    }&#10;                    is Resource.Success -&gt; {&#10;                        val users = (usersState as Resource.Success&lt;List&lt;User&gt;&gt;).result&#10;                        if (users.isEmpty()) {&#10;                            Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                                Text(&quot;No users found&quot;, color = Color.Gray)&#10;                            }&#10;                        } else {&#10;                            Text(&quot;This is a list of people who have liked you.&quot;, fontSize = 16.sp, modifier = Modifier.padding(start = 32.dp, top = 8.dp, bottom = 8.dp, end = 16.dp), color = Color.Black)&#10;                            ProfileGrid(&#10;                                profiles = users,&#10;                                navController = navController,&#10;                                showDelete = false,&#10;                                moreAvailable = users.size &gt;= 9,&#10;                                onMoreClick = { /* TODO: Show all likedMeProfiles */ }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FavoriteHeader(navController: NavController) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(start = 48.dp, end = 48.dp, top = 40.dp, bottom = 30.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;&#10;        Text(&#10;            text = &quot;Matches&quot;,&#10;            color = Color.Black,&#10;            fontWeight = FontWeight.Bold,&#10;            fontSize = 30.sp&#10;        )&#10;&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileGrid(&#10;    profiles: List&lt;User&gt;,&#10;    navController: NavController,&#10;    showDelete: Boolean,&#10;    moreAvailable: Boolean,&#10;    onDelete: ((User) -&gt; Unit)? = null,&#10;    onMoreClick: () -&gt; Unit&#10;) {&#10;    val context = LocalContext.current&#10;    // Prefetch thumbnails (optional)&#10;    LaunchedEffect(profiles) {&#10;        val imageLoader = ImageLoader(context)&#10;        profiles.forEach { profile -&gt;&#10;            val url = profile.avatarUrl&#10;            if (!url.isNullOrBlank()) {&#10;                val request = ImageRequest.Builder(context)&#10;                    .data(url)&#10;                    .build()&#10;                imageLoader.enqueue(request)&#10;            }&#10;        }&#10;    }&#10;&#10;    LazyVerticalGrid(&#10;        columns = GridCells.Fixed(2),&#10;        modifier = Modifier.fillMaxWidth().padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        items(profiles) { profile -&gt;&#10;            Box(&#10;                modifier = Modifier&#10;                    .height(220.dp)&#10;                    .clip(RoundedCornerShape(24.dp))&#10;                    .clickable {&#10;                        navController.navigate(&quot;profile_display/${profile.uid}&quot;)&#10;                    }&#10;            ) {&#10;                val imageUrl = profile.avatarUrl&#10;                if (!imageUrl.isNullOrBlank()) {&#10;                    AsyncImage(&#10;                        model = ImageRequest.Builder(context)&#10;                            .data(imageUrl)&#10;                            .crossfade(true)&#10;                            .build(),&#10;                        contentDescription = &quot;Profile Background&quot;,&#10;                        contentScale = ContentScale.Crop,&#10;                        modifier = Modifier.matchParentSize().clip(RoundedCornerShape(24.dp)),&#10;                        placeholder = rememberVectorPainter(Icons.Default.Person),&#10;                        error = rememberVectorPainter(Icons.Default.Person),&#10;                        fallback = rememberVectorPainter(Icons.Default.Person)                    )&#10;                } else {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .matchParentSize()&#10;                            .background(Color(0xFF23222B))&#10;                            .clip(RoundedCornerShape(24.dp))&#10;                    ) {&#10;                        Image(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = &quot;Profile&quot;,&#10;                            modifier = Modifier&#10;                                .size(80.dp)&#10;                                .align(Alignment.TopCenter)&#10;                                .clip(CircleShape)&#10;                                .background(Color.Gray)&#10;                        )&#10;                    }&#10;                }&#10;                // Name, Age, Description&#10;                val name = (profile.firstName + &quot; &quot; + profile.lastName).trim().ifEmpty { &quot;Unknown&quot; }&#10;                val birthday = profile.birthday&#10;                val age = birthday?.let {&#10;                    try {&#10;                        val year = it.split(&quot;/&quot;).getOrNull(2)?.toInt() ?: throw Exception(&quot;Invalid date&quot;)&#10;                        val currentYear = java.util.Calendar.getInstance().get(java.util.Calendar.YEAR)&#10;                        (currentYear - year).toString()&#10;                    } catch (e: Exception) { &quot;?&quot; }&#10;                } ?: &quot;?&quot;&#10;                Column(&#10;                    modifier = Modifier&#10;                        .align(Alignment.BottomCenter)&#10;                        .fillMaxWidth()&#10;                        .background(Color.White.copy(alpha = 0.85f), RoundedCornerShape(bottomStart = 24.dp, bottomEnd = 24.dp))&#10;                        .padding(8.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&quot;$name, $age&quot;, fontWeight = FontWeight.Bold, fontSize = 16.sp, color = Color.Black, maxLines = 1)&#10;                }&#10;                if (showDelete &amp;&amp; onDelete != null) {&#10;                    IconButton(onClick = { onDelete(profile) }, modifier = Modifier.align(Alignment.TopEnd)) {&#10;                        Icon(Icons.Default.Close, contentDescription = &quot;Delete&quot;, tint = Color.Red)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material.icons.filled.ViewModule&#10;import androidx.compose.material.icons.filled.Chat&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.viewmodel.FavoriteViewModel&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.navigation.NavController&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.Resource&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.ui.components.BottomNavigationBar&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import coil.compose.AsyncImage&#10;import coil.request.ImageRequest&#10;import coil.ImageLoader&#10;import androidx.compose.ui.platform.LocalContext&#10;import com.example.dating.R&#10;import androidx.compose.ui.graphics.vector.rememberVectorPainter&#10;&#10;@Composable&#10;fun FavoriteScreen(navController: NavController, favoriteViewModel: FavoriteViewModel = hiltViewModel()) {&#10;    val usersState by favoriteViewModel.usersState.collectAsState()&#10;&#10;    Scaffold(&#10;        bottomBar = {&#10;            BottomNavigationBar(navController, 1)&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(AppColors.MainBackground)&#10;                .padding(paddingValues)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.fillMaxSize()&#10;            ) {&#10;                FavoriteHeader(navController)&#10;                when (usersState) {&#10;                    is Resource.Loading -&gt; {&#10;                        Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                            CircularProgressIndicator()&#10;                        }&#10;                    }&#10;                    is Resource.Failure -&gt; {&#10;                        val error = (usersState as Resource.Failure).exception?.message ?: &quot;Unknown error&quot;&#10;                        Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                            Text(&quot;Error: $error&quot;, color = Color.Red)&#10;                        }&#10;                    }&#10;                    is Resource.Success -&gt; {&#10;                        val users = (usersState as Resource.Success&lt;List&lt;User&gt;&gt;).result&#10;                        if (users.isEmpty()) {&#10;                            Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                                Text(&quot;No users found&quot;, color = Color.Gray)&#10;                            }&#10;                        } else {&#10;                            ProfileGrid(&#10;                                profiles = users,&#10;                                navController = navController,&#10;                                showDelete = false,&#10;                                moreAvailable = users.size &gt;= 9,&#10;                                onMoreClick = { /* TODO: Show all likedMeProfiles */ }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FavoriteHeader(navController: NavController) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(start = 48.dp, end = 48.dp, top = 40.dp, bottom = 30.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;&#10;        Text(&#10;            text = &quot;Matches&quot;,&#10;            color = Color.Black,&#10;            fontWeight = FontWeight.Bold,&#10;            fontSize = 30.sp&#10;        )&#10;&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileGrid(&#10;    profiles: List&lt;User&gt;,&#10;    navController: NavController,&#10;    showDelete: Boolean,&#10;    moreAvailable: Boolean,&#10;    onDelete: ((User) -&gt; Unit)? = null,&#10;    onMoreClick: () -&gt; Unit&#10;) {&#10;    val context = LocalContext.current&#10;    // Prefetch thumbnails (optional)&#10;    LaunchedEffect(profiles) {&#10;        val imageLoader = ImageLoader(context)&#10;        profiles.forEach { profile -&gt;&#10;            val url = profile.avatarUrl&#10;            if (!url.isNullOrBlank()) {&#10;                val request = ImageRequest.Builder(context)&#10;                    .data(url)&#10;                    .build()&#10;                imageLoader.enqueue(request)&#10;            }&#10;        }&#10;    }&#10;&#10;    LazyVerticalGrid(&#10;        columns = GridCells.Fixed(2),&#10;        modifier = Modifier.fillMaxWidth().padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        items(profiles) { profile -&gt;&#10;            Box(&#10;                modifier = Modifier&#10;                    .height(220.dp)&#10;                    .clip(RoundedCornerShape(24.dp))&#10;                    .clickable {&#10;                        navController.navigate(&quot;profile_display/${profile.uid}&quot;)&#10;                    }&#10;            ) {&#10;                val imageUrl = profile.avatarUrl&#10;                if (!imageUrl.isNullOrBlank()) {&#10;                    AsyncImage(&#10;                        model = ImageRequest.Builder(context)&#10;                            .data(imageUrl)&#10;                            .crossfade(true)&#10;                            .build(),&#10;                        contentDescription = &quot;Profile Background&quot;,&#10;                        contentScale = ContentScale.Crop,&#10;                        modifier = Modifier.matchParentSize().clip(RoundedCornerShape(24.dp)),&#10;                        placeholder = rememberVectorPainter(Icons.Default.Person),&#10;                        error = rememberVectorPainter(Icons.Default.Person),&#10;                        fallback = rememberVectorPainter(Icons.Default.Person)                    )&#10;                } else {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .matchParentSize()&#10;                            .background(Color(0xFF23222B))&#10;                            .clip(RoundedCornerShape(24.dp))&#10;                    ) {&#10;                        Image(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = &quot;Profile&quot;,&#10;                            modifier = Modifier&#10;                                .size(80.dp)&#10;                                .align(Alignment.TopCenter)&#10;                                .clip(CircleShape)&#10;                                .background(Color.Gray)&#10;                        )&#10;                    }&#10;                }&#10;                // Name, Age, Description&#10;                val name = (profile.firstName + &quot; &quot; + profile.lastName).trim().ifEmpty { &quot;Unknown&quot; }&#10;                val birthday = profile.birthday&#10;                val age = birthday?.let {&#10;                    try {&#10;                        val year = it.split(&quot;/&quot;).getOrNull(2)?.toInt() ?: throw Exception(&quot;Invalid date&quot;)&#10;                        val currentYear = java.util.Calendar.getInstance().get(java.util.Calendar.YEAR)&#10;                        (currentYear - year).toString()&#10;                    } catch (e: Exception) { &quot;?&quot; }&#10;                } ?: &quot;?&quot;&#10;                Column(&#10;                    modifier = Modifier&#10;                        .align(Alignment.BottomCenter)&#10;                        .fillMaxWidth()&#10;                        .background(Color.White.copy(alpha = 0.85f), RoundedCornerShape(bottomStart = 24.dp, bottomEnd = 24.dp))&#10;                        .padding(8.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&quot;$name, $age&quot;, fontWeight = FontWeight.Bold, fontSize = 16.sp, color = Color.Black, maxLines = 1)&#10;                }&#10;                if (showDelete &amp;&amp; onDelete != null) {&#10;                    IconButton(onClick = { onDelete(profile) }, modifier = Modifier.align(Alignment.TopEnd)) {&#10;                        Icon(Icons.Default.Close, contentDescription = &quot;Delete&quot;, tint = Color.Red)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.gestures.detectDragGestures&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.IntOffset&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.animation.core.Animatable&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import java.util.Calendar&#10;import androidx.compose.runtime.MutableState&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.util.lerp&#10;import androidx.compose.animation.core.Spring&#10;import androidx.compose.animation.core.spring&#10;import androidx.compose.material3.Scaffold&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.viewmodel.HomeViewModel&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.data.model.Resource&#10;import com.example.dating.data.model.User&#10;import com.example.dating.ui.components.BottomNavigationBar&#10;import androidx.compose.foundation.gestures.detectTapGestures&#10;import com.example.dating.navigation.Screen&#10;import coil.compose.rememberAsyncImagePainter&#10;&#10;@Composable&#10;fun HomeScreen(navController: NavController, homeViewModel: HomeViewModel = hiltViewModel()) {&#10;    val usersResource by homeViewModel.usersState.collectAsState()&#10;    val profileIndex = rememberSaveable { mutableStateOf(0) }&#10;&#10;    // Helper functions&#10;    fun handleProfileAction(isLike: Boolean, profileIndex: MutableState&lt;Int&gt;, profiles: List&lt;User&gt;, homeViewModel: HomeViewModel, navController: NavController) {&#10;        val currentProfile = profiles.getOrNull(profileIndex.value)&#10;        if (currentProfile != null) {&#10;            if (isLike) {&#10;                val likedUserId = currentProfile.uid&#10;                if (likedUserId != null) {&#10;                    homeViewModel.likeProfile(likedUserId)&#10;                    // Check for match and navigate if found&#10;                    val matchId = homeViewModel.matchFoundUserId.value&#10;                    if (matchId != null) {&#10;                        navController.navigate(&quot;match&quot;)&#10;                    }&#10;                }&#10;            }&#10;            profileIndex.value++&#10;        }&#10;    }&#10;    suspend fun animateSwipe(offsetX: Animatable&lt;Float, *&gt;, direction: Float) {&#10;        offsetX.animateTo(direction * 400f, tween(300))&#10;        offsetX.snapTo(0f)&#10;    }&#10;&#10;    // Observe matchFoundUserId and navigate if a match is found&#10;    val matchFoundUserId by homeViewModel.matchFoundUserId.collectAsState()&#10;    LaunchedEffect(matchFoundUserId) {&#10;        if (matchFoundUserId != null) {&#10;            navController.navigate(&quot;match/${matchFoundUserId}&quot;)&#10;            homeViewModel.resetMatchFoundUserId()&#10;        }&#10;    }&#10;&#10;&#10;    // Use Box to overlay BottomNavigationBar and keep it fixed at the bottom&#10;    Scaffold(&#10;        bottomBar = {&#10;            BottomNavigationBar(navController, 0)&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .background(AppColors.MainBackground)&#10;        ) {&#10;            HomeHeader(navController)&#10;            when (usersResource) {&#10;                is Resource.Loading -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxWidth().height(200.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        CircularProgressIndicator()&#10;                    }&#10;                }&#10;&#10;                is Resource.Failure -&gt; {&#10;                    val error =&#10;                        (usersResource as Resource.Failure).exception?.message ?: &quot;Unknown error&quot;&#10;                    Box(&#10;                        modifier = Modifier.fillMaxWidth().height(200.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Text(&quot;Error: $error&quot;, color = Color.Red)&#10;                    }&#10;                }&#10;&#10;                is Resource.Success -&gt; {&#10;                    val users = (usersResource as Resource.Success&lt;List&lt;User&gt;&gt;).result&#10;                    // You can use your ProfileCard and ActionButtons here, or a grid like FavoriteScreen&#10;                    Box(modifier = Modifier.weight(1f)) {&#10;                        ProfileCard(&#10;                            profiles = users,&#10;                            profileIndex = profileIndex,&#10;                            handleProfileAction = { isLike, profileIndex, profiles, homeViewModel -&gt;&#10;                                handleProfileAction(&#10;                                    isLike,&#10;                                    profileIndex,&#10;                                    profiles,&#10;                                    homeViewModel,&#10;                                    navController&#10;                                )&#10;                            },&#10;                            animateSwipe = ::animateSwipe,&#10;                            navController = navController // Pass navController here&#10;                        )&#10;                    }&#10;&#10;                    ActionButtons(&#10;                        profiles = users,&#10;                        profileIndex = profileIndex,&#10;                        handleProfileAction = { isLike, profileIndex, profiles, homeViewModel -&gt;&#10;                            handleProfileAction(&#10;                                isLike,&#10;                                profileIndex,&#10;                                profiles,&#10;                                homeViewModel,&#10;                                navController&#10;                            )&#10;                        },&#10;                        animateSwipe = ::animateSwipe&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;}&#10;&#10;@Composable&#10;fun HomeHeader(navController: NavController) {&#10;    val showFilterDialog = remember { mutableStateOf(false) }&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(start = 48.dp, end = 48.dp, top = 40.dp, bottom = 30.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;&#10;        Text(&#10;            text = &quot;Discover&quot;,&#10;            color = Color.Black,&#10;            fontWeight = FontWeight.Bold,&#10;            fontSize = 30.sp&#10;        )&#10;&#10;        IconButton(onClick = { showFilterDialog.value = true }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = &quot;Filter&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;    }&#10;    if (showFilterDialog.value) {&#10;        com.example.dating.ui.components.FilterDialog(&#10;            show = showFilterDialog.value,&#10;            onDismiss = { showFilterDialog.value = false },&#10;            onApply = { selectedInterest, location, distance, ageRange -&gt;&#10;                // TODO: Apply filter logic here&#10;                showFilterDialog.value = false&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileCard(&#10;    profiles: List&lt;User&gt;,&#10;    profileIndex: MutableState&lt;Int&gt;,&#10;    handleProfileAction: suspend (Boolean, MutableState&lt;Int&gt;, List&lt;User&gt;, HomeViewModel) -&gt; Unit,&#10;    animateSwipe: suspend (Animatable&lt;Float, *&gt;, Float) -&gt; Unit,&#10;    homeViewModel: HomeViewModel = viewModel(),&#10;    navController: NavController&#10;) {&#10;    val currentProfile = profiles.getOrNull(profileIndex.value)&#10;    if (currentProfile == null) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(900.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Text(&quot;No profiles available&quot;, color = Color.Gray)&#10;        }&#10;        return&#10;    }&#10;&#10;    val firstName = currentProfile.firstName ?: &quot;&quot;&#10;    val lastName = currentProfile.lastName ?: &quot;&quot;&#10;    val name = (firstName + &quot; &quot; + lastName).trim().ifEmpty { &quot;Unknown&quot; }&#10;    val birthday = currentProfile.birthday&#10;    Log.d(&quot;YearBug&quot;, &quot;Year: $birthday&quot;)&#10;&#10;    val age = birthday?.let {&#10;        try {&#10;            // Expecting format dd/MM/yyyy&#10;            val year = it.split(&quot;/&quot;).getOrNull(2)?.toInt() ?: throw Exception(&quot;Invalid date&quot;)&#10;            Log.d(&quot;YearBug&quot;, &quot;Year: $year&quot;)&#10;            val currentYear = Calendar.getInstance().get(Calendar.YEAR)&#10;            (currentYear - year).toString()&#10;        } catch (e: Exception) {&#10;            &quot;?&quot;&#10;        }&#10;    } ?: &quot;?&quot;&#10;    val description = currentProfile.description ?: &quot;No description&quot;&#10;    val distance = currentProfile.distance?.toString() ?: &quot;1 km&quot;&#10;&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;    val offsetY = remember { Animatable(0f) }&#10;    val isDragging = remember { mutableStateOf(false) }&#10;    val likeProgress = (offsetX.value / 200f).coerceIn(0f, 1f)&#10;    val dislikeProgress = (-offsetX.value / 200f).coerceIn(0f, 1f)&#10;    val iconAlpha = maxOf(likeProgress, dislikeProgress)&#10;    val iconScale = 1f + 0.3f * iconAlpha&#10;    val cardRotation = (offsetX.value / 15).coerceIn(-25f, 25f)&#10;    val threshold = 200f&#10;    val nextProfile = profiles.getOrNull(profileIndex.value + 1)&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(550.dp)&#10;            .padding(horizontal = 30.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Next card (subtle scale/alpha)&#10;        if (nextProfile != null) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(550.dp)&#10;                    .clip(RoundedCornerShape(32.dp))&#10;                    .background(Color(0xFF23222B))&#10;                    .graphicsLayer(&#10;                        scaleX = lerp(0.95f, 1f, iconAlpha),&#10;                        scaleY = lerp(0.95f, 1f, iconAlpha),&#10;                        alpha = lerp(0.7f, 1f, iconAlpha)&#10;                    )&#10;            ) {}&#10;        }&#10;        // Top card (draggable)&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(550.dp)&#10;                .offset { IntOffset(offsetX.value.toInt(), offsetY.value.toInt()) }&#10;                .rotate(cardRotation)&#10;                .clip(RoundedCornerShape(32.dp))&#10;                .background(Color(0xFF23222B))&#10;                .pointerInput(Unit) {&#10;                    detectTapGestures(&#10;                        onDoubleTap = {&#10;                            currentProfile.uid?.let { uid -&gt;&#10;                                Log.d(&quot;Navigation&quot;, &quot;Double tap detected, navigating to user profile with uid: $uid&quot;)&#10;                                navController.navigate(Screen.UserProfile.route(uid))&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;                .pointerInput(profileIndex.value) {&#10;                    detectDragGestures(&#10;                        onDragStart = { isDragging.value = true },&#10;                        onDragEnd = {&#10;                            isDragging.value = false&#10;                            scope.launch {&#10;                                when {&#10;                                    offsetX.value &gt; threshold -&gt; {&#10;                                        handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                                        animateSwipe(offsetX, 1f)&#10;                                        offsetY.snapTo(0f)&#10;                                    }&#10;                                    offsetX.value &lt; -threshold -&gt; {&#10;                                        handleProfileAction(false, profileIndex, profiles, homeViewModel)&#10;                                        animateSwipe(offsetX, -1f)&#10;                                        offsetY.snapTo(0f)&#10;                                    }&#10;                                    else -&gt; {&#10;                                        offsetX.animateTo(0f, spring(stiffness = Spring.StiffnessMedium))&#10;                                        offsetY.animateTo(0f, spring(stiffness = Spring.StiffnessMedium))&#10;                                    }&#10;                                }&#10;                            }&#10;                        },&#10;                        onDrag = { change, dragAmount -&gt;&#10;                            scope.launch {&#10;                                offsetX.snapTo(offsetX.value + dragAmount.x)&#10;                                offsetY.snapTo(offsetY.value + dragAmount.y)&#10;                            }&#10;                        }&#10;                    )&#10;                },&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            // Portrait Image (placeholder)&#10;            if (currentProfile.avatarUrl != null &amp;&amp; currentProfile.avatarUrl.isNotBlank()) {&#10;                Image(&#10;                    painter = rememberAsyncImagePainter(model = currentProfile.avatarUrl),&#10;                    contentDescription = &quot;Profile Image&quot;,&#10;                    contentScale = ContentScale.Crop,&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .clip(RoundedCornerShape(32.dp))&#10;                )&#10;            } else {&#10;                Image(&#10;                    imageVector = Icons.Default.Person,&#10;                    contentDescription = &quot;Profile Image&quot;,&#10;                    contentScale = ContentScale.Crop,&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .clip(RoundedCornerShape(32.dp))&#10;                )&#10;            }&#10;            // Distance Label&#10;            Box(&#10;                modifier = Modifier&#10;                    .padding(16.dp)&#10;                    .align(Alignment.TopStart)&#10;                    .background(Color.White.copy(alpha = 0.85f), RoundedCornerShape(50))&#10;                    .padding(horizontal = 16.dp, vertical = 6.dp)&#10;            ) {&#10;                Text(distance, color = Color.Black, fontWeight = FontWeight.Bold, fontSize = 14.sp)&#10;            }&#10;            // Gradient Overlay&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(120.dp)&#10;                    .align(Alignment.BottomCenter)&#10;                    .background(&#10;                        Brush.verticalGradient(&#10;                            colors = listOf(Color.Transparent, Color.Black),&#10;                            startY = 0f,&#10;                            endY = 300f&#10;                        ),&#10;                        shape = RoundedCornerShape(bottomStart = 32.dp, bottomEnd = 32.dp)&#10;                    )&#10;            )&#10;            // Name, Age, Description&#10;            Column(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.Center,&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;$name, $age&quot;,&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 28.sp,&#10;                    maxLines = 1,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;                Text(&#10;                    text = description,&#10;                    color = Color(0xFFCCCCCC),&#10;                    fontSize = 16.sp,&#10;                    maxLines = 1,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;            // Like/Dislike Icon Overlay&#10;            if (likeProgress &gt; 0.05f) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Favorite,&#10;                    contentDescription = &quot;Like&quot;,&#10;                    tint = Color.Red.copy(alpha = iconAlpha),&#10;                    modifier = Modifier&#10;                        .size((96f * iconScale).dp)&#10;                        .align(Alignment.Center)&#10;                )&#10;            } else if (dislikeProgress &gt; 0.05f) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Close,&#10;                    contentDescription = &quot;Dislike&quot;,&#10;                    tint = Color.White.copy(alpha = iconAlpha),&#10;                    modifier = Modifier&#10;                        .size((96f * iconScale).dp)&#10;                        .align(Alignment.Center)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionButtons(&#10;    profiles: List&lt;User&gt;,&#10;    profileIndex: MutableState&lt;Int&gt;,&#10;    handleProfileAction: suspend (Boolean, MutableState&lt;Int&gt;, List&lt;User&gt;, HomeViewModel) -&gt; Unit,&#10;    animateSwipe: suspend (Animatable&lt;Float, *&gt;, Float) -&gt; Unit,&#10;    homeViewModel: HomeViewModel = viewModel()&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 24.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(25.dp, Alignment.CenterHorizontally),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        // Dislike Button&#10;        ActionButton(&#10;            icon = Icons.Default.Close,&#10;            background = Color.White,&#10;            iconTint = Color.Black,&#10;            size = 75.dp,&#10;            shadow = 8.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(false, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, -1f) // Pass direction explicitly&#10;            }&#10;        }&#10;        // Super Like Button&#10;        ActionButton(&#10;            icon = Icons.Default.Favorite,&#10;            background = AppColors.Text_Pink,&#10;            iconTint = Color.White,&#10;            size = 95.dp,&#10;            shadow = 12.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;            }&#10;        }&#10;        // Like Button (calls a different method for clarity)&#10;        ActionButton(&#10;            icon = Icons.Default.Star,&#10;            background = Color(0xFF4A154B),&#10;            iconTint = Color.White,&#10;            size = 75.dp,&#10;            shadow = 8.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionButton(&#10;    icon: ImageVector,&#10;    background: Color,&#10;    iconTint: Color,&#10;    size: Dp,&#10;    shadow: Dp,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .size(size)&#10;            .shadow(shadow, CircleShape)&#10;            .clip(CircleShape)&#10;            .background(background)&#10;            .clickable { onClick() },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = iconTint,&#10;            modifier = Modifier.size(size * 0.5f)&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.gestures.detectDragGestures&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.IntOffset&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.animation.core.Animatable&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import java.util.Calendar&#10;import androidx.compose.runtime.MutableState&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.util.lerp&#10;import androidx.compose.animation.core.Spring&#10;import androidx.compose.animation.core.spring&#10;import androidx.compose.material3.Scaffold&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.viewmodel.HomeViewModel&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.data.model.Resource&#10;import com.example.dating.data.model.User&#10;import com.example.dating.ui.components.BottomNavigationBar&#10;import androidx.compose.foundation.gestures.detectTapGestures&#10;import com.example.dating.navigation.Screen&#10;import coil.compose.rememberAsyncImagePainter&#10;&#10;@Composable&#10;fun HomeScreen(navController: NavController, homeViewModel: HomeViewModel = hiltViewModel()) {&#10;    val usersResource by homeViewModel.usersState.collectAsState()&#10;    val profileIndex = rememberSaveable { mutableStateOf(0) }&#10;&#10;    // Helper functions&#10;    fun handleProfileAction(isLike: Boolean, profileIndex: MutableState&lt;Int&gt;, profiles: List&lt;User&gt;, homeViewModel: HomeViewModel, navController: NavController) {&#10;        val currentProfile = profiles.getOrNull(profileIndex.value)&#10;        if (currentProfile != null) {&#10;            if (isLike) {&#10;                val likedUserId = currentProfile.uid&#10;                if (likedUserId != null) {&#10;                    homeViewModel.likeProfile(likedUserId)&#10;                    // Check for match and navigate if found&#10;                    val matchId = homeViewModel.matchFoundUserId.value&#10;                    if (matchId != null) {&#10;                        navController.navigate(&quot;match&quot;)&#10;                    }&#10;                }&#10;            }&#10;            profileIndex.value++&#10;        }&#10;    }&#10;    suspend fun animateSwipe(offsetX: Animatable&lt;Float, *&gt;, direction: Float) {&#10;        offsetX.animateTo(direction * 400f, tween(300))&#10;        offsetX.snapTo(0f)&#10;    }&#10;&#10;    // Observe matchFoundUserId and navigate if a match is found&#10;    val matchFoundUserId by homeViewModel.matchFoundUserId.collectAsState()&#10;    LaunchedEffect(matchFoundUserId) {&#10;        if (matchFoundUserId != null) {&#10;            navController.navigate(&quot;match/${matchFoundUserId}&quot;)&#10;            homeViewModel.resetMatchFoundUserId()&#10;        }&#10;    }&#10;&#10;&#10;    // Use Box to overlay BottomNavigationBar and keep it fixed at the bottom&#10;    Scaffold(&#10;        bottomBar = {&#10;            BottomNavigationBar(navController, 0)&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .background(AppColors.MainBackground)&#10;        ) {&#10;            HomeHeader(navController)&#10;            when (usersResource) {&#10;                is Resource.Loading -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxWidth().height(200.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        CircularProgressIndicator()&#10;                    }&#10;                }&#10;&#10;                is Resource.Failure -&gt; {&#10;                    val error =&#10;                        (usersResource as Resource.Failure).exception?.message ?: &quot;Unknown error&quot;&#10;                    Box(&#10;                        modifier = Modifier.fillMaxWidth().height(200.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Text(&quot;Error: $error&quot;, color = Color.Red)&#10;                    }&#10;                }&#10;&#10;                is Resource.Success -&gt; {&#10;                    val users = (usersResource as Resource.Success&lt;List&lt;User&gt;&gt;).result&#10;                    // You can use your ProfileCard and ActionButtons here, or a grid like FavoriteScreen&#10;                    Box(modifier = Modifier.weight(1f)) {&#10;                        ProfileCard(&#10;                            profiles = users,&#10;                            profileIndex = profileIndex,&#10;                            handleProfileAction = { isLike, profileIndex, profiles, homeViewModel -&gt;&#10;                                handleProfileAction(&#10;                                    isLike,&#10;                                    profileIndex,&#10;                                    profiles,&#10;                                    homeViewModel,&#10;                                    navController&#10;                                )&#10;                            },&#10;                            animateSwipe = ::animateSwipe,&#10;                            navController = navController // Pass navController here&#10;                        )&#10;                    }&#10;&#10;                    ActionButtons(&#10;                        profiles = users,&#10;                        profileIndex = profileIndex,&#10;                        handleProfileAction = { isLike, profileIndex, profiles, homeViewModel -&gt;&#10;                            handleProfileAction(&#10;                                isLike,&#10;                                profileIndex,&#10;                                profiles,&#10;                                homeViewModel,&#10;                                navController&#10;                            )&#10;                        },&#10;                        animateSwipe = ::animateSwipe&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;}&#10;&#10;@Composable&#10;fun HomeHeader(navController: NavController) {&#10;    val showFilterDialog = remember { mutableStateOf(false) }&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(start = 48.dp, end = 48.dp, top = 40.dp, bottom = 30.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;&#10;        Text(&#10;            text = &quot;Discover&quot;,&#10;            color = Color.Black,&#10;            fontWeight = FontWeight.Bold,&#10;            fontSize = 30.sp&#10;        )&#10;&#10;        IconButton(onClick = { showFilterDialog.value = true }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = &quot;Filter&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;    }&#10;    if (showFilterDialog.value) {&#10;        com.example.dating.ui.components.FilterDialog(&#10;            show = showFilterDialog.value,&#10;            onDismiss = { showFilterDialog.value = false },&#10;            onApply = { selectedInterest, location, distance, ageRange -&gt;&#10;                // TODO: Apply filter logic here&#10;                showFilterDialog.value = false&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileCard(&#10;    profiles: List&lt;User&gt;,&#10;    profileIndex: MutableState&lt;Int&gt;,&#10;    handleProfileAction: suspend (Boolean, MutableState&lt;Int&gt;, List&lt;User&gt;, HomeViewModel) -&gt; Unit,&#10;    animateSwipe: suspend (Animatable&lt;Float, *&gt;, Float) -&gt; Unit,&#10;    homeViewModel: HomeViewModel = viewModel(),&#10;    navController: NavController&#10;) {&#10;    val currentProfile = profiles.getOrNull(profileIndex.value)&#10;    val nextProfile = profiles.getOrNull(profileIndex.value + 1)&#10;    if (currentProfile == null &amp;&amp; nextProfile == null) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(900.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Text(&quot;No profiles available&quot;, color = Color.Gray)&#10;        }&#10;        return&#10;    }&#10;&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;    val offsetY = remember { Animatable(0f) }&#10;    val isDragging = remember { mutableStateOf(false) }&#10;    val likeProgress = (offsetX.value / 200f).coerceIn(0f, 1f)&#10;    val dislikeProgress = (-offsetX.value / 200f).coerceIn(0f, 1f)&#10;    val iconAlpha = maxOf(likeProgress, dislikeProgress)&#10;    val iconScale = 1f + 0.3f * iconAlpha&#10;    val cardRotation = (offsetX.value / 15).coerceIn(-25f, 25f)&#10;    val threshold = 200f&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(550.dp)&#10;            .padding(horizontal = 30.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Render next card first (always present if available)&#10;        if (nextProfile != null) {&#10;            ProfileCardContent(&#10;                profile = nextProfile,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(550.dp)&#10;                    .clip(RoundedCornerShape(32.dp))&#10;                    .background(Color(0xFF23222B))&#10;                    .graphicsLayer(&#10;                        scaleX = lerp(0.95f, 1f, iconAlpha),&#10;                        scaleY = lerp(0.95f, 1f, iconAlpha),&#10;                        alpha = lerp(0.7f, 1f, iconAlpha)&#10;                    ),&#10;                navController = navController&#10;            )&#10;        }&#10;        // Top card (draggable, always present if available)&#10;        if (currentProfile != null) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(550.dp)&#10;                    .offset { IntOffset(offsetX.value.toInt(), offsetY.value.toInt()) }&#10;                    .rotate(cardRotation)&#10;                    .clip(RoundedCornerShape(32.dp))&#10;                    .background(Color(0xFF23222B))&#10;                    .pointerInput(Unit) {&#10;                        detectTapGestures(&#10;                            onDoubleTap = {&#10;                                currentProfile.uid?.let { uid -&gt;&#10;                                    navController.navigate(Screen.UserProfile.route(uid))&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                    .pointerInput(profileIndex.value) {&#10;                        detectDragGestures(&#10;                            onDragStart = { isDragging.value = true },&#10;                            onDragEnd = {&#10;                                isDragging.value = false&#10;                                scope.launch {&#10;                                    when {&#10;                                        offsetX.value &gt; threshold -&gt; {&#10;                                            handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                                            animateSwipe(offsetX, 1f)&#10;                                            offsetY.snapTo(0f)&#10;                                        }&#10;                                        offsetX.value &lt; -threshold -&gt; {&#10;                                            handleProfileAction(false, profileIndex, profiles, homeViewModel)&#10;                                            animateSwipe(offsetX, -1f)&#10;                                            offsetY.snapTo(0f)&#10;                                        }&#10;                                        else -&gt; {&#10;                                            offsetX.animateTo(0f, spring(stiffness = Spring.StiffnessMedium))&#10;                                            offsetY.animateTo(0f, spring(stiffness = Spring.StiffnessMedium))&#10;                                        }&#10;                                    }&#10;                                }&#10;                            },&#10;                            onDrag = { change, dragAmount -&gt;&#10;                                scope.launch {&#10;                                    offsetX.snapTo(offsetX.value + dragAmount.x)&#10;                                    offsetY.snapTo(offsetY.value + dragAmount.y)&#10;                                }&#10;                            }&#10;                        )&#10;                    },&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                ProfileCardContent(&#10;                    profile = currentProfile,&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    navController = navController,&#10;                    likeProgress = likeProgress,&#10;                    dislikeProgress = dislikeProgress,&#10;                    iconAlpha = iconAlpha,&#10;                    iconScale = iconScale&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ProfileCardContent(&#10;    profile: User?,&#10;    modifier: Modifier = Modifier,&#10;    navController: NavController,&#10;    likeProgress: Float = 0f,&#10;    dislikeProgress: Float = 0f,&#10;    iconAlpha: Float = 0f,&#10;    iconScale: Float = 1f&#10;) {&#10;    if (profile == null) return&#10;    val firstName = profile.firstName ?: &quot;&quot;&#10;    val lastName = profile.lastName ?: &quot;&quot;&#10;    val name = (firstName + &quot; &quot; + lastName).trim().ifEmpty { &quot;Unknown&quot; }&#10;    val birthday = profile.birthday&#10;    val age = birthday?.let {&#10;        try {&#10;            val year = it.split(&quot;/&quot;).getOrNull(2)?.toInt() ?: throw Exception(&quot;Invalid date&quot;)&#10;            val currentYear = Calendar.getInstance().get(Calendar.YEAR)&#10;            (currentYear - year).toString()&#10;        } catch (e: Exception) {&#10;            &quot;?&quot;&#10;        }&#10;    } ?: &quot;?&quot;&#10;    val description = profile.description ?: &quot;No description&quot;&#10;    val distance = profile.distance?.toString() ?: &quot;1 km&quot;&#10;&#10;    Box(modifier = modifier) {&#10;        if (profile.avatarUrl != null &amp;&amp; profile.avatarUrl.isNotBlank()) {&#10;            Image(&#10;                painter = rememberAsyncImagePainter(model = profile.avatarUrl),&#10;                contentDescription = &quot;Profile Image&quot;,&#10;                contentScale = ContentScale.Crop,&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .clip(RoundedCornerShape(32.dp))&#10;            )&#10;        } else {&#10;            Image(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile Image&quot;,&#10;                contentScale = ContentScale.Crop,&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .clip(RoundedCornerShape(32.dp))&#10;            )&#10;        }&#10;        Box(&#10;            modifier = Modifier&#10;                .padding(16.dp)&#10;                .align(Alignment.TopStart)&#10;                .background(Color.White.copy(alpha = 0.85f), RoundedCornerShape(50))&#10;                .padding(horizontal = 16.dp, vertical = 6.dp)&#10;        ) {&#10;            Text(distance, color = Color.Black, fontWeight = FontWeight.Bold, fontSize = 14.sp)&#10;        }&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(120.dp)&#10;                .align(Alignment.BottomCenter)&#10;                .background(&#10;                    Brush.verticalGradient(&#10;                        colors = listOf(Color.Transparent, Color.Black),&#10;                        startY = 0f,&#10;                        endY = 300f&#10;                    ),&#10;                    shape = RoundedCornerShape(bottomStart = 32.dp, bottomEnd = 32.dp)&#10;                )&#10;        )&#10;        Column(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.Center,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;$name, $age&quot;,&#10;                color = Color.White,&#10;                fontWeight = FontWeight.Bold,&#10;                fontSize = 28.sp,&#10;                maxLines = 1,&#10;                modifier = Modifier.fillMaxWidth(),&#10;                textAlign = TextAlign.Center&#10;            )&#10;            Text(&#10;                text = description,&#10;                color = Color(0xFFCCCCCC),&#10;                fontSize = 16.sp,&#10;                maxLines = 1,&#10;                modifier = Modifier.fillMaxWidth(),&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;        if (likeProgress &gt; 0.05f) {&#10;            Icon(&#10;                imageVector = Icons.Default.Favorite,&#10;                contentDescription = &quot;Like&quot;,&#10;                tint = Color.Red.copy(alpha = iconAlpha),&#10;                modifier = Modifier&#10;                    .size((96f * iconScale).dp)&#10;                    .align(Alignment.Center)&#10;            )&#10;        } else if (dislikeProgress &gt; 0.05f) {&#10;            Icon(&#10;                imageVector = Icons.Default.Close,&#10;                contentDescription = &quot;Dislike&quot;,&#10;                tint = Color.White.copy(alpha = iconAlpha),&#10;                modifier = Modifier&#10;                    .size((96f * iconScale).dp)&#10;                    .align(Alignment.Center)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionButtons(&#10;    profiles: List&lt;User&gt;,&#10;    profileIndex: MutableState&lt;Int&gt;,&#10;    handleProfileAction: suspend (Boolean, MutableState&lt;Int&gt;, List&lt;User&gt;, HomeViewModel) -&gt; Unit,&#10;    animateSwipe: suspend (Animatable&lt;Float, *&gt;, Float) -&gt; Unit,&#10;    homeViewModel: HomeViewModel = viewModel()&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 24.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(25.dp, Alignment.CenterHorizontally),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        // Dislike Button&#10;        ActionButton(&#10;            icon = Icons.Default.Close,&#10;            background = Color.White,&#10;            iconTint = Color.Black,&#10;            size = 75.dp,&#10;            shadow = 8.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(false, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, -1f) // Pass direction explicitly&#10;            }&#10;        }&#10;        // Super Like Button&#10;        ActionButton(&#10;            icon = Icons.Default.Favorite,&#10;            background = AppColors.Text_Pink,&#10;            iconTint = Color.White,&#10;            size = 95.dp,&#10;            shadow = 12.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;            }&#10;        }&#10;        // Like Button (calls a different method for clarity)&#10;        ActionButton(&#10;            icon = Icons.Default.Star,&#10;            background = Color(0xFF4A154B),&#10;            iconTint = Color.White,&#10;            size = 75.dp,&#10;            shadow = 8.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionButton(&#10;    icon: ImageVector,&#10;    background: Color,&#10;    iconTint: Color,&#10;    size: Dp,&#10;    shadow: Dp,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .size(size)&#10;            .shadow(shadow, CircleShape)&#10;            .clip(CircleShape)&#10;            .background(background)&#10;            .clickable { onClick() },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = iconTint,&#10;            modifier = Modifier.size(size * 0.5f)&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class HomeViewModel : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val _addFavoriteState = MutableStateFlow&lt;Result&lt;Unit&gt;?&gt;(null)&#10;    val addFavoriteState: StateFlow&lt;Result&lt;Unit&gt;?&gt; = _addFavoriteState&#10;&#10;    fun addFavorite(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        val favorite = hashMapOf(&#10;            &quot;likerId&quot; to likerId,&#10;            &quot;likedId&quot; to likedId,&#10;            &quot;timestamp&quot; to Timestamp.now()&#10;        )&#10;        viewModelScope.launch {&#10;            try {&#10;                db.collection(&quot;favorites&quot;).add(favorite)&#10;                _addFavoriteState.value = Result.success(Unit)&#10;            } catch (e: Exception) {&#10;                _addFavoriteState.value = Result.failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearAddFavoriteState() {&#10;        _addFavoriteState.value = null&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/profile/ProfileScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/profile/ProfileScreen.kt" />
              <option name="originalContent" value="// ui/profile/ProfileDetailsScreen.kt&#10;package com.example.dating.ui.profile&#10;&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.CameraAlt&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import coil.compose.AsyncImage&#10;import com.example.dating.ui.components.CustomCalendarDialog&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;import com.example.dating.ui.theme.AppColors&#10;import com.example.dating.R&#10;import androidx.compose.ui.res.painterResource&#10;import com.example.dating.viewmodel.ProfileViewModel&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.data.model.User&#10;@Composable&#10;fun ProfileScreen(navController: NavController, viewModel: ProfileViewModel = hiltViewModel()) {&#10;    val userState by viewModel.user.collectAsState()&#10;&#10;    var firstName by remember { mutableStateOf(userState?.firstName ?: &quot;&quot;) }&#10;    var lastName by remember { mutableStateOf(userState?.lastName ?: &quot;&quot;) }&#10;    var birthday by remember { mutableStateOf(userState?.birthday?.let { SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(it) } ?: null) }&#10;    var selectedImageUrl by remember { mutableStateOf&lt;android.net.Uri?&gt;(null) }&#10;    var showCalendar by remember { mutableStateOf(false) }&#10;    var isSaving by remember { mutableStateOf(false) }&#10;    var saveError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    // Image picker launcher&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri -&gt;&#10;        selectedImageUrl = uri&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;            .padding(horizontal = 24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Header with Skip button&#10;        Box(modifier = Modifier.fillMaxWidth()) {&#10;            // Back&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(RoundedCornerShape(12.dp))&#10;                    .background(Color.White)&#10;                    .clickable { navController.popBackStack() }&#10;                    .align(Alignment.CenterStart),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(Icons.Default.ArrowBack, contentDescription = &quot;Back&quot;, tint = AppColors.Text_Pink,)&#10;            }&#10;&#10;            // Skip&#10;            Text(&#10;                text = &quot;Skip&quot;,&#10;                color = AppColors.Text_Pink,&#10;                fontSize = 16.sp,&#10;                modifier = Modifier&#10;                    .align(Alignment.CenterEnd)&#10;                    .clickable { navController.navigate(&quot;gender_select&quot;) }&#10;            )&#10;        }&#10;&#10;&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // Title&#10;        Text(&#10;            text = &quot;Profile details&quot;,&#10;            fontSize = 28.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = AppColors.Text_LightBlack&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(48.dp))&#10;&#10;        // Avatar Section với Icons.Person&#10;        Box(&#10;            contentAlignment = Alignment.BottomEnd&#10;        ) {&#10;            // Main avatar circle&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(120.dp)&#10;                    .clip(CircleShape)&#10;                    .background(Color(0xFFE0E0E0))&#10;                    .clickable { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                if (selectedImageUrl != null) {&#10;                    AsyncImage(&#10;                        model = selectedImageUrl,&#10;                        contentDescription = &quot;Profile Image&quot;,&#10;                        modifier = Modifier&#10;                            .size(120.dp)&#10;                            .clip(CircleShape),&#10;                        contentScale = ContentScale.Crop&#10;                    )&#10;                } else {&#10;                    // Default avatar - sử dụng Icons.Default.Person&#10;                    Icon(&#10;                        imageVector = Icons.Default.Person,&#10;                        contentDescription = &quot;Default Avatar&quot;,&#10;                        modifier = Modifier.size(60.dp),&#10;                        tint = Color.Gray&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Camera icon for editing&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(36.dp)&#10;                    .clip(CircleShape)&#10;                    .background(AppColors.Main_Secondary1)&#10;                    .clickable { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.CameraAlt,&#10;                    contentDescription = &quot;Change Photo&quot;,&#10;                    tint = AppColors.Main_Primary,&#10;                    modifier = Modifier.size(20.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(48.dp))&#10;&#10;        // First Name Field&#10;        OutlinedTextField(&#10;            value = firstName,&#10;            onValueChange = { firstName = it },&#10;            label = { Text(&quot;First name&quot;) },&#10;            singleLine = true,&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = OutlinedTextFieldDefaults.colors(&#10;                focusedBorderColor = AppColors.Text_Pink,&#10;                unfocusedBorderColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Last Name Field&#10;        OutlinedTextField(&#10;            value = lastName,&#10;            onValueChange = { lastName = it },&#10;            label = { Text(&quot;Last name&quot;) },&#10;            singleLine = true,&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = OutlinedTextFieldDefaults.colors(&#10;                focusedBorderColor = AppColors.Text_Pink,&#10;                unfocusedBorderColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Birthday Button&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .clickable { showCalendar = true },&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = CardDefaults.cardColors(containerColor = Color(0xFFF8E8F5))&#10;        ) {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    painter = painterResource(id = R.drawable.ic_profile_calender),&#10;                    contentDescription = &quot;Calendar&quot;,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;&#10;                Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                Text(&#10;                    text = birthday?.let {&#10;                        SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()).format(it)&#10;                    } ?: &quot;Choose birthday date&quot;,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = AppColors.Main_Primary&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.weight(1f))&#10;&#10;        // Confirm Button&#10;        Button(&#10;            onClick = {&#10;                isSaving = true&#10;                saveError = null&#10;                val user = viewModel.user.value?.copy(&#10;                    firstName = firstName,&#10;                    lastName = lastName,&#10;                    birthday = birthday?.let { SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()).format(it) },&#10;                ) ?: User(&#10;                    uid = &quot;&quot;, // Set the correct uid if available&#10;                    firstName = firstName,&#10;                    lastName = lastName,&#10;                    birthday = birthday?.let { SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()).format(it) }&#10;                )&#10;                viewModel.updateProfile(user)&#10;                isSaving = false&#10;                navController.navigate(&quot;gender_select&quot;)&#10;            },&#10;            enabled = firstName.isNotBlank() &amp;&amp; lastName.isNotBlank() &amp;&amp; birthday != null &amp;&amp; !isSaving,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(56.dp),&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = AppColors.Main_Secondary1,&#10;                disabledContainerColor = Color.LightGray&#10;            )&#10;        ) {&#10;            if (isSaving) {&#10;                CircularProgressIndicator(modifier = Modifier.size(24.dp), color = AppColors.Main_Primary)&#10;            } else {&#10;                Text(&#10;                    text = &quot;Confirm&quot;,&#10;                    color = AppColors.Main_Primary,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;        }&#10;        if (saveError != null) {&#10;            Text(&#10;                text = saveError ?: &quot;&quot;,&#10;                color = Color.Red,&#10;                modifier = Modifier.padding(top = 8.dp)&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;    }&#10;&#10;    // Custom Calendar Dialog&#10;    if (showCalendar) {&#10;        CustomCalendarDialog(&#10;            onDateSelected = { selectedDate -&gt;&#10;                birthday = selectedDate&#10;                showCalendar = false&#10;            },&#10;            onDismiss = { showCalendar = false }&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="// ui/profile/ProfileDetailsScreen.kt&#10;package com.example.dating.ui.profile&#10;&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.CameraAlt&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import coil.compose.AsyncImage&#10;import com.example.dating.ui.components.CustomCalendarDialog&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;import com.example.dating.ui.theme.AppColors&#10;import com.example.dating.R&#10;import androidx.compose.ui.res.painterResource&#10;import com.example.dating.viewmodel.ProfileViewModel&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.data.model.User&#10;@Composable&#10;fun ProfileScreen(navController: NavController, viewModel: ProfileViewModel = hiltViewModel()) {&#10;    val userState by viewModel.user.collectAsState()&#10;&#10;    var firstName by remember { mutableStateOf(userState?.firstName ?: &quot;&quot;) }&#10;    var lastName by remember { mutableStateOf(userState?.lastName ?: &quot;&quot;) }&#10;    var birthday by remember { mutableStateOf(userState?.birthday?.let { SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(it) } ?: null) }&#10;    var selectedImageUrl by remember { mutableStateOf&lt;android.net.Uri?&gt;(null) }&#10;    var showCalendar by remember { mutableStateOf(false) }&#10;    var isSaving by remember { mutableStateOf(false) }&#10;    var saveError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    // Image picker launcher&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri -&gt;&#10;        selectedImageUrl = uri&#10;        if (uri != null) {&#10;            viewModel.uploadAvatar(uri)&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;            .padding(horizontal = 24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Header with Skip button&#10;        Box(modifier = Modifier.fillMaxWidth()) {&#10;            // Back&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(RoundedCornerShape(12.dp))&#10;                    .background(Color.White)&#10;                    .clickable { navController.popBackStack() }&#10;                    .align(Alignment.CenterStart),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(Icons.Default.ArrowBack, contentDescription = &quot;Back&quot;, tint = AppColors.Text_Pink,)&#10;            }&#10;&#10;            // Skip&#10;            Text(&#10;                text = &quot;Skip&quot;,&#10;                color = AppColors.Text_Pink,&#10;                fontSize = 16.sp,&#10;                modifier = Modifier&#10;                    .align(Alignment.CenterEnd)&#10;                    .clickable { navController.navigate(&quot;gender_select&quot;) }&#10;            )&#10;        }&#10;&#10;&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // Title&#10;        Text(&#10;            text = &quot;Profile details&quot;,&#10;            fontSize = 28.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = AppColors.Text_LightBlack&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(48.dp))&#10;&#10;        // Avatar Section với Icons.Person&#10;        Box(&#10;            contentAlignment = Alignment.BottomEnd&#10;        ) {&#10;            // Main avatar circle&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(120.dp)&#10;                    .clip(CircleShape)&#10;                    .background(Color(0xFFE0E0E0))&#10;                    .clickable { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                if (selectedImageUrl != null) {&#10;                    AsyncImage(&#10;                        model = selectedImageUrl,&#10;                        contentDescription = &quot;Profile Image&quot;,&#10;                        modifier = Modifier&#10;                            .size(120.dp)&#10;                            .clip(CircleShape),&#10;                        contentScale = ContentScale.Crop&#10;                    )&#10;                } else {&#10;                    // Default avatar - sử dụng Icons.Default.Person&#10;                    Icon(&#10;                        imageVector = Icons.Default.Person,&#10;                        contentDescription = &quot;Default Avatar&quot;,&#10;                        modifier = Modifier.size(60.dp),&#10;                        tint = Color.Gray&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Camera icon for editing&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(36.dp)&#10;                    .clip(CircleShape)&#10;                    .background(AppColors.Main_Secondary1)&#10;                    .clickable { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.CameraAlt,&#10;                    contentDescription = &quot;Change Photo&quot;,&#10;                    tint = AppColors.Main_Primary,&#10;                    modifier = Modifier.size(20.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(48.dp))&#10;&#10;        // First Name Field&#10;        OutlinedTextField(&#10;            value = firstName,&#10;            onValueChange = { firstName = it },&#10;            label = { Text(&quot;First name&quot;) },&#10;            singleLine = true,&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = OutlinedTextFieldDefaults.colors(&#10;                focusedBorderColor = AppColors.Text_Pink,&#10;                unfocusedBorderColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Last Name Field&#10;        OutlinedTextField(&#10;            value = lastName,&#10;            onValueChange = { lastName = it },&#10;            label = { Text(&quot;Last name&quot;) },&#10;            singleLine = true,&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = OutlinedTextFieldDefaults.colors(&#10;                focusedBorderColor = AppColors.Text_Pink,&#10;                unfocusedBorderColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Birthday Button&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .clickable { showCalendar = true },&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = CardDefaults.cardColors(containerColor = Color(0xFFF8E8F5))&#10;        ) {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    painter = painterResource(id = R.drawable.ic_profile_calender),&#10;                    contentDescription = &quot;Calendar&quot;,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;&#10;                Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                Text(&#10;                    text = birthday?.let {&#10;                        SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()).format(it)&#10;                    } ?: &quot;Choose birthday date&quot;,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = AppColors.Main_Primary&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.weight(1f))&#10;&#10;        // Confirm Button&#10;        Button(&#10;            onClick = {&#10;                isSaving = true&#10;                saveError = null&#10;                val user = viewModel.user.value?.copy(&#10;                    firstName = firstName,&#10;                    lastName = lastName,&#10;                    birthday = birthday?.let { SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()).format(it) },&#10;                ) ?: User(&#10;                    uid = &quot;&quot;, // Set the correct uid if available&#10;                    firstName = firstName,&#10;                    lastName = lastName,&#10;                    birthday = birthday?.let { SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()).format(it) }&#10;                )&#10;                viewModel.updateProfile(user)&#10;                isSaving = false&#10;                navController.navigate(&quot;gender_select&quot;)&#10;            },&#10;            enabled = firstName.isNotBlank() &amp;&amp; lastName.isNotBlank() &amp;&amp; birthday != null &amp;&amp; !isSaving,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(56.dp),&#10;            shape = RoundedCornerShape(12.dp),&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = AppColors.Main_Secondary1,&#10;                disabledContainerColor = Color.LightGray&#10;            )&#10;        ) {&#10;            if (isSaving) {&#10;                CircularProgressIndicator(modifier = Modifier.size(24.dp), color = AppColors.Main_Primary)&#10;            } else {&#10;                Text(&#10;                    text = &quot;Confirm&quot;,&#10;                    color = AppColors.Main_Primary,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;        }&#10;        if (saveError != null) {&#10;            Text(&#10;                text = saveError ?: &quot;&quot;,&#10;                color = Color.Red,&#10;                modifier = Modifier.padding(top = 8.dp)&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;    }&#10;&#10;    // Custom Calendar Dialog&#10;    if (showCalendar) {&#10;        CustomCalendarDialog(&#10;            onDateSelected = { selectedDate -&gt;&#10;                birthday = selectedDate&#10;                showCalendar = false&#10;            },&#10;            onDismiss = { showCalendar = false }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/profile/UserProfileScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/profile/UserProfileScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.profile&#10;&#10;import androidx.compose.animation.core.Animatable&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.gestures.detectDragGestures&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.FlowRow&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.outlined.ArrowBack&#10;import androidx.compose.material.icons.outlined.Close&#10;import androidx.compose.material.icons.outlined.Favorite&#10;import androidx.compose.material.icons.outlined.Star&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.SpanStyle&#10;import androidx.compose.ui.text.buildAnnotatedString&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.text.withStyle&#10;import androidx.compose.ui.unit.IntOffset&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import coil.compose.AsyncImage&#10;import com.example.dating.R&#10;import com.example.dating.data.model.User&#10;import com.example.dating.navigation.Screen&#10;import com.example.dating.viewmodel.UserViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun UserProfileScreen(&#10;    navController: NavController,&#10;    userUid: String? = null,&#10;    viewModel: UserViewModel = hiltViewModel()&#10;) {&#10;    LaunchedEffect(userUid) { viewModel.observeUser(userUid) }&#10;&#10;    val user by viewModel.user.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            CenterAlignedTopAppBar(&#10;                title = { Text(&quot;Profile&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.navigateUp() }) {&#10;                        Icon(Icons.Outlined.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { padding -&gt;&#10;        when {&#10;            isLoading -&gt; Box(Modifier.fillMaxSize().padding(padding), contentAlignment = Alignment.Center) {&#10;                CircularProgressIndicator()&#10;            }&#10;            user != null -&gt; UserProfileContent(&#10;                modifier = Modifier.padding(padding),&#10;                user = user!!,&#10;                onSwipeDone = { dir -&gt;&#10;                    // báo về Home để tự next&#10;                    navController.previousBackStackEntry?.savedStateHandle?.set(&quot;advanceNext&quot;, user!!.uid)&#10;                    navController.previousBackStackEntry?.savedStateHandle?.set(&quot;swipeDir&quot;, dir)&#10;                    navController.navigateUp()&#10;                },&#10;                onSeeAll = { images -&gt;&#10;                    navController.currentBackStackEntry?.savedStateHandle?.set(&quot;images&quot;, ArrayList(images))&#10;                    navController.navigate(Screen.PhotoViewer.route(0))&#10;                },&#10;                onImageClick = { index, images -&gt;&#10;                    navController.currentBackStackEntry?.savedStateHandle?.set(&quot;images&quot;, ArrayList(images))&#10;                    navController.navigate(Screen.PhotoViewer.route(index))&#10;                }&#10;            )&#10;            else -&gt; Box(Modifier.fillMaxSize().padding(padding), contentAlignment = Alignment.Center) {&#10;                Text(&quot;Cannot load profile&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalLayoutApi::class)&#10;@Composable&#10;private fun UserProfileContent(&#10;    modifier: Modifier = Modifier,&#10;    user: User,&#10;    onSwipeDone: (dir: String) -&gt; Unit,&#10;    onSeeAll: (List&lt;String&gt;) -&gt; Unit,&#10;    onImageClick: (Int, List&lt;String&gt;) -&gt; Unit&#10;) {&#10;    // ====== Safe values + defaults&#10;    val name = listOf(user.firstName, user.lastName)&#10;        .filter { it.isNotBlank() }.joinToString(&quot; &quot;).ifBlank { &quot;Jessica Parker&quot; }&#10;    val ageText = user.birthday?.split(&quot;-&quot;)?.firstOrNull()?.toIntOrNull()?.let {&#10;        &quot;, &quot; + (java.util.Calendar.getInstance().get(java.util.Calendar.YEAR) - it)&#10;    } ?: &quot;, 23&quot;&#10;    val job = user.job ?: &quot;Professional model&quot;&#10;    val location = user.location ?: &quot;Chicago, IL, United States&quot;&#10;    val about = user.description ?: &quot;My name is $name and I enjoy meeting new people and finding ways to help them have an uplifting experience. I enjoy reading...&quot;&#10;    val images = user.imageUrl&#10;    val avatarUrl = user.avatarUrl ?: images.firstOrNull() // có thể null&#10;&#10;    // ====== Swipe state (hero)&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;    val offsetY = remember { Animatable(0f) }&#10;    val threshold = 200f&#10;    val rotation = (offsetX.value / 15).coerceIn(-25f, 25f)&#10;&#10;    LazyColumn(&#10;        modifier = modifier.fillMaxSize(),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        // ----------------- HERO (swipeable) -----------------&#10;        item {&#10;            Box(&#10;                Modifier&#10;                    .fillMaxWidth()&#10;                    .height(340.dp)&#10;                    .offset { IntOffset(offsetX.value.toInt(), offsetY.value.toInt()) }&#10;                    .graphicsLayer { rotationZ = rotation }&#10;                    .pointerInput(Unit) {&#10;                        detectDragGestures(&#10;                            onDragEnd = {&#10;                                scope.launch {&#10;                                    when {&#10;                                        offsetX.value &gt; threshold -&gt; {&#10;                                            offsetX.animateTo(1000f, tween(280))&#10;                                            onSwipeDone(&quot;like&quot;)&#10;                                            offsetX.snapTo(0f); offsetY.snapTo(0f)&#10;                                        }&#10;                                        offsetX.value &lt; -threshold -&gt; {&#10;                                            offsetX.animateTo(-1000f, tween(280))&#10;                                            onSwipeDone(&quot;dislike&quot;)&#10;                                            offsetX.snapTo(0f); offsetY.snapTo(0f)&#10;                                        }&#10;                                        else -&gt; {&#10;                                            offsetX.animateTo(0f, tween(220))&#10;                                            offsetY.animateTo(0f, tween(220))&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        ) { _, drag -&gt;&#10;                            scope.launch {&#10;                                offsetX.snapTo(offsetX.value + drag.x)&#10;                                offsetY.snapTo(offsetY.value + drag.y)&#10;                            }&#10;                        }&#10;                    }&#10;            ) {&#10;                // Ảnh hero: có URL thì AsyncImage, không có thì avatar mặc định&#10;                if (!avatarUrl.isNullOrBlank()) {&#10;                    AsyncImage(&#10;                        model = avatarUrl,&#10;                        contentDescription = &quot;hero&quot;,&#10;                        placeholder = painterResource(R.drawable.ic_avatar),&#10;                        error = painterResource(R.drawable.ic_avatar),&#10;                        contentScale = ContentScale.Crop,&#10;                        modifier = Modifier.fillMaxSize()&#10;                    )&#10;                } else {&#10;                    Image(&#10;                        painter = painterResource(R.drawable.ic_avatar),&#10;                        contentDescription = &quot;hero-placeholder&quot;,&#10;                        contentScale = ContentScale.Crop,&#10;                        modifier = Modifier.fillMaxSize()&#10;                    )&#10;                }&#10;&#10;                // 3 nút nổi&#10;                Row(&#10;                    horizontalArrangement = Arrangement.spacedBy(20.dp),&#10;                    modifier = Modifier&#10;                        .align(Alignment.BottomCenter)&#10;                        .offset(y = 280.dp)&#10;                ) {&#10;                    CircleButton({ Icon(Icons.Outlined.Close, null) }, Color(0xFFFDE7EC), Color(0xFFE34B6B))&#10;                    CircleButton({ Icon(Icons.Outlined.Favorite, null) }, Color(0xFFEDE2FF), MaterialTheme.colorScheme.primary)&#10;                    CircleButton({ Icon(Icons.Outlined.Star, null) }, Color(0xFFEDEAFF), Color(0xFF6F57FF))&#10;                }&#10;            }&#10;        }&#10;&#10;        // ----------------- CARD nội dung (kéo được) -----------------&#10;        item {&#10;            Card(&#10;                shape = RoundedCornerShape(topStart = 28.dp, topEnd = 28.dp),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .offset(y = (-24).dp)&#10;                    .padding(horizontal = 16.dp)&#10;            ) {&#10;                Column(Modifier.padding(horizontal = 16.dp, vertical = 20.dp)) {&#10;&#10;                    // Tên + tuổi&#10;                    Text(&quot;$name$ageText&quot;, style = MaterialTheme.typography.headlineSmall, fontWeight = FontWeight.Bold)&#10;                    Spacer(Modifier.height(4.dp))&#10;&#10;                    // Job&#10;                    Text(job, style = MaterialTheme.typography.bodyMedium, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                    Spacer(Modifier.height(2.dp))&#10;&#10;                    // Location + 1km&#10;                    Row(verticalAlignment = Alignment.CenterVertically) {&#10;                        Text(location, style = MaterialTheme.typography.bodySmall, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                        Spacer(Modifier.width(8.dp))&#10;                        AssistChip(onClick = {}, label = { Text(&quot;1 km&quot;) })&#10;                    }&#10;&#10;                    // About&#10;                    Spacer(Modifier.height(16.dp))&#10;                    Text(&quot;About&quot;, style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.SemiBold)&#10;                    Spacer(Modifier.height(6.dp))&#10;                    var expanded by remember { mutableStateOf(false) }&#10;                    Text(&#10;                        about,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        maxLines = if (expanded) Int.MAX_VALUE else 3,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                    if (!expanded) {&#10;                        Text(&#10;                            buildAnnotatedString {&#10;                                withStyle(SpanStyle(color = MaterialTheme.colorScheme.primary, fontWeight = FontWeight.SemiBold)) {&#10;                                    append(&quot;Read more&quot;)&#10;                                }&#10;                            },&#10;                            modifier = Modifier.padding(top = 6.dp).clickable { expanded = true }&#10;                        )&#10;                    }&#10;&#10;                    // Interests&#10;                    if (user.interests.isNotEmpty()) {&#10;                        Spacer(Modifier.height(16.dp))&#10;                        Text(&quot;Interests&quot;, style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.SemiBold)&#10;                        Spacer(Modifier.height(8.dp))&#10;                        FlowRow(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            user.interests.forEachIndexed { i, itx -&gt;&#10;                                if (i &lt; 2) FilterChip(selected = true, onClick = {}, label = { Text(itx) })&#10;                                else AssistChip(onClick = {}, label = { Text(itx) })&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Gallery&#10;                    Spacer(Modifier.height(16.dp))&#10;                    Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()) {&#10;                        Text(&quot;Gallery&quot;, style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.SemiBold, modifier = Modifier.weight(1f))&#10;                        Text(&#10;                            &quot;See all&quot;,&#10;                            color = MaterialTheme.colorScheme.primary,&#10;                            style = MaterialTheme.typography.labelLarge,&#10;                            modifier = Modifier.clickable {&#10;                                if (images.isNotEmpty()) onSeeAll(images)&#10;                            }&#10;                        )&#10;                    }&#10;                    Spacer(Modifier.height(8.dp))&#10;&#10;                    if (images.isNotEmpty()) {&#10;                        val preview = images.take(6)&#10;                        LazyVerticalGrid(&#10;                            columns = GridCells.Fixed(3),&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(((preview.size + 2) / 3 * 110).dp)&#10;                        ) {&#10;                            items(preview) { img -&gt;&#10;                                val idx = images.indexOf(img)&#10;                                AsyncImage(&#10;                                    model = img,&#10;                                    contentDescription = null,&#10;                                    placeholder = painterResource(R.drawable.ic_avatar),&#10;                                    error = painterResource(R.drawable.ic_avatar),&#10;                                    contentScale = ContentScale.Crop,&#10;                                    modifier = Modifier&#10;                                        .aspectRatio(1f)&#10;                                        .clip(RoundedCornerShape(12.dp))&#10;                                        .clickable { onImageClick(idx, images) }&#10;                                )&#10;                            }&#10;                        }&#10;                    } else {&#10;                        // Empty state gallery&#10;                        Surface(&#10;                            tonalElevation = 1.dp,&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(120.dp)&#10;                        ) {&#10;                            Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;                                Text(&quot;No images available&quot;, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        item { Spacer(Modifier.height(28.dp)) }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CircleButton(icon: @Composable () -&gt; Unit, container: Color, content: Color) {&#10;    Surface(&#10;        color = container,&#10;        contentColor = content,&#10;        shape = CircleShape,&#10;        shadowElevation = 8.dp,&#10;        modifier = Modifier.size(56.dp)&#10;    ) { Box(contentAlignment = Alignment.Center) { icon() } }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.profile&#10;&#10;import androidx.compose.animation.core.Animatable&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.gestures.detectDragGestures&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.FlowRow&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.outlined.ArrowBack&#10;import androidx.compose.material.icons.outlined.Close&#10;import androidx.compose.material.icons.outlined.Favorite&#10;import androidx.compose.material.icons.outlined.Star&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.SpanStyle&#10;import androidx.compose.ui.text.buildAnnotatedString&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.text.withStyle&#10;import androidx.compose.ui.unit.IntOffset&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import coil.compose.AsyncImage&#10;import com.example.dating.R&#10;import com.example.dating.data.model.User&#10;import com.example.dating.navigation.Screen&#10;import com.example.dating.viewmodel.UserViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun UserProfileScreen(&#10;    navController: NavController,&#10;    userUid: String? = null,&#10;    viewModel: UserViewModel = hiltViewModel()&#10;) {&#10;    LaunchedEffect(userUid) { viewModel.observeUser(userUid) }&#10;&#10;    val user by viewModel.user.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            CenterAlignedTopAppBar(&#10;                title = { Text(&quot;Profile&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.navigateUp() }) {&#10;                        Icon(Icons.Outlined.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { padding -&gt;&#10;        when {&#10;            isLoading -&gt; Box(Modifier.fillMaxSize().padding(padding), contentAlignment = Alignment.Center) {&#10;                CircularProgressIndicator()&#10;            }&#10;            user != null -&gt; UserProfileContent(&#10;                modifier = Modifier.padding(padding),&#10;                user = user!!,&#10;                onSwipeDone = { dir -&gt;&#10;                    // báo về Home để tự next&#10;                    navController.previousBackStackEntry?.savedStateHandle?.set(&quot;advanceNext&quot;, user!!.uid)&#10;                    navController.previousBackStackEntry?.savedStateHandle?.set(&quot;swipeDir&quot;, dir)&#10;                    navController.navigateUp()&#10;                },&#10;                onSeeAll = { images -&gt;&#10;                    navController.currentBackStackEntry?.savedStateHandle?.set(&quot;images&quot;, ArrayList(images))&#10;                    navController.navigate(Screen.PhotoViewer.route(0))&#10;                },&#10;                onImageClick = { index, images -&gt;&#10;                    navController.currentBackStackEntry?.savedStateHandle?.set(&quot;images&quot;, ArrayList(images))&#10;                    navController.navigate(Screen.PhotoViewer.route(index))&#10;                }&#10;            )&#10;            else -&gt; Box(Modifier.fillMaxSize().padding(padding), contentAlignment = Alignment.Center) {&#10;                Text(&quot;Cannot load profile&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalLayoutApi::class)&#10;@Composable&#10;private fun UserProfileContent(&#10;    modifier: Modifier = Modifier,&#10;    user: User,&#10;    onSwipeDone: (dir: String) -&gt; Unit,&#10;    onSeeAll: (List&lt;String&gt;) -&gt; Unit,&#10;    onImageClick: (Int, List&lt;String&gt;) -&gt; Unit&#10;) {&#10;    // ====== Safe values + defaults&#10;    val name = listOf(user.firstName, user.lastName)&#10;        .filter { it.isNotBlank() }.joinToString(&quot; &quot;).ifBlank { &quot;Jessica Parker&quot; }&#10;    val ageText = user.birthday?.let {&#10;        // Try to parse year from yyyy-MM-dd or dd/MM/yyyy or MM/dd/yyyy&#10;        val year = when {&#10;            it.contains(&quot;-&quot;) -&gt; it.split(&quot;-&quot;).firstOrNull()?.toIntOrNull() // yyyy-MM-dd&#10;            it.contains(&quot;/&quot;) -&gt; it.split(&quot;/&quot;).lastOrNull()?.toIntOrNull() // dd/MM/yyyy or MM/dd/yyyy&#10;            else -&gt; null&#10;        }&#10;        year?.let { birthYear -&gt;&#10;            &quot;, &quot; + (java.util.Calendar.getInstance().get(java.util.Calendar.YEAR) - birthYear)&#10;        } ?: &quot;, ?&quot;&#10;    } ?: &quot;, ?&quot;&#10;    val job = user.job ?: &quot;Professional model&quot;&#10;    val location = user.location ?: &quot;Chicago, IL, United States&quot;&#10;    val about = user.description ?: &quot;My name is $name and I enjoy meeting new people and finding ways to help them have an uplifting experience. I enjoy reading...&quot;&#10;    val images = user.imageUrl&#10;    val avatarUrl = user.avatarUrl ?: images.firstOrNull() // có thể null&#10;&#10;    // ====== Swipe state (hero)&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;    val offsetY = remember { Animatable(0f) }&#10;    val threshold = 200f&#10;    val rotation = (offsetX.value / 15).coerceIn(-25f, 25f)&#10;&#10;    LazyColumn(&#10;        modifier = modifier.fillMaxSize(),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        // ----------------- HERO (swipeable) -----------------&#10;        item {&#10;            Box(&#10;                Modifier&#10;                    .fillMaxWidth()&#10;                    .height(340.dp)&#10;                    .offset { IntOffset(offsetX.value.toInt(), offsetY.value.toInt()) }&#10;                    .graphicsLayer { rotationZ = rotation }&#10;                    .pointerInput(Unit) {&#10;                        detectDragGestures(&#10;                            onDragEnd = {&#10;                                scope.launch {&#10;                                    when {&#10;                                        offsetX.value &gt; threshold -&gt; {&#10;                                            offsetX.animateTo(1000f, tween(280))&#10;                                            onSwipeDone(&quot;like&quot;)&#10;                                            offsetX.snapTo(0f); offsetY.snapTo(0f)&#10;                                        }&#10;                                        offsetX.value &lt; -threshold -&gt; {&#10;                                            offsetX.animateTo(-1000f, tween(280))&#10;                                            onSwipeDone(&quot;dislike&quot;)&#10;                                            offsetX.snapTo(0f); offsetY.snapTo(0f)&#10;                                        }&#10;                                        else -&gt; {&#10;                                            offsetX.animateTo(0f, tween(220))&#10;                                            offsetY.animateTo(0f, tween(220))&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        ) { _, drag -&gt;&#10;                            scope.launch {&#10;                                offsetX.snapTo(offsetX.value + drag.x)&#10;                                offsetY.snapTo(offsetY.value + drag.y)&#10;                            }&#10;                        }&#10;                    }&#10;            ) {&#10;                // Ảnh hero: có URL thì AsyncImage, không có thì avatar mặc định&#10;                if (!avatarUrl.isNullOrBlank()) {&#10;                    AsyncImage(&#10;                        model = avatarUrl,&#10;                        contentDescription = &quot;hero&quot;,&#10;                        placeholder = painterResource(R.drawable.ic_avatar),&#10;                        error = painterResource(R.drawable.ic_avatar),&#10;                        contentScale = ContentScale.Crop,&#10;                        modifier = Modifier.fillMaxSize()&#10;                    )&#10;                } else {&#10;                    Image(&#10;                        painter = painterResource(R.drawable.ic_avatar),&#10;                        contentDescription = &quot;hero-placeholder&quot;,&#10;                        contentScale = ContentScale.Crop,&#10;                        modifier = Modifier.fillMaxSize()&#10;                    )&#10;                }&#10;&#10;                // 3 nút nổi&#10;                Row(&#10;                    horizontalArrangement = Arrangement.spacedBy(20.dp),&#10;                    modifier = Modifier&#10;                        .align(Alignment.BottomCenter)&#10;                        .offset(y = 280.dp)&#10;                ) {&#10;                    CircleButton({ Icon(Icons.Outlined.Close, null) }, Color(0xFFFDE7EC), Color(0xFFE34B6B))&#10;                    CircleButton({ Icon(Icons.Outlined.Favorite, null) }, Color(0xFFEDE2FF), MaterialTheme.colorScheme.primary)&#10;                    CircleButton({ Icon(Icons.Outlined.Star, null) }, Color(0xFFEDEAFF), Color(0xFF6F57FF))&#10;                }&#10;            }&#10;        }&#10;&#10;        // ----------------- CARD nội dung (kéo được) -----------------&#10;        item {&#10;            Card(&#10;                shape = RoundedCornerShape(topStart = 28.dp, topEnd = 28.dp),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .offset(y = (-24).dp)&#10;                    .padding(horizontal = 16.dp)&#10;            ) {&#10;                Column(Modifier.padding(horizontal = 16.dp, vertical = 20.dp)) {&#10;&#10;                    // Tên + tuổi&#10;                    Text(&quot;$name$ageText&quot;, style = MaterialTheme.typography.headlineSmall, fontWeight = FontWeight.Bold)&#10;                    Spacer(Modifier.height(4.dp))&#10;&#10;                    // Job&#10;                    Text(job, style = MaterialTheme.typography.bodyMedium, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                    Spacer(Modifier.height(2.dp))&#10;&#10;                    // Location + 1km&#10;                    Row(verticalAlignment = Alignment.CenterVertically) {&#10;                        Text(location, style = MaterialTheme.typography.bodySmall, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                        Spacer(Modifier.width(8.dp))&#10;                        AssistChip(onClick = {}, label = { Text(&quot;1 km&quot;) })&#10;                    }&#10;&#10;                    // About&#10;                    Spacer(Modifier.height(16.dp))&#10;                    Text(&quot;About&quot;, style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.SemiBold)&#10;                    Spacer(Modifier.height(6.dp))&#10;                    var expanded by remember { mutableStateOf(false) }&#10;                    Text(&#10;                        about,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        maxLines = if (expanded) Int.MAX_VALUE else 3,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                    if (!expanded) {&#10;                        Text(&#10;                            buildAnnotatedString {&#10;                                withStyle(SpanStyle(color = MaterialTheme.colorScheme.primary, fontWeight = FontWeight.SemiBold)) {&#10;                                    append(&quot;Read more&quot;)&#10;                                }&#10;                            },&#10;                            modifier = Modifier.padding(top = 6.dp).clickable { expanded = true }&#10;                        )&#10;                    }&#10;&#10;                    // Interests&#10;                    if (user.interests.isNotEmpty()) {&#10;                        Spacer(Modifier.height(16.dp))&#10;                        Text(&quot;Interests&quot;, style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.SemiBold)&#10;                        Spacer(Modifier.height(8.dp))&#10;                        FlowRow(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            user.interests.forEachIndexed { i, itx -&gt;&#10;                                if (i &lt; 2) FilterChip(selected = true, onClick = {}, label = { Text(itx) })&#10;                                else AssistChip(onClick = {}, label = { Text(itx) })&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Gallery&#10;                    Spacer(Modifier.height(16.dp))&#10;                    Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()) {&#10;                        Text(&quot;Gallery&quot;, style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.SemiBold, modifier = Modifier.weight(1f))&#10;                        Text(&#10;                            &quot;See all&quot;,&#10;                            color = MaterialTheme.colorScheme.primary,&#10;                            style = MaterialTheme.typography.labelLarge,&#10;                            modifier = Modifier.clickable {&#10;                                if (images.isNotEmpty()) onSeeAll(images)&#10;                            }&#10;                        )&#10;                    }&#10;                    Spacer(Modifier.height(8.dp))&#10;&#10;                    if (images.isNotEmpty()) {&#10;                        val preview = images.take(6)&#10;                        LazyVerticalGrid(&#10;                            columns = GridCells.Fixed(3),&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(((preview.size + 2) / 3 * 110).dp)&#10;                        ) {&#10;                            items(preview) { img -&gt;&#10;                                val idx = images.indexOf(img)&#10;                                AsyncImage(&#10;                                    model = img,&#10;                                    contentDescription = null,&#10;                                    placeholder = painterResource(R.drawable.ic_avatar),&#10;                                    error = painterResource(R.drawable.ic_avatar),&#10;                                    contentScale = ContentScale.Crop,&#10;                                    modifier = Modifier&#10;                                        .aspectRatio(1f)&#10;                                        .clip(RoundedCornerShape(12.dp))&#10;                                        .clickable { onImageClick(idx, images) }&#10;                                )&#10;                            }&#10;                        }&#10;                    } else {&#10;                        // Empty state gallery&#10;                        Surface(&#10;                            tonalElevation = 1.dp,&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(120.dp)&#10;                        ) {&#10;                            Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;                                Text(&quot;No images available&quot;, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        item { Spacer(Modifier.height(28.dp)) }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CircleButton(icon: @Composable () -&gt; Unit, container: Color, content: Color) {&#10;    Surface(&#10;        color = container,&#10;        contentColor = content,&#10;        shape = CircleShape,&#10;        shadowElevation = 8.dp,&#10;        modifier = Modifier.size(56.dp)&#10;    ) { Box(contentAlignment = Alignment.Center) { icon() } }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/MessagesViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/MessagesViewModel.kt" />
              <option name="originalContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.MessagesFilterState&#10;import com.example.dating.data.model.ConversationPreview&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.repository.FirebaseMessagesRepository&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.filterMessages&#10;&#10;data class MessagesUiState(&#10;    val isLoading: Boolean = false,&#10;    val error: String? = null,&#10;    val messages: List&lt;ConversationPreview&gt; = emptyList()&#10;)&#10;&#10;@HiltViewModel&#10;class MessagesViewModel @Inject constructor(&#10;    private val db: FirebaseFirestore,&#10;    private val auth: FirebaseAuth&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(MessagesUiState())&#10;    val uiState: StateFlow&lt;MessagesUiState&gt; = _uiState&#10;&#10;    private val _filterState = MutableStateFlow(MessagesFilterState())&#10;    val filterState: StateFlow&lt;MessagesFilterState&gt; = _filterState // Change to StateFlow&#10;&#10;    private var originalMessages = listOf&lt;ConversationPreview&gt;()&#10;    private var loadedConversations = 0&#10;    private var totalConversations = 0&#10;&#10;    init {&#10;        loadMessages()&#10;    }&#10;&#10;    fun updateFilter(newState: MessagesFilterState) {&#10;        _filterState.value = newState&#10;    }&#10;&#10;    fun clearFilter() {&#10;        _filterState.value = MessagesFilterState()&#10;        _uiState.value = _uiState.value.copy(messages = originalMessages)&#10;    }&#10;&#10;    fun applyFilter() {&#10;        val filtered = filterMessages(originalMessages, filterState.value)&#10;        _uiState.value = _uiState.value.copy(messages = filtered)&#10;    }&#10;&#10;    private fun loadMessages() {&#10;        _uiState.value = MessagesUiState(isLoading = true)&#10;        val uid = auth.currentUser?.uid ?: return&#10;&#10;        db.collection(&quot;conversations&quot;)&#10;            .whereArrayContains(&quot;participants&quot;, uid)&#10;            .get()&#10;            .addOnSuccessListener { snapshot -&gt;&#10;                if (snapshot.isEmpty) {&#10;                    _uiState.value = _uiState.value.copy(&#10;                        isLoading = false,&#10;                        messages = emptyList()&#10;                    )&#10;                    return@addOnSuccessListener&#10;                }&#10;&#10;                totalConversations = snapshot.size()&#10;                loadedConversations = 0&#10;                val conversations = mutableListOf&lt;ConversationPreview&gt;()&#10;&#10;                snapshot.documents.forEach { doc -&gt;&#10;                    val participants = doc.get(&quot;participants&quot;) as? List&lt;String&gt; ?: return@forEach&#10;                    val peerId = participants.find { it != uid } ?: return@forEach&#10;&#10;                    // Load peer info&#10;                    db.collection(&quot;users&quot;)&#10;                        .document(peerId)&#10;                        .get()&#10;                        .addOnSuccessListener { userDoc -&gt;&#10;                            val peer = User(&#10;                                uid = peerId,&#10;                                firstName = userDoc.getString(&quot;firstName&quot;) ?: &quot;&quot;,&#10;                                lastName = userDoc.getString(&quot;lastName&quot;) ?: &quot;&quot;,&#10;                                avatarUrl = userDoc.getString(&quot;avatarUrl&quot;),&#10;                                isOnline = userDoc.getBoolean(&quot;isOnline&quot;) ?: false&#10;                            )&#10;&#10;                            // Get last message&#10;                            db.collection(&quot;conversations&quot;)&#10;                                .document(doc.id)&#10;                                .collection(&quot;messages&quot;)&#10;                                .orderBy(&quot;timestamp&quot;, com.google.firebase.firestore.Query.Direction.DESCENDING)&#10;                                .limit(1)&#10;                                .get()&#10;                                .addOnSuccessListener { msgSnap -&gt;&#10;                                    val lastMsg = msgSnap.documents.firstOrNull()&#10;                                    val preview = ConversationPreview(&#10;                                        id = doc.id,&#10;                                        peer = peer,&#10;                                        lastMessage = lastMsg?.getString(&quot;text&quot;) ?: &quot;&quot;,&#10;                                        lastMessageTimestamp = lastMsg?.getLong(&quot;timestamp&quot;) ?: System.currentTimeMillis(),&#10;                                        timeAgo = formatTimeAgo(lastMsg?.getLong(&quot;timestamp&quot;) ?: System.currentTimeMillis()),&#10;                                        unreadCount = doc.getLong(&quot;unreadCount&quot;)?.toInt() ?: 0&#10;                                    )&#10;                                    conversations.add(preview)&#10;&#10;                                    loadedConversations++&#10;                                    if (loadedConversations == totalConversations) {&#10;                                        originalMessages = conversations.sortedByDescending { it.lastMessageTimestamp }&#10;                                        _uiState.value = _uiState.value.copy(&#10;                                            isLoading = false,&#10;                                            messages = originalMessages&#10;                                        )&#10;                                    }&#10;                                }&#10;                        }&#10;                }&#10;            }&#10;            .addOnFailureListener { e -&gt;&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    error = e.message&#10;                )&#10;            }&#10;    }&#10;&#10;    private fun formatTimeAgo(timestamp: Long): String {&#10;        if (timestamp == 0L) return &quot;&quot;&#10;        val now = System.currentTimeMillis()&#10;        val diff = now - timestamp&#10;        return when {&#10;            diff &lt; 60_000 -&gt; &quot;Just now&quot;&#10;            diff &lt; 3600_000 -&gt; &quot;${diff / 60_000}m&quot;&#10;            diff &lt; 86400_000 -&gt; &quot;${diff / 3600_000}h&quot;&#10;            else -&gt; &quot;${diff / 86400_000}d&quot;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.MessagesFilterState&#10;import com.example.dating.data.model.ConversationPreview&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.repository.FirebaseMessagesRepository&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.filterMessages&#10;&#10;data class MessagesUiState(&#10;    val isLoading: Boolean = false,&#10;    val error: String? = null,&#10;    val messages: List&lt;ConversationPreview&gt; = emptyList()&#10;)&#10;&#10;@HiltViewModel&#10;class MessagesViewModel @Inject constructor(&#10;    private val db: FirebaseFirestore,&#10;    private val auth: FirebaseAuth&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(MessagesUiState())&#10;    val uiState: StateFlow&lt;MessagesUiState&gt; = _uiState&#10;&#10;    private val _filterState = MutableStateFlow(MessagesFilterState())&#10;    val filterState: StateFlow&lt;MessagesFilterState&gt; = _filterState // Change to StateFlow&#10;&#10;    private var originalMessages = listOf&lt;ConversationPreview&gt;()&#10;    private var loadedConversations = 0&#10;    private var totalConversations = 0&#10;&#10;    init {&#10;        loadMessages()&#10;    }&#10;&#10;    fun updateFilter(newState: MessagesFilterState) {&#10;        _filterState.value = newState&#10;    }&#10;&#10;    fun clearFilter() {&#10;        _filterState.value = MessagesFilterState()&#10;        _uiState.value = _uiState.value.copy(messages = originalMessages)&#10;    }&#10;&#10;    fun applyFilter() {&#10;        val filtered = filterMessages(originalMessages, filterState.value)&#10;        _uiState.value = _uiState.value.copy(messages = filtered)&#10;    }&#10;&#10;    private fun loadMessages() {&#10;        _uiState.value = MessagesUiState(isLoading = true)&#10;        val uid = auth.currentUser?.uid ?: return&#10;        android.util.Log.d(&quot;MessagesViewModel&quot;, &quot;Loading messages for uid: $uid&quot;)&#10;        db.collection(&quot;conversations&quot;)&#10;            .whereArrayContains(&quot;participants&quot;, uid)&#10;            .get()&#10;            .addOnSuccessListener { snapshot -&gt;&#10;                android.util.Log.d(&quot;MessagesViewModel&quot;, &quot;Conversations snapshot size: ${snapshot.size()}&quot;)&#10;                if (snapshot.isEmpty) {&#10;                    _uiState.value = _uiState.value.copy(&#10;                        isLoading = false,&#10;                        messages = emptyList()&#10;                    )&#10;                    android.util.Log.d(&quot;MessagesViewModel&quot;, &quot;No conversations found.&quot;)&#10;                    return@addOnSuccessListener&#10;                }&#10;&#10;                totalConversations = snapshot.size()&#10;                loadedConversations = 0&#10;                val conversations = mutableListOf&lt;ConversationPreview&gt;()&#10;&#10;                snapshot.documents.forEach { doc -&gt;&#10;                    val participants = doc.get(&quot;participants&quot;) as? List&lt;String&gt; ?: return@forEach&#10;                    val peerId = participants.find { it != uid } ?: return@forEach&#10;                    android.util.Log.d(&quot;MessagesViewModel&quot;, &quot;Conversation doc: ${doc.id}, participants: $participants, peerId: $peerId&quot;)&#10;&#10;                    // Load peer info&#10;                    db.collection(&quot;users&quot;)&#10;                        .document(peerId)&#10;                        .get()&#10;                        .addOnSuccessListener { userDoc -&gt;&#10;                            val peer = User(&#10;                                uid = peerId,&#10;                                firstName = userDoc.getString(&quot;firstName&quot;) ?: &quot;&quot;,&#10;                                lastName = userDoc.getString(&quot;lastName&quot;) ?: &quot;&quot;,&#10;                                avatarUrl = userDoc.getString(&quot;avatarUrl&quot;),&#10;                                isOnline = userDoc.getBoolean(&quot;isOnline&quot;) ?: false&#10;                            )&#10;                            android.util.Log.d(&quot;MessagesViewModel&quot;, &quot;Loaded peer: $peer&quot;)&#10;&#10;                            // Get last message&#10;                            db.collection(&quot;conversations&quot;)&#10;                                .document(doc.id)&#10;                                .collection(&quot;messages&quot;)&#10;                                .orderBy(&quot;timestamp&quot;, com.google.firebase.firestore.Query.Direction.DESCENDING)&#10;                                .limit(1)&#10;                                .get()&#10;                                .addOnSuccessListener { msgSnap -&gt;&#10;                                    val lastMsg = msgSnap.documents.firstOrNull()&#10;                                    android.util.Log.d(&quot;MessagesViewModel&quot;, &quot;Last message: ${lastMsg?.getString(&quot;text&quot;)}, timestamp: ${lastMsg?.getLong(&quot;timestamp&quot;)}&quot;)&#10;                                    val preview = ConversationPreview(&#10;                                        id = doc.id,&#10;                                        peer = peer,&#10;                                        lastMessage = lastMsg?.getString(&quot;text&quot;) ?: &quot;&quot;,&#10;                                        lastMessageTimestamp = lastMsg?.getLong(&quot;timestamp&quot;) ?: System.currentTimeMillis(),&#10;                                        timeAgo = formatTimeAgo(lastMsg?.getLong(&quot;timestamp&quot;) ?: System.currentTimeMillis()),&#10;                                        unreadCount = doc.getLong(&quot;unreadCount&quot;)?.toInt() ?: 0&#10;                                    )&#10;                                    conversations.add(preview)&#10;&#10;                                    loadedConversations++&#10;                                    android.util.Log.d(&quot;MessagesViewModel&quot;, &quot;Loaded $loadedConversations/$totalConversations conversations.&quot;)&#10;                                    if (loadedConversations == totalConversations) {&#10;                                        originalMessages = conversations.sortedByDescending { it.lastMessageTimestamp }&#10;                                        android.util.Log.d(&quot;MessagesViewModel&quot;, &quot;Final loaded messages: $originalMessages&quot;)&#10;                                        _uiState.value = _uiState.value.copy(&#10;                                            isLoading = false,&#10;                                            messages = originalMessages&#10;                                        )&#10;                                    }&#10;                                }&#10;                        }&#10;                }&#10;            }&#10;            .addOnFailureListener { e -&gt;&#10;                android.util.Log.e(&quot;MessagesViewModel&quot;, &quot;Failed to load messages: ${e.message}&quot;)&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    error = e.message&#10;                )&#10;            }&#10;    }&#10;&#10;    private fun formatTimeAgo(timestamp: Long): String {&#10;        if (timestamp == 0L) return &quot;&quot;&#10;        val now = System.currentTimeMillis()&#10;        val diff = now - timestamp&#10;        return when {&#10;            diff &lt; 60_000 -&gt; &quot;Just now&quot;&#10;            diff &lt; 3600_000 -&gt; &quot;${diff / 60_000}m&quot;&#10;            diff &lt; 86400_000 -&gt; &quot;${diff / 3600_000}h&quot;&#10;            else -&gt; &quot;${diff / 86400_000}d&quot;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/ProfileViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/ProfileViewModel.kt" />
              <option name="originalContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.repository.AuthRepository&#10;import com.example.dating.data.model.repository.UserRepository&#10;import com.example.dating.data.model.Resource&#10;&#10;@HiltViewModel&#10;class ProfileViewModel @Inject constructor(&#10;    private val userRepository: UserRepository,&#10;    private val auth: AuthRepository,&#10;    ) : ViewModel() {&#10;    private val _user = MutableStateFlow&lt;User?&gt;(null)&#10;    val user: StateFlow&lt;User?&gt; = _user&#10;&#10;    private val _updateState = MutableStateFlow&lt;Resource&lt;Unit&gt;?&gt;(null)&#10;    val updateState: StateFlow&lt;Resource&lt;Unit&gt;?&gt; = _updateState&#10;&#10;    init {&#10;        val uid = auth.currentUser?.uid&#10;        if (uid != null) {&#10;            viewModelScope.launch {&#10;                userRepository.getUser(uid).collect { fetchedUser -&gt;&#10;                    android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;Fetched user: $fetchedUser&quot;)&#10;                    _user.value = fetchedUser&#10;                }&#10;            }&#10;        } else {&#10;            android.util.Log.w(&quot;ProfileViewModel&quot;, &quot;No UID found in AuthRepository&quot;)&#10;        }&#10;    }&#10;&#10;    fun loadUser(uid: String) {&#10;        viewModelScope.launch {&#10;            userRepository.getUser(uid).collect { _user.value = it }&#10;        }&#10;    }&#10;&#10;    fun updateProfile(user: User) {&#10;        android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;updateProfile called with: $user&quot;)&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.updateUser(user)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = user&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateGender(gender: String) {&#10;        val currentUser = _user.value ?: return&#10;        val updatedUser = currentUser.copy(gender = gender)&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.updateGender(updatedUser.uid, gender)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = updatedUser&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateInterests(interests: List&lt;String&gt;) {&#10;        val currentUser = _user.value ?: return&#10;        val updatedUser = currentUser.copy(interests = interests)&#10;        android.util.Log.w(&quot;ProfileViewModel&quot;, currentUser.toString())&#10;&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.updateInterests(updatedUser.uid, interests)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = updatedUser&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateJobLocationDescription(job: String?, location: String?, description: String?) {&#10;        val currentUser = _user.value ?: return&#10;        val updatedUser = currentUser.copy(job = job, location = location, description = description)&#10;        viewModelScope.launch {&#10;            userRepository.updateJobLocationDescription(updatedUser.uid, job, location, description)&#10;            _user.value = updatedUser&#10;        }&#10;    }&#10;&#10;    fun createUser(user: User) {&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.createUser(user)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = user&#10;            }&#10;        }&#10;    }&#10;&#10;    fun uploadAvatar(uri: android.net.Uri) {&#10;        val uid = auth.currentUser?.uid ?: return&#10;        val storage = com.google.firebase.storage.FirebaseStorage.getInstance()&#10;        val avatarRef = storage.reference.child(&quot;avatars/$uid.jpg&quot;)&#10;        viewModelScope.launch {&#10;            try {&#10;                avatarRef.putFile(uri).addOnSuccessListener {&#10;                    avatarRef.downloadUrl.addOnSuccessListener { downloadUrl -&gt;&#10;                        viewModelScope.launch {&#10;                            userRepository.updateAvatarUrl(uid, downloadUrl.toString())&#10;                            android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;Avatar updated: $downloadUrl&quot;)&#10;                        }&#10;                    }&#10;                }.addOnFailureListener { e -&gt;&#10;                    android.util.Log.e(&quot;ProfileViewModel&quot;, &quot;Failed to upload avatar: ${e.message}&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                android.util.Log.e(&quot;ProfileViewModel&quot;, &quot;Exception in uploadAvatar: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import com.example.dating.data.model.User&#10;import com.example.dating.data.model.repository.AuthRepository&#10;import com.example.dating.data.model.repository.UserRepository&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.storage.FirebaseStorage&#10;&#10;@HiltViewModel&#10;class ProfileViewModel @Inject constructor(&#10;    private val userRepository: UserRepository,&#10;    private val auth: AuthRepository,&#10;    ) : ViewModel() {&#10;    private val _user = MutableStateFlow&lt;User?&gt;(null)&#10;    val user: StateFlow&lt;User?&gt; = _user&#10;&#10;    private val _updateState = MutableStateFlow&lt;Resource&lt;Unit&gt;?&gt;(null)&#10;    val updateState: StateFlow&lt;Resource&lt;Unit&gt;?&gt; = _updateState&#10;&#10;    init {&#10;        val uid = auth.currentUser?.uid&#10;        if (uid != null) {&#10;            viewModelScope.launch {&#10;                userRepository.getUser(uid).collect { fetchedUser -&gt;&#10;                    android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;Fetched user: $fetchedUser&quot;)&#10;                    _user.value = fetchedUser&#10;                }&#10;            }&#10;        } else {&#10;            android.util.Log.w(&quot;ProfileViewModel&quot;, &quot;No UID found in AuthRepository&quot;)&#10;        }&#10;    }&#10;&#10;    fun loadUser(uid: String) {&#10;        viewModelScope.launch {&#10;            userRepository.getUser(uid).collect { _user.value = it }&#10;        }&#10;    }&#10;&#10;    fun updateProfile(user: User) {&#10;        android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;updateProfile called with: $user&quot;)&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.updateUser(user)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = user&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateGender(gender: String) {&#10;        val currentUser = _user.value ?: return&#10;        val updatedUser = currentUser.copy(gender = gender)&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.updateGender(updatedUser.uid, gender)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = updatedUser&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateInterests(interests: List&lt;String&gt;) {&#10;        val currentUser = _user.value ?: return&#10;        val updatedUser = currentUser.copy(interests = interests)&#10;        android.util.Log.w(&quot;ProfileViewModel&quot;, currentUser.toString())&#10;&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.updateInterests(updatedUser.uid, interests)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = updatedUser&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateJobLocationDescription(job: String?, location: String?, description: String?) {&#10;        val currentUser = _user.value ?: return&#10;        val updatedUser = currentUser.copy(job = job, location = location, description = description)&#10;        viewModelScope.launch {&#10;            userRepository.updateJobLocationDescription(updatedUser.uid, job, location, description)&#10;            _user.value = updatedUser&#10;        }&#10;    }&#10;&#10;    fun createUser(user: User) {&#10;        viewModelScope.launch {&#10;            _updateState.value = Resource.Loading&#10;            val result = userRepository.createUser(user)&#10;            _updateState.value = result&#10;            if (result is Resource.Success) {&#10;                _user.value = user&#10;            }&#10;        }&#10;    }&#10;&#10;    fun uploadAvatar(uri: android.net.Uri) {&#10;        val uid = auth.currentUser?.uid ?: return&#10;        val storage = FirebaseStorage.getInstance()&#10;        val avatarRef = storage.reference.child(&quot;avatars/$uid.jpg&quot;)&#10;        avatarRef.putFile(uri)&#10;            .addOnSuccessListener { taskSnapshot: com.google.firebase.storage.UploadTask.TaskSnapshot -&gt;&#10;                avatarRef.downloadUrl.addOnSuccessListener { downloadUrl: android.net.Uri -&gt;&#10;                    viewModelScope.launch {&#10;                        userRepository.updateAvatarUrl(uid, downloadUrl.toString())&#10;                        android.util.Log.d(&quot;ProfileViewModel&quot;, &quot;Avatar updated: $downloadUrl&quot;)&#10;                    }&#10;                }&#10;            }&#10;            .addOnFailureListener { e: Exception -&gt;&#10;                android.util.Log.e(&quot;ProfileViewModel&quot;, &quot;Failed to upload avatar: ${e.message}&quot;)&#10;            }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>