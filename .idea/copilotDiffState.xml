<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/MatchRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/MatchRepository.kt" />
              <option name="updatedContent" value="package com.example.dating.data&#10;&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class MatchRepository {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    suspend fun saveMatch(userId1: String, userId2: String, status: Boolean) {&#10;        // Ensure userId1 &lt; userId2 alphabetically&#10;        val (firstId, secondId) = if (userId1 &lt; userId2) userId1 to userId2 else userId2 to userId1&#10;        val matchData = hashMapOf(&#10;            &quot;userId1&quot; to firstId,&#10;            &quot;userId2&quot; to secondId,&#10;            &quot;timestamp&quot; to Timestamp.now(),&#10;            &quot;status&quot; to status&#10;        )&#10;        // Check for duplicate (userId1/userId2 only)&#10;        val query = db.collection(&quot;match&quot;)&#10;            .whereEqualTo(&quot;userId1&quot;, firstId)&#10;            .whereEqualTo(&quot;userId2&quot;, secondId)&#10;            .get().await()&#10;        android.util.Log.d(&quot;MatchRepository&quot;, &quot;MatchQuery: userId1=$firstId, userId2=$secondId, resultCount=${query.size()}&quot;)&#10;        if (query.isEmpty) {&#10;            db.collection(&quot;match&quot;).add(matchData)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/Interest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/Interest.kt" />
              <option name="originalContent" value="package com.example.dating.data.model&#10;&#10;class Interest {&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model&#10;&#10;data class Interest(&#10;    val name: String,&#10;    val icon: Int&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/User.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/User.kt" />
              <option name="originalContent" value="package com.example.dating.data.model&#10;&#10;data class User(&#10;    val uid: String = &quot;&quot;,&#10;    val firstName: String = &quot;&quot;,&#10;    val lastName: String = &quot;&quot;,&#10;    val birthday: String? = null,&#10;    val imageUrl: List&lt;String&gt; = emptyList(),&#10;    val avatarUrl: String? = null,&#10;    val gender: String? = null,&#10;    val job: String? = null,&#10;    val location: String? = null,&#10;    val description: String? = null,&#10;    val interests: List&lt;String&gt; = emptyList()&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model&#10;&#10;data class User(&#10;    val uid: String = &quot;&quot;,&#10;    val firstName: String = &quot;&quot;,&#10;    val lastName: String = &quot;&quot;,&#10;    val birthday: String? = null,&#10;    val imageUrl: List&lt;String&gt; = emptyList(),&#10;    val avatarUrl: String? = null,&#10;    val gender: String? = null,&#10;    val job: String? = null,&#10;    val location: String? = null,&#10;    val description: String? = null,&#10;    val interests: List&lt;String&gt; = emptyList(),&#10;    val distance: Int? = null&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/UserRepositoryImpl.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;) : UserRepository {&#10;&#10;    fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            offer(snapshot?.toObject(User::class.java))&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    override suspend fun updateUser(user: User) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun saveProfile(&#10;        userId: String,&#10;        firstName: String,&#10;        lastName: String,&#10;        birthday: String?,&#10;        imageUrl: String?&#10;    ): Resource&lt;Unit&gt; {&#10;        return try {&#10;            val userMap = hashMapOf(&#10;                &quot;firstName&quot; to firstName,&#10;                &quot;lastName&quot; to lastName,&#10;                &quot;birthday&quot; to birthday,&#10;                &quot;imageUrl&quot; to imageUrl&#10;            )&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .set(userMap)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateGender(userId: String, gender: String): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;gender&quot;, gender)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateInterests(userId: String, interests: List&lt;String&gt;): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(&quot;interests&quot;, interests)&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateJobLocationDescription(&#10;        userId: String,&#10;        job: String?,&#10;        location: String?,&#10;        description: String?&#10;    ): Resource&lt;Unit&gt; {&#10;        return try {&#10;            firestore.collection(&quot;users&quot;).document(userId)&#10;                .update(mapOf(&#10;                    &quot;job&quot; to job,&#10;                    &quot;location&quot; to location,&#10;                    &quot;description&quot; to description&#10;                ))&#10;                .await()&#10;            Resource.Success(Unit)&#10;        } catch (e: Exception) {&#10;            Resource.Failure(e)&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.example.dating.data.model.Resource&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import com.example.dating.data.model.User&#10;&#10;class UserRepositoryImpl @Inject constructor(&#10;    private val firestore: FirebaseFirestore&#10;) : UserRepository {&#10;&#10;    override fun getUser(uid: String): Flow&lt;User?&gt; = callbackFlow {&#10;        val docRef = firestore.collection(&quot;users&quot;).document(uid)&#10;        val listener = docRef.addSnapshotListener { snapshot, _ -&gt;&#10;            trySend(snapshot?.toObject(User::class.java))&#10;        }&#10;        awaitClose { listener.remove() }&#10;    }&#10;&#10;    override suspend fun updateUser(user: User) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun saveProfile(&#10;        user: User&#10;    ) {&#10;        firestore.collection(&quot;users&quot;).document(user.uid).set(user).await()&#10;    }&#10;&#10;    override suspend fun updateGender(uid: String, gender: String) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&quot;gender&quot;, gender).await()&#10;    }&#10;&#10;    override suspend fun updateInterests(uid: String, interests: List&lt;String&gt;) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&quot;interests&quot;, interests).await()&#10;    }&#10;&#10;    override suspend fun updateJobLocationDescription(uid: String, job: String?, location: String?, description: String?) {&#10;        firestore.collection(&quot;users&quot;).document(uid).update(&#10;            mapOf(&#10;                &quot;job&quot; to job,&#10;                &quot;location&quot; to location,&#10;                &quot;description&quot; to description&#10;            )&#10;        ).await()&#10;    }&#10;&#10;    override suspend fun uploadAvatar(uid: String, uri: android.net.Uri): String {&#10;        // TODO: Implement Firebase Storage upload and return the URL&#10;        return &quot;&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/naviagtion/AppNavGraph.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/naviagtion/AppNavGraph.kt" />
              <option name="originalContent" value="package com.example.dating.navigation&#10;&#10;import LoginScreen&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.remember&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import com.example.dating.ui.onboarding.OnboardingScreen&#10;import androidx.compose.material3.Text&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.ui.auth.SignUpScreen&#10;import com.example.dating.ui.auth.PhoneNumberScreen&#10;import com.example.dating.ui.auth.VerifyCodeScreen&#10;import com.example.dating.ui.auth.VerifyEmailScreen&#10;import com.example.dating.ui.auth.EmailScreen&#10;import com.example.dating.ui.mainscreens.FavoriteScreen&#10;import com.example.dating.ui.mainscreens.MatchScreen&#10;import com.example.dating.ui.chat.MessagesScreen&#10;import com.example.dating.ui.profile.GenderSelectionScreen&#10;import com.example.dating.ui.profile.InterestSelectionScreen&#10;import com.example.dating.ui.profile.EnableNotificationScreen&#10;import com.example.dating.ui.profile.ProfileScreen&#10;import com.example.dating.ui.profile.SearchFriendScreen&#10;import com.example.dating.viewmodel.AuthViewModel&#10;import com.example.dating.ui.mainscreens.HomeScreen&#10;import com.example.dating.ui.profile.ProfileDetailsScreen&#10;import com.example.dating.viewmodel.HomeViewModel&#10;import com.example.dating.viewmodel.FavoriteViewModel&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavType&#10;import androidx.navigation.navArgument&#10;import com.example.dating.ui.chat.ChatDetailScreen&#10;&#10;import androidx.navigation.compose.navigation&#10;import com.example.dating.viewmodel.ProfileViewModel&#10;&#10;@Composable&#10;fun AppNavGraph(navController: NavHostController, authViewModel: AuthViewModel = hiltViewModel()) {&#10;    val authViewModel = hiltViewModel&lt;AuthViewModel&gt;()&#10;    val messageViewModel = hiltViewModel&lt;com.example.dating.viewmodel.MessagesViewModel&gt;()&#10;&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = &quot;root_graph&quot;&#10;    ) {&#10;        navigation(startDestination = Screen.Login.route, route = &quot;root_graph&quot;) {&#10;            // Onboarding&#10;            composable(Screen.Onboarding.route) {&#10;                OnboardingScreen(navController = navController)&#10;            }&#10;&#10;            composable(Screen.Register.route) {&#10;                SignUpScreen(viewModel = authViewModel, navController = navController)&#10;            }&#10;&#10;            composable(Screen.PhoneNumber.route) {&#10;                // Phone number screen can be implemented here&#10;                PhoneNumberScreen(navController)&#10;            }&#10;&#10;            composable(Screen.Profile.route) {&#10;                ProfileScreen(navController = navController)&#10;            }&#10;&#10;            composable(Screen.ProfileDetails.route) { backStackEntry -&gt;&#10;                val parentEntry = remember(backStackEntry) {&#10;                    navController.getBackStackEntry(&quot;root_graph&quot;)&#10;                }&#10;                val profileViewModel: ProfileViewModel = hiltViewModel(parentEntry)&#10;                ProfileDetailsScreen(navController = navController, profileViewModel)&#10;            }&#10;&#10;            composable(Screen.EmailScreen.route) {&#10;                EmailScreen(navController = navController)&#10;            }&#10;            composable(Screen.VerifyEmail.route) {&#10;                VerifyEmailScreen(navController = navController)&#10;            }&#10;&#10;            composable(Screen.VerifyCode.route) {&#10;                VerifyCodeScreen(navController)&#10;            }&#10;&#10;            composable(Screen.GenderSelect.route) {&#10;                GenderSelectionScreen(navController)&#10;            }&#10;&#10;            composable(Screen.InterestSelect.route) {&#10;                // Interest selection screen can be implemented here&#10;                InterestSelectionScreen(navController)&#10;            }&#10;&#10;            composable(Screen.SearchFriend.route) {&#10;                SearchFriendScreen(navController)&#10;            }&#10;            composable(Screen.EnableNotification.route) {&#10;                // Enable notification screen can be implemented here&#10;                EnableNotificationScreen(navController)&#10;            }&#10;            // Login&#10;            composable(Screen.Login.route) {&#10;                LoginScreen(viewModel = authViewModel, navController = navController)&#10;            }&#10;&#10;            // Home&#10;            composable(Screen.Home.route) { backStackEntry -&gt;&#10;                val homeViewModel: HomeViewModel = hiltViewModel(backStackEntry)&#10;                HomeScreen(navController, homeViewModel)&#10;            }&#10;&#10;            composable(Screen.Messages.route) {&#10;                MessagesScreen(navController, viewModel = messageViewModel)&#10;                // Favorite&#10;                composable(Screen.Favorite.route) { backStackEntry -&gt;&#10;                    val parentEntry = remember(backStackEntry) {&#10;                        navController.getBackStackEntry(&quot;root_graph&quot;)&#10;                    }&#10;                    // Lấy viewModel scoped theo parentEntry&#10;                    val favoriteViewModel: FavoriteViewModel = hiltViewModel(parentEntry)&#10;                    FavoriteScreen(navController, favoriteViewModel)&#10;                }&#10;&#10;                // Match&#10;                composable(&#10;                    route = Screen.Match.route + &quot;/{matchedUserId}&quot;,&#10;                ) { backStackEntry -&gt;&#10;                    val matchedUserId = backStackEntry.arguments?.getString(&quot;matchedUserId&quot;)&#10;                    if (matchedUserId != null) {&#10;                        MatchScreen(navController, matchedUserId)&#10;                    } else {&#10;                        Text(&quot;No matched user ID provided&quot;)&#10;                    }&#10;                }&#10;&#10;                composable(Screen.Messages.route) {&#10;                    MessagesScreen(viewModel = messageViewModel)&#10;                }&#10;            }&#10;&#10;            composable(&#10;                route = Screen.ChatDetail.route,&#10;                arguments = listOf(&#10;                    navArgument(&quot;conversationId&quot;) {&#10;                        type = NavType.StringType&#10;                        nullable = false&#10;                    }&#10;                )&#10;            ) { backStackEntry -&gt;&#10;                val conversationId = backStackEntry.arguments?.getString(&quot;conversationId&quot;)!!&#10;                ChatDetailScreen(conversationId = conversationId, navController = navController)&#10;            }&#10;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.navigation&#10;&#10;import LoginScreen&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.remember&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import com.example.dating.ui.onboarding.OnboardingScreen&#10;import androidx.compose.material3.Text&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.ui.auth.SignUpScreen&#10;import com.example.dating.ui.auth.PhoneNumberScreen&#10;import com.example.dating.ui.auth.VerifyCodeScreen&#10;import com.example.dating.ui.auth.VerifyEmailScreen&#10;import com.example.dating.ui.auth.EmailScreen&#10;import com.example.dating.ui.mainscreens.FavoriteScreen&#10;import com.example.dating.ui.mainscreens.MatchScreen&#10;import com.example.dating.ui.chat.MessagesScreen&#10;import com.example.dating.ui.profile.GenderSelectionScreen&#10;import com.example.dating.ui.profile.InterestSelectionScreen&#10;import com.example.dating.ui.profile.EnableNotificationScreen&#10;import com.example.dating.ui.profile.ProfileScreen&#10;import com.example.dating.ui.profile.SearchFriendScreen&#10;import com.example.dating.viewmodel.AuthViewModel&#10;import com.example.dating.ui.mainscreens.HomeScreen&#10;import com.example.dating.ui.profile.ProfileDetailsScreen&#10;import com.example.dating.viewmodel.HomeViewModel&#10;import com.example.dating.viewmodel.FavoriteViewModel&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavType&#10;import androidx.navigation.navArgument&#10;import com.example.dating.ui.chat.ChatDetailScreen&#10;&#10;import androidx.navigation.compose.navigation&#10;import com.example.dating.viewmodel.ProfileViewModel&#10;&#10;@Composable&#10;fun AppNavGraph(navController: NavHostController, authViewModel: AuthViewModel = hiltViewModel()) {&#10;    val authViewModel = hiltViewModel&lt;AuthViewModel&gt;()&#10;    val messageViewModel = hiltViewModel&lt;com.example.dating.viewmodel.MessagesViewModel&gt;()&#10;&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = &quot;root_graph&quot;&#10;    ) {&#10;        navigation(startDestination = Screen.Login.route, route = &quot;root_graph&quot;) {&#10;            // Onboarding&#10;            composable(Screen.Onboarding.route) {&#10;                OnboardingScreen(navController = navController)&#10;            }&#10;&#10;            composable(Screen.Register.route) {&#10;                SignUpScreen(viewModel = authViewModel, navController = navController)&#10;            }&#10;&#10;            composable(Screen.PhoneNumber.route) {&#10;                // Phone number screen can be implemented here&#10;                PhoneNumberScreen(navController)&#10;            }&#10;&#10;            composable(Screen.Profile.route) {&#10;                ProfileScreen(navController = navController)&#10;            }&#10;&#10;            composable(Screen.ProfileDetails.route) { backStackEntry -&gt;&#10;                val parentEntry = remember(backStackEntry) {&#10;                    navController.getBackStackEntry(&quot;root_graph&quot;)&#10;                }&#10;                val profileViewModel: ProfileViewModel = hiltViewModel(parentEntry)&#10;                ProfileDetailsScreen(navController = navController, profileViewModel)&#10;            }&#10;&#10;            composable(Screen.EmailScreen.route) {&#10;                EmailScreen(navController = navController)&#10;            }&#10;            composable(Screen.VerifyEmail.route) {&#10;                VerifyEmailScreen(navController = navController)&#10;            }&#10;&#10;            composable(Screen.VerifyCode.route) {&#10;                VerifyCodeScreen(navController)&#10;            }&#10;&#10;            composable(Screen.GenderSelect.route) {&#10;                GenderSelectionScreen(navController)&#10;            }&#10;&#10;            composable(Screen.InterestSelect.route) {&#10;                // Interest selection screen can be implemented here&#10;                InterestSelectionScreen(navController)&#10;            }&#10;&#10;            composable(Screen.SearchFriend.route) {&#10;                SearchFriendScreen(navController)&#10;            }&#10;            composable(Screen.EnableNotification.route) {&#10;                // Enable notification screen can be implemented here&#10;                EnableNotificationScreen(navController)&#10;            }&#10;            // Login&#10;            composable(Screen.Login.route) {&#10;                LoginScreen(viewModel = authViewModel, navController = navController)&#10;            }&#10;&#10;            // Home&#10;            composable(Screen.Home.route) { backStackEntry -&gt;&#10;                val homeViewModel: HomeViewModel = hiltViewModel(backStackEntry)&#10;                HomeScreen(navController, homeViewModel)&#10;            }&#10;&#10;            composable(Screen.Messages.route) {&#10;                MessagesScreen(navController, viewModel = messageViewModel)&#10;                // Favorite&#10;                composable(Screen.Favorite.route) { backStackEntry -&gt;&#10;                    val parentEntry = remember(backStackEntry) {&#10;                        navController.getBackStackEntry(&quot;root_graph&quot;)&#10;                    }&#10;                    // Lấy viewModel scoped theo parentEntry&#10;                    val favoriteViewModel: FavoriteViewModel = hiltViewModel(parentEntry)&#10;                    FavoriteScreen(navController, favoriteViewModel)&#10;                }&#10;&#10;                // Match&#10;                composable(&#10;                    route = Screen.Match.route + &quot;/{matchedUserId}&quot;,&#10;                ) { backStackEntry -&gt;&#10;                    val matchedUserId = backStackEntry.arguments?.getString(&quot;matchedUserId&quot;)&#10;                    if (matchedUserId != null) {&#10;                        MatchScreen(navController, matchedUserId)&#10;                    } else {&#10;                        Text(&quot;No matched user ID provided&quot;)&#10;                    }&#10;                }&#10;&#10;                composable(Screen.Messages.route) {&#10;                    MessagesScreen(viewModel = messageViewModel)&#10;                }&#10;            }&#10;&#10;            composable(&#10;                route = Screen.ChatDetail.route,&#10;                arguments = listOf(&#10;                    navArgument(&quot;conversationId&quot;) {&#10;                        type = NavType.StringType&#10;                        nullable = false&#10;                    }&#10;                )&#10;            ) { backStackEntry -&gt;&#10;                val conversationId = backStackEntry.arguments?.getString(&quot;conversationId&quot;)!!&#10;                ChatDetailScreen(conversationId = conversationId, navController = navController)&#10;            }&#10;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/FilterDialog.kt.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/components/FilterDialog.kt.kt" />
              <option name="originalContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FilterScreen(navController: NavController) {&#10;    // State variables&#10;    var selectedInterest by remember { mutableStateOf(&quot;Girls&quot;) }&#10;    var location by remember { mutableStateOf(&quot;Chicago, USA&quot;) }&#10;    var distance by remember { mutableFloatStateOf(40f) }&#10;    var ageRange by remember { mutableStateOf(20f..28f) }&#10;&#10;    // Bottom sheet or dialog content&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .wrapContentHeight()&#10;            .clip(RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp))&#10;            .background(Color.White)&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        // Notch&#10;        Box(&#10;            modifier = Modifier&#10;                .width(40.dp)&#10;                .height(4.dp)&#10;                .background(Color.Gray.copy(alpha = 0.5f), CircleShape)&#10;                .align(Alignment.CenterHorizontally)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Title and Clear&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Filters&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.Black&#10;            )&#10;            TextButton(onClick = { /* TODO: Clear filters */ }) {&#10;                Text(&#10;                    text = &quot;Clear&quot;,&#10;                    color = Color(0xFFFF69B4), // Pink&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Interested in&#10;        Text(&#10;            text = &quot;Interested in&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        SegmentedButtonRow(modifier = Modifier.fillMaxWidth()) {&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Girls&quot;,&#10;                onClick = { selectedInterest = &quot;Girls&quot; },&#10;                shape = RoundedCornerShape(topStart = 8.dp, bottomStart = 8.dp)&#10;            ) {&#10;                Text(&quot;Girls&quot;)&#10;            }&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Boys&quot;,&#10;                onClick = { selectedInterest = &quot;Boys&quot; },&#10;                shape = RoundedCornerShape(0.dp)&#10;            ) {&#10;                Text(&quot;Boys&quot;)&#10;            }&#10;            SegmentedButton(&#10;                selected = selectedInterest == &quot;Both&quot;,&#10;                onClick = { selectedInterest = &quot;Both&quot; },&#10;                shape = RoundedCornerShape(topEnd = 8.dp, bottomEnd = 8.dp)&#10;            ) {&#10;                Text(&quot;Both&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Location&#10;        Text(&#10;            text = &quot;Location&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.align(Alignment.Start)&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        OutlinedTextField(&#10;            value = location,&#10;            onValueChange = { /* Read-only, tap to select */ },&#10;            readOnly = true,&#10;            modifier = Modifier.fillMaxWidth(),&#10;            trailingIcon = {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowForward,&#10;                    contentDescription = &quot;Select location&quot;,&#10;                    tint = Color(0xFFFF0000) // Red&#10;                )&#10;            },&#10;            singleLine = true,&#10;            interactionSource = remember { MutableInteractionSource() }.also { interactionSource -&gt;&#10;                // TODO: Handle click to open location selector&#10;            }&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Distance&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;Distance&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;            Text(&#10;                text = &quot;${distance.toInt()}km&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;        Slider(&#10;            value = distance,&#10;            onValueChange = { distance = it },&#10;            valueRange = 0f..100f, // Assuming max 100km&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = SliderDefaults.colors(&#10;                thumbColor = Color(0xFFBB86FC), // Purple&#10;                activeTrackColor = Color(0xFFBB86FC),&#10;                inactiveTrackColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Age&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;Age&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;            Text(&#10;                text = &quot;${ageRange.start.toInt()}-${ageRange.endInclusive.toInt()}&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;        RangeSlider(&#10;            value = ageRange,&#10;            onValueChange = { ageRange = it },&#10;            valueRange = 18f..100f, // Assuming age range&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = SliderDefaults.colors(&#10;                thumbColor = Color(0xFFBB86FC), // Purple&#10;                activeTrackColor = Color(0xFFBB86FC),&#10;                inactiveTrackColor = Color.LightGray&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // Continue button&#10;        Button(&#10;            onClick = { /* TODO: Apply filters and navigate */ },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(48.dp),&#10;            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFBB86FC).copy(alpha = 0.2f)), // Light purple&#10;            shape = RoundedCornerShape(24.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Continue&quot;,&#10;                color = Color.Black,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.dating.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FilterDialog(&#10;    show: Boolean,&#10;    onDismiss: () -&gt; Unit,&#10;    onApply: (selectedInterest: String, location: String, distance: Float, ageRange: ClosedFloatingPointRange&lt;Float&gt;) -&gt; Unit&#10;) {&#10;    if (!show) return&#10;    var selectedInterest by remember { mutableStateOf(&quot;Girls&quot;) }&#10;    var location by remember { mutableStateOf(&quot;Chicago, USA&quot;) }&#10;    var distance by remember { mutableStateOf(40f) }&#10;    var ageRange by remember { mutableStateOf(20f..28f) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    onApply(selectedInterest, location, distance, ageRange)&#10;                    onDismiss()&#10;                },&#10;                modifier = Modifier.fillMaxWidth().height(48.dp),&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFBB86FC).copy(alpha = 0.2f)),&#10;                shape = RoundedCornerShape(24.dp)&#10;            ) {&#10;                Text(&quot;Continue&quot;, color = Color.Black, fontSize = 16.sp, fontWeight = FontWeight.Bold)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;, color = Color.Gray)&#10;            }&#10;        },&#10;        title = {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&quot;Filters&quot;, fontSize = 20.sp, fontWeight = FontWeight.Bold, color = Color.Black)&#10;                TextButton(onClick = {&#10;                    selectedInterest = &quot;Girls&quot;&#10;                    location = &quot;Chicago, USA&quot;&#10;                    distance = 40f&#10;                    ageRange = 20f..28f&#10;                }) {&#10;                    Text(&quot;Clear&quot;, color = Color(0xFFFF69B4), fontSize = 16.sp)&#10;                }&#10;            }&#10;        },&#10;        text = {&#10;            Column(modifier = Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {&#10;                // Interested in&#10;                Text(&quot;Interested in&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.Center) {&#10;                    FilterSegmentButton(&quot;Girls&quot;, selectedInterest == &quot;Girls&quot;) { selectedInterest = &quot;Girls&quot; }&#10;                    FilterSegmentButton(&quot;Boys&quot;, selectedInterest == &quot;Boys&quot;) { selectedInterest = &quot;Boys&quot; }&#10;                    FilterSegmentButton(&quot;Both&quot;, selectedInterest == &quot;Both&quot;) { selectedInterest = &quot;Both&quot; }&#10;                }&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Location&#10;                Text(&quot;Location&quot;, fontSize = 16.sp, color = Color.Gray, modifier = Modifier.align(Alignment.Start))&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                OutlinedTextField(&#10;                    value = location,&#10;                    onValueChange = { location = it },&#10;                    readOnly = false,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    trailingIcon = {&#10;                        Icon(imageVector = Icons.Default.ArrowForward, contentDescription = &quot;Select location&quot;, tint = Color(0xFFFF0000))&#10;                    },&#10;                    singleLine = true&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Distance&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Distance&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${distance.toInt()}km&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                Slider(&#10;                    value = distance,&#10;                    onValueChange = { distance = it },&#10;                    valueRange = 0f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = Color(0xFFBB86FC),&#10;                        activeTrackColor = Color(0xFFBB86FC),&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                // Age&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Text(&quot;Age&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                    Text(&quot;${ageRange.start.toInt()}-${ageRange.endInclusive.toInt()}&quot;, fontSize = 16.sp, color = Color.Gray)&#10;                }&#10;                RangeSlider(&#10;                    value = ageRange,&#10;                    onValueChange = { ageRange = it },&#10;                    valueRange = 18f..100f,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = SliderDefaults.colors(&#10;                        thumbColor = Color(0xFFBB86FC),&#10;                        activeTrackColor = Color(0xFFBB86FC),&#10;                        inactiveTrackColor = Color.LightGray&#10;                    )&#10;                )&#10;            }&#10;        },&#10;        shape = RoundedCornerShape(24.dp),&#10;        containerColor = Color.White&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun FilterSegmentButton(text: String, selected: Boolean, onClick: () -&gt; Unit) {&#10;    Button(&#10;        onClick = onClick,&#10;        colors = ButtonDefaults.buttonColors(&#10;            containerColor = if (selected) Color(0xFFBB86FC) else Color.LightGray,&#10;            contentColor = if (selected) Color.White else Color.Black&#10;        ),&#10;        modifier = Modifier&#10;            .weight(1f)&#10;            .height(36.dp)&#10;            .padding(horizontal = 2.dp),&#10;        shape = RoundedCornerShape(8.dp)&#10;    ) {&#10;        Text(text)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class HomeViewModel : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val _addFavoriteState = MutableStateFlow&lt;Result&lt;Unit&gt;?&gt;(null)&#10;    val addFavoriteState: StateFlow&lt;Result&lt;Unit&gt;?&gt; = _addFavoriteState&#10;&#10;    fun addFavorite(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        val favorite = hashMapOf(&#10;            &quot;likerId&quot; to likerId,&#10;            &quot;likedId&quot; to likedId,&#10;            &quot;timestamp&quot; to Timestamp.now()&#10;        )&#10;        viewModelScope.launch {&#10;            try {&#10;                db.collection(&quot;favorites&quot;).add(favorite)&#10;                _addFavoriteState.value = Result.success(Unit)&#10;            } catch (e: Exception) {&#10;                _addFavoriteState.value = Result.failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearAddFavoriteState() {&#10;        _addFavoriteState.value = null&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/MatchScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/MatchScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.viewmodel.MatchViewModel&#10;import com.example.dating.viewmodel.ProfileViewModel&#10;&#10;@Composable&#10;fun MatchScreen(navController: NavController, matchedUserId: String?) {&#10;    val matchViewModel: MatchViewModel = hiltViewModel()&#10;    val profileViewModel: ProfileViewModel = hiltViewModel()&#10;&#10;    val currentUser by profileViewModel.user.collectAsState()&#10;    val currentUserInfo by matchViewModel.userInfo.collectAsState()&#10;    val matchedUserInfo by matchViewModel.matchedUserInfo.collectAsState()&#10;&#10;    // Set current user info in MatchViewModel&#10;    LaunchedEffect(currentUser) {&#10;        matchViewModel.setUser(currentUser)&#10;    }&#10;&#10;    // Set matched user info in MatchViewModel&#10;    LaunchedEffect(matchedUserId) {&#10;        if (matchedUserId != null) {&#10;            val matchedUser = matchViewModel.getUserById(matchedUserId)&#10;            matchViewModel.setMatchedUser(matchedUser)&#10;        }&#10;    }&#10;&#10;    // Save the match when both users are available&#10;    LaunchedEffect(currentUserInfo, matchedUserInfo) {&#10;        if (currentUserInfo != null &amp;&amp; matchedUserInfo != null) {&#10;            matchViewModel.saveMatch(currentUserInfo.uid, matchedUserInfo.uid, true)&#10;        }&#10;    }&#10;&#10;    Column(modifier = Modifier.fillMaxSize()) {&#10;&#10;&#10;        // Main content&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(AppColors.GradientBackground) // Light purple&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(horizontal = 32.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.Center&#10;            ) {&#10;                Box(modifier = Modifier.height(300.dp)) {&#10;&#10;                    // Upper right profile photo (current user)&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(width = 190.dp, height = 280.dp)&#10;                            .align(Alignment.TopEnd)&#10;                            .offset(x = 55.dp, y = (-30).dp)&#10;                            .rotate(10f)&#10;                            .clip(RoundedCornerShape(24.dp))&#10;                            .background(Color.Black)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = &quot;Current User&quot;,&#10;                            tint = Color.Gray.copy(alpha = 0.4f),&#10;                            modifier = Modifier.fillMaxSize()&#10;                        )&#10;                    }&#10;&#10;                    // Lower left profile photo (matched user)&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(width = 190.dp, height = 280.dp)&#10;                            .align(Alignment.BottomStart)&#10;                            .offset(x = (-55).dp, y = 90.dp)&#10;                            .rotate(-10f)&#10;                            .clip(RoundedCornerShape(24.dp))&#10;                            .background(Color.Black)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = &quot;Matched User&quot;,&#10;                            tint = Color.Gray.copy(alpha = 0.4f),&#10;                            modifier = Modifier.fillMaxSize()&#10;                        )&#10;                    }&#10;&#10;                    // Heart for upper right photo&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(60.dp)&#10;                            .align(Alignment.TopEnd)&#10;                            .offset(x = (-75).dp, y = (-50).dp)&#10;                            .rotate(10f)&#10;                            .background(AppColors.Text_Pink, CircleShape),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Favorite,&#10;                            contentDescription = &quot;Heart&quot;,&#10;                            tint = Color.White,&#10;                            modifier = Modifier.size(22.dp)&#10;                        )&#10;                    }&#10;&#10;                    // Heart for lower left photo&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(60.dp)&#10;                            .align(Alignment.BottomStart)&#10;                            .offset(x = (-60).dp, y = 120.dp)&#10;                            .rotate(-10f)&#10;                            .background(AppColors.Text_Pink, CircleShape),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Favorite,&#10;                            contentDescription = &quot;Heart&quot;,&#10;                            tint = Color.White,&#10;                            modifier = Modifier.size(22.dp)&#10;                        )&#10;                    }&#10;&#10;                }&#10;                Spacer(modifier = Modifier.height(160.dp))&#10;                Text(&#10;                    text = &quot;It's a match, ${currentUserInfo?.firstName ?: &quot;You&quot;}!&quot;,&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 32.sp,&#10;                    color = Color.Black,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;                // Example: Show matched user name&#10;                Text(&#10;                    text = &quot;Matched with: ${matchedUserInfo?.firstName ?: &quot;Unknown&quot;}&quot;,&#10;                    fontSize = 20.sp,&#10;                    color = Color.Black,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;                // You can use currentUserInfo?.avatarUrl and matchedUserInfo?.avatarUrl for images&#10;                Text(&#10;                    text = &quot;Start a conversation now with each other.&quot;,&#10;                    fontSize = 16.sp,&#10;                    color = Color.Black,&#10;                    modifier = Modifier.padding(bottom = 60.dp)&#10;                )&#10;                Button(&#10;                    onClick = { /* TODO: Implement chat navigation */ },&#10;                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4A154B)),&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp)&#10;                ) {&#10;                    Text(&quot;Say hello&quot;, color = Color.White, fontSize = 18.sp, fontWeight = FontWeight.Bold)&#10;                }&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                OutlinedButton(&#10;                    onClick = { navController.popBackStack(&quot;home&quot;, inclusive = false) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp),&#10;                    colors = ButtonDefaults.outlinedButtonColors(containerColor = Color.White)&#10;                ) {&#10;                    Text(&quot;Keep swiping&quot;, color = Color.Black, fontSize = 18.sp, fontWeight = FontWeight.Bold)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.dating.viewmodel.MatchViewModel&#10;import com.example.dating.viewmodel.ProfileViewModel&#10;&#10;@Composable&#10;fun MatchScreen(navController: NavController, matchedUserId: String?) {&#10;    val matchViewModel: MatchViewModel = hiltViewModel()&#10;    val profileViewModel: ProfileViewModel = hiltViewModel()&#10;&#10;    val currentUser by profileViewModel.user.collectAsState()&#10;    val currentUserInfo by matchViewModel.userInfo.collectAsState()&#10;    val matchedUserInfo by matchViewModel.matchedUserInfo.collectAsState()&#10;&#10;    // Set current user info in MatchViewModel&#10;    LaunchedEffect(currentUser) {&#10;        matchViewModel.setUser(currentUser)&#10;    }&#10;&#10;    // Set matched user info in MatchViewModel&#10;    LaunchedEffect(matchedUserId) {&#10;        if (matchedUserId != null) {&#10;            val matchedUser = matchViewModel.getUserById(matchedUserId)&#10;            matchViewModel.setMatchedUser(matchedUser)&#10;        }&#10;    }&#10;&#10;    // Save the match when both users are available&#10;    LaunchedEffect(currentUserInfo.value, matchedUserInfo.value) {&#10;        if (currentUserInfo.value != null &amp;&amp; matchedUserInfo.value != null) {&#10;            matchViewModel.saveMatch(currentUserInfo.value.uid, matchedUserInfo.value.uid, true)&#10;        }&#10;    }&#10;&#10;    Column(modifier = Modifier.fillMaxSize()) {&#10;&#10;&#10;        // Main content&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(AppColors.GradientBackground) // Light purple&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(horizontal = 32.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.Center&#10;            ) {&#10;                Box(modifier = Modifier.height(300.dp)) {&#10;&#10;                    // Upper right profile photo (current user)&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(width = 190.dp, height = 280.dp)&#10;                            .align(Alignment.TopEnd)&#10;                            .offset(x = 55.dp, y = (-30).dp)&#10;                            .rotate(10f)&#10;                            .clip(RoundedCornerShape(24.dp))&#10;                            .background(Color.Black)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = &quot;Current User&quot;,&#10;                            tint = Color.Gray.copy(alpha = 0.4f),&#10;                            modifier = Modifier.fillMaxSize()&#10;                        )&#10;                    }&#10;&#10;                    // Lower left profile photo (matched user)&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(width = 190.dp, height = 280.dp)&#10;                            .align(Alignment.BottomStart)&#10;                            .offset(x = (-55).dp, y = 90.dp)&#10;                            .rotate(-10f)&#10;                            .clip(RoundedCornerShape(24.dp))&#10;                            .background(Color.Black)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = &quot;Matched User&quot;,&#10;                            tint = Color.Gray.copy(alpha = 0.4f),&#10;                            modifier = Modifier.fillMaxSize()&#10;                        )&#10;                    }&#10;&#10;                    // Heart for upper right photo&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(60.dp)&#10;                            .align(Alignment.TopEnd)&#10;                            .offset(x = (-75).dp, y = (-50).dp)&#10;                            .rotate(10f)&#10;                            .background(AppColors.Text_Pink, CircleShape),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Favorite,&#10;                            contentDescription = &quot;Heart&quot;,&#10;                            tint = Color.White,&#10;                            modifier = Modifier.size(22.dp)&#10;                        )&#10;                    }&#10;&#10;                    // Heart for lower left photo&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(60.dp)&#10;                            .align(Alignment.BottomStart)&#10;                            .offset(x = (-60).dp, y = 120.dp)&#10;                            .rotate(-10f)&#10;                            .background(AppColors.Text_Pink, CircleShape),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Favorite,&#10;                            contentDescription = &quot;Heart&quot;,&#10;                            tint = Color.White,&#10;                            modifier = Modifier.size(22.dp)&#10;                        )&#10;                    }&#10;&#10;                }&#10;                Spacer(modifier = Modifier.height(160.dp))&#10;                Text(&#10;                    text = &quot;It's a match, ${currentUserInfo?.firstName ?: &quot;You&quot;}!&quot;,&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 32.sp,&#10;                    color = Color.Black,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;                // Example: Show matched user name&#10;                Text(&#10;                    text = &quot;Matched with: ${matchedUserInfo?.firstName ?: &quot;Unknown&quot;}&quot;,&#10;                    fontSize = 20.sp,&#10;                    color = Color.Black,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;                // You can use currentUserInfo?.avatarUrl and matchedUserInfo?.avatarUrl for images&#10;                Text(&#10;                    text = &quot;Start a conversation now with each other.&quot;,&#10;                    fontSize = 16.sp,&#10;                    color = Color.Black,&#10;                    modifier = Modifier.padding(bottom = 60.dp)&#10;                )&#10;                Button(&#10;                    onClick = { /* TODO: Implement chat navigation */ },&#10;                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4A154B)),&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp)&#10;                ) {&#10;                    Text(&quot;Say hello&quot;, color = Color.White, fontSize = 18.sp, fontWeight = FontWeight.Bold)&#10;                }&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                OutlinedButton(&#10;                    onClick = { navController.popBackStack(&quot;home&quot;, inclusive = false) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp),&#10;                    colors = ButtonDefaults.outlinedButtonColors(containerColor = Color.White)&#10;                ) {&#10;                    Text(&quot;Keep swiping&quot;, color = Color.Black, fontSize = 18.sp, fontWeight = FontWeight.Bold)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>