<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/MatchRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/MatchRepository.kt" />
              <option name="updatedContent" value="package com.example.dating.data&#10;&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class MatchRepository {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    suspend fun saveMatch(userId1: String, userId2: String, status: Boolean) {&#10;        // Ensure userId1 &lt; userId2 alphabetically&#10;        val (firstId, secondId) = if (userId1 &lt; userId2) userId1 to userId2 else userId2 to userId1&#10;        val matchData = hashMapOf(&#10;            &quot;userId1&quot; to firstId,&#10;            &quot;userId2&quot; to secondId,&#10;            &quot;timestamp&quot; to Timestamp.now(),&#10;            &quot;status&quot; to status&#10;        )&#10;        // Check for duplicate (userId1/userId2 only)&#10;        val query = db.collection(&quot;match&quot;)&#10;            .whereEqualTo(&quot;userId1&quot;, firstId)&#10;            .whereEqualTo(&quot;userId2&quot;, secondId)&#10;            .get().await()&#10;        android.util.Log.d(&quot;MatchRepository&quot;, &quot;MatchQuery: userId1=$firstId, userId2=$secondId, resultCount=${query.size()}&quot;)&#10;        if (query.isEmpty) {&#10;            db.collection(&quot;match&quot;).add(matchData)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/FavoriteRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/FavoriteRepository.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class FavoriteRepository {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    suspend fun addFavorite(likerId: String, likedId: String): Boolean {&#10;        val favorite = hashMapOf(&#10;            &quot;likerId&quot; to likerId,&#10;            &quot;likedId&quot; to likedId,&#10;            &quot;timestamp&quot; to Timestamp.now()&#10;        )&#10;        val query = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likerId&quot;, likerId)&#10;            .whereEqualTo(&quot;likedId&quot;, likedId)&#10;            .get().await()&#10;        return if (query.isEmpty) {&#10;            db.collection(&quot;favorites&quot;).add(favorite)&#10;            true&#10;        } else {&#10;            false&#10;        }&#10;    }&#10;&#10;    suspend fun isMatch(likerId: String, likedId: String): Boolean {&#10;        val matchQuery = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likerId&quot;, likedId)&#10;            .whereEqualTo(&quot;likedId&quot;, likerId)&#10;            .get().await()&#10;        return !matchQuery.isEmpty&#10;    }&#10;&#10;    suspend fun deleteFavorite(likerId: String, likedId: String) {&#10;        val query = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likerId&quot;, likerId)&#10;            .whereEqualTo(&quot;likedId&quot;, likedId)&#10;            .get().await()&#10;        for (doc in query.documents) {&#10;            db.collection(&quot;favorites&quot;).document(doc.id).delete().await()&#10;        }&#10;    }&#10;&#10;    suspend fun getFavoritesByLikedId(likedId: String): List&lt;Map&lt;String, Any&gt;&gt; {&#10;        val query = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likedId&quot;, likedId)&#10;            .get().await()&#10;        return query.documents.mapNotNull { it.data }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class FavoriteRepository {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    suspend fun addFavorite(likerId: String, likedId: String): Boolean {&#10;        val favorite = hashMapOf(&#10;            &quot;likerId&quot; to likerId,&#10;            &quot;likedId&quot; to likedId,&#10;            &quot;timestamp&quot; to Timestamp.now()&#10;        )&#10;        val query = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likerId&quot;, likerId)&#10;            .whereEqualTo(&quot;likedId&quot;, likedId)&#10;            .get().await()&#10;        return if (query.isEmpty) {&#10;            db.collection(&quot;favorites&quot;).add(favorite)&#10;            true&#10;        } else {&#10;            false&#10;        }&#10;    }&#10;&#10;    suspend fun isMatch(likerId: String, likedId: String): Boolean {&#10;        val matchQuery = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likerId&quot;, likedId)&#10;            .whereEqualTo(&quot;likedId&quot;, likerId)&#10;            .get().await()&#10;        return !matchQuery.isEmpty&#10;    }&#10;&#10;    suspend fun deleteFavorite(likerId: String, likedId: String) {&#10;        val query = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likerId&quot;, likerId)&#10;            .whereEqualTo(&quot;likedId&quot;, likedId)&#10;            .get().await()&#10;        for (doc in query.documents) {&#10;            db.collection(&quot;favorites&quot;).document(doc.id).delete().await()&#10;        }&#10;    }&#10;&#10;    suspend fun getFavoritesByLikedId(likedId: String): List&lt;Map&lt;String, Any&gt;&gt; {&#10;        val query = db.collection(&quot;favorites&quot;)&#10;            .whereEqualTo(&quot;likedId&quot;, likedId)&#10;            .get().await()&#10;        return query.documents.mapNotNull { it.data }&#10;    }&#10;&#10;    suspend fun getUserProfilesByIds(userIds: List&lt;String&gt;): List&lt;Map&lt;String, Any&gt;&gt; {&#10;        if (userIds.isEmpty()) return emptyList()&#10;        val snapshot = db.collection(&quot;users&quot;)&#10;            .whereIn(com.google.firebase.firestore.FieldPath.documentId(), userIds.take(9))&#10;            .get().await()&#10;        return snapshot.documents.mapNotNull { it.data?.plus(&quot;uid&quot; to it.id) }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/MatchRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/data/model/repository/MatchRepository.kt" />
              <option name="originalContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class MatchRepository {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    suspend fun saveMatch(userId1: String, userId2: String, status: Boolean) {&#10;        // Ensure userId1 &lt; userId2 alphabetically&#10;        val (firstId, secondId) = if (userId1 &lt; userId2) userId1 to userId2 else userId2 to userId1&#10;        val matchData = hashMapOf(&#10;            &quot;userId1&quot; to firstId,&#10;            &quot;userId2&quot; to secondId,&#10;            &quot;timestamp&quot; to Timestamp.now(),&#10;            &quot;status&quot; to status&#10;        )&#10;        // Check for duplicate (userId1/userId2 only)&#10;        val query = db.collection(&quot;match&quot;)&#10;            .whereEqualTo(&quot;userId1&quot;, firstId)&#10;            .whereEqualTo(&quot;userId2&quot;, secondId)&#10;            .get().await()&#10;        android.util.Log.d(&quot;MatchRepository&quot;, &quot;MatchQuery: userId1=$firstId, userId2=$secondId, resultCount=${query.size()}&quot;)&#10;        if (query.isEmpty) {&#10;            db.collection(&quot;match&quot;).add(matchData)&#10;        }&#10;    }&#10;&#10;    suspend fun getUserFirstName(uid: String): String {&#10;        val db = FirebaseFirestore.getInstance()&#10;        return try {&#10;            val doc = db.collection(&quot;users&quot;).document(uid).get().await()&#10;            doc.getString(&quot;firstName&quot;) ?: &quot;You&quot;&#10;        } catch (e: Exception) {&#10;            &quot;You&quot;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.data.model.repository&#10;&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class MatchRepository {&#10;    private val db = FirebaseFirestore.getInstance()&#10;&#10;    suspend fun saveMatch(userId1: String, userId2: String, status: Boolean) {&#10;        // Ensure userId1 &lt; userId2 alphabetically&#10;        val (firstId, secondId) = if (userId1 &lt; userId2) userId1 to userId2 else userId2 to userId1&#10;        val matchData = hashMapOf(&#10;            &quot;userId1&quot; to firstId,&#10;            &quot;userId2&quot; to secondId,&#10;            &quot;timestamp&quot; to Timestamp.now(),&#10;            &quot;status&quot; to status&#10;        )&#10;        // Check for duplicate (userId1/userId2 only)&#10;        val query = db.collection(&quot;match&quot;)&#10;            .whereEqualTo(&quot;userId1&quot;, firstId)&#10;            .whereEqualTo(&quot;userId2&quot;, secondId)&#10;            .get().await()&#10;        android.util.Log.d(&quot;MatchRepository&quot;, &quot;MatchQuery: userId1=$firstId, userId2=$secondId, resultCount=${query.size()}&quot;)&#10;        if (query.isEmpty) {&#10;            db.collection(&quot;match&quot;).add(matchData)&#10;        }&#10;    }&#10;&#10;    suspend fun getUserFirstName(uid: String): String {&#10;        val db = FirebaseFirestore.getInstance()&#10;        return try {&#10;            val doc = db.collection(&quot;users&quot;).document(uid).get().await()&#10;            val firstName = doc.getString(&quot;firstName&quot;)&#10;            android.util.Log.d(&quot;MatchRepository&quot;, &quot;getUserFirstName: uid=$uid, firstName=$firstName, docExists=${doc.exists()}&quot;)&#10;            firstName ?: &quot;You&quot;&#10;        } catch (e: Exception) {&#10;            android.util.Log.e(&quot;MatchRepository&quot;, &quot;getUserFirstName error: uid=$uid, exception=${e.message}&quot;)&#10;            &quot;You&quot;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/naviagtion/AppNavGraph.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/naviagtion/AppNavGraph.kt" />
              <option name="originalContent" value="&#10;package com.example.dating.navigation&#10;&#10;import LoginScreen&#10;import androidx.compose.runtime.Composable&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import com.example.dating.ui.onboarding.OnboardingScreen&#10;import androidx.compose.material3.Text&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.ui.auth.SignUpScreen&#10;import com.example.dating.ui.auth.PhoneNumberScreen&#10;import com.example.dating.ui.auth.VerifyCodeScreen&#10;import com.example.dating.ui.auth.VerifyEmailScreen&#10;import com.example.dating.ui.auth.EmailScreen&#10;import com.example.dating.ui.mainscreens.FavoriteScreen&#10;import com.example.dating.ui.mainscreens.MatchScreen&#10;import com.example.dating.ui.profile.GenderSelectionScreen&#10;import com.example.dating.ui.profile.InterestSelectionScreen&#10;import com.example.dating.ui.profile.EnableNotificationScreen&#10;import com.example.dating.ui.profile.ProfileScreen&#10;import com.example.dating.ui.profile.SearchFriendScreen&#10;import com.example.dating.viewmodel.AuthViewModel&#10;import com.example.dating.ui.mainscreens.HomeScreen&#10;import com.example.dating.ui.profile.ProfileDetailsScreen&#10;&#10;@Composable&#10;fun AppNavGraph(navController: NavHostController, authViewModel: AuthViewModel = viewModel()) {&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = Screen.Home.route&#10;    ) {&#10;        // Onboarding&#10;        composable(Screen.Onboarding.route) {&#10;            OnboardingScreen(navController = navController)&#10;        }&#10;&#10;        composable(Screen.Register.route) {&#10;            SignUpScreen(navController)&#10;        }&#10;&#10;        composable(Screen.PhoneNumber.route) {&#10;            // Phone number screen can be implemented here&#10;            PhoneNumberScreen(navController)&#10;        }&#10;&#10;        composable(Screen.Profile.route) {&#10;            ProfileScreen(navController = navController)&#10;        }&#10;&#10;        composable(Screen.ProfileDetails.route) {&#10;            ProfileDetailsScreen(navController = navController)&#10;        }&#10;&#10;        composable(Screen.EmailScreen.route) {&#10;            EmailScreen(navController = navController)&#10;        }&#10;        composable(Screen.VerifyEmail.route) {&#10;            VerifyEmailScreen(navController = navController)&#10;        }&#10;&#10;        composable(Screen.VerifyCode.route) {&#10;            VerifyCodeScreen(navController)&#10;        }&#10;&#10;        composable(Screen.GenderSelect.route) {&#10;            GenderSelectionScreen(navController)&#10;        }&#10;&#10;        composable(Screen.InterestSelect.route) {&#10;            // Interest selection screen can be implemented here&#10;            InterestSelectionScreen(navController)&#10;        }&#10;&#10;        composable(Screen.SearchFriend.route) {&#10;            SearchFriendScreen(navController)&#10;        }&#10;        composable(Screen.EnableNotification.route) {&#10;            // Enable notification screen can be implemented here&#10;            EnableNotificationScreen(navController)&#10;        }&#10;        // Login&#10;        composable(Screen.Login.route) {&#10;            LoginScreen(viewModel = authViewModel, navController = navController)&#10;        }&#10;&#10;        // Home&#10;        composable(Screen.Home.route) {&#10;            HomeScreen(navController)&#10;        }&#10;&#10;        // Favorite&#10;        composable(Screen.Favorite.route) {&#10;            FavoriteScreen(navController)&#10;        }&#10;&#10;        // Match&#10;        composable(Screen.Match.route) {&#10;            MatchScreen(navController)&#10;        }&#10;    }&#10;}&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.example.dating.navigation&#10;&#10;import LoginScreen&#10;import androidx.compose.runtime.Composable&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import com.example.dating.ui.onboarding.OnboardingScreen&#10;import androidx.compose.material3.Text&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.ui.auth.SignUpScreen&#10;import com.example.dating.ui.auth.PhoneNumberScreen&#10;import com.example.dating.ui.auth.VerifyCodeScreen&#10;import com.example.dating.ui.auth.VerifyEmailScreen&#10;import com.example.dating.ui.auth.EmailScreen&#10;import com.example.dating.ui.mainscreens.FavoriteScreen&#10;import com.example.dating.ui.mainscreens.MatchScreen&#10;import com.example.dating.ui.profile.GenderSelectionScreen&#10;import com.example.dating.ui.profile.InterestSelectionScreen&#10;import com.example.dating.ui.profile.EnableNotificationScreen&#10;import com.example.dating.ui.profile.ProfileScreen&#10;import com.example.dating.ui.profile.SearchFriendScreen&#10;import com.example.dating.viewmodel.AuthViewModel&#10;import com.example.dating.ui.mainscreens.HomeScreen&#10;import com.example.dating.ui.profile.ProfileDetailsScreen&#10;&#10;@Composable&#10;fun AppNavGraph(navController: NavHostController, authViewModel: AuthViewModel = viewModel()) {&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = Screen.Home.route&#10;    ) {&#10;        // Onboarding&#10;        composable(Screen.Onboarding.route) {&#10;            OnboardingScreen(navController = navController)&#10;        }&#10;&#10;        composable(Screen.Register.route) {&#10;            SignUpScreen(navController)&#10;        }&#10;&#10;        composable(Screen.PhoneNumber.route) {&#10;            // Phone number screen can be implemented here&#10;            PhoneNumberScreen(navController)&#10;        }&#10;&#10;        composable(Screen.Profile.route) {&#10;            ProfileScreen(navController = navController)&#10;        }&#10;&#10;        composable(Screen.ProfileDetails.route) {&#10;            ProfileDetailsScreen(navController = navController)&#10;        }&#10;&#10;        composable(Screen.EmailScreen.route) {&#10;            EmailScreen(navController = navController)&#10;        }&#10;        composable(Screen.VerifyEmail.route) {&#10;            VerifyEmailScreen(navController = navController)&#10;        }&#10;&#10;        composable(Screen.VerifyCode.route) {&#10;            VerifyCodeScreen(navController)&#10;        }&#10;&#10;        composable(Screen.GenderSelect.route) {&#10;            GenderSelectionScreen(navController)&#10;        }&#10;&#10;        composable(Screen.InterestSelect.route) {&#10;            // Interest selection screen can be implemented here&#10;            InterestSelectionScreen(navController)&#10;        }&#10;&#10;        composable(Screen.SearchFriend.route) {&#10;            SearchFriendScreen(navController)&#10;        }&#10;        composable(Screen.EnableNotification.route) {&#10;            // Enable notification screen can be implemented here&#10;            EnableNotificationScreen(navController)&#10;        }&#10;        // Login&#10;        composable(Screen.Login.route) {&#10;            LoginScreen(viewModel = authViewModel, navController = navController)&#10;        }&#10;&#10;        // Home&#10;        composable(Screen.Home.route) {&#10;            HomeScreen(navController)&#10;        }&#10;&#10;        // Favorite&#10;        composable(Screen.Favorite.route) {&#10;            FavoriteScreen(navController)&#10;        }&#10;&#10;        // Match&#10;        composable(&#10;            route = Screen.Match.route + &quot;/{matchedUserId}&quot;,&#10;        ) { backStackEntry -&gt;&#10;            val matchedUserId = backStackEntry.arguments?.getString(&quot;matchedUserId&quot;)&#10;            if (matchedUserId != null) {&#10;                MatchScreen(navController, matchedUserId)&#10;            } else {&#10;                Text(&quot;No matched user ID provided&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.gestures.detectDragGestures&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateListOf&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.IntOffset&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.dating.R&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.animation.core.Animatable&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.runtime.Applier&#10;import kotlinx.coroutines.tasks.await&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.compose.ui.zIndex&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import java.util.Calendar&#10;import androidx.compose.runtime.MutableState&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.util.lerp&#10;import androidx.compose.animation.core.Spring&#10;import androidx.compose.animation.core.spring&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.viewmodel.HomeViewModel&#10;import androidx.compose.runtime.collectAsState&#10;&#10;@Composable&#10;fun HomeScreen(navController: NavController) {&#10;    val homeViewModel: HomeViewModel = viewModel()&#10;    val profiles by homeViewModel.profiles.collectAsState()&#10;    val isLoading by homeViewModel.isLoading.collectAsState()&#10;    val errorMessage by homeViewModel.errorMessage.collectAsState()&#10;    val profileIndex = remember { mutableStateOf(0) }&#10;&#10;    // Helper functions&#10;    suspend fun handleProfileAction(isLike: Boolean, profileIndex: MutableState&lt;Int&gt;, profiles: List&lt;Map&lt;String, Any&gt;&gt;, homeViewModel: HomeViewModel, navController: NavController) {&#10;        val currentProfile = profiles.getOrNull(profileIndex.value)&#10;        if (currentProfile != null) {&#10;            if (isLike) {&#10;                val likedUserId = currentProfile[&quot;uid&quot;] as? String&#10;                if (likedUserId != null) {&#10;                    homeViewModel.likeProfile(likedUserId)&#10;                    // Check for match and navigate if found&#10;                    val matchId = homeViewModel.matchFoundUserId.value&#10;                    if (matchId != null) {&#10;                        navController.navigate(&quot;match&quot;)&#10;                    }&#10;                }&#10;            }&#10;            profileIndex.value++&#10;        }&#10;    }&#10;    suspend fun animateSwipe(offsetX: Animatable&lt;Float, *&gt;, direction: Float) {&#10;        offsetX.animateTo(direction * 400f, tween(300))&#10;        offsetX.snapTo(0f)&#10;    }&#10;&#10;    LaunchedEffect(Unit) {&#10;        homeViewModel.fetchHome()&#10;    }&#10;&#10;    // Observe matchFoundUserId and navigate if a match is found&#10;    val matchFoundUserId by homeViewModel.matchFoundUserId.collectAsState()&#10;    LaunchedEffect(matchFoundUserId) {&#10;        if (matchFoundUserId != null) {&#10;            navController.navigate(&quot;match_screen/${matchFoundUserId}&quot;)&#10;        }&#10;    }&#10;&#10;    // Use Box to overlay BottomNavigationBar and keep it fixed at the bottom&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(AppColors.MainBackground)&#10;        ) {&#10;            HomeHeader(navController)&#10;            if (isLoading) {&#10;                Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else if (errorMessage != null) {&#10;                Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                    Text(&quot;Error: $errorMessage&quot;, color = Color.Red)&#10;                }&#10;            } else {&#10;                ProfileCard(&#10;                    profiles = profiles,&#10;                    profileIndex = profileIndex,&#10;                    handleProfileAction = ::handleProfileAction,&#10;                    animateSwipe = ::animateSwipe&#10;                )&#10;                ActionButtons(&#10;                    profiles = profiles,&#10;                    profileIndex = profileIndex,&#10;                    handleProfileAction = ::handleProfileAction,&#10;                    animateSwipe = ::animateSwipe&#10;                )&#10;            }&#10;        }&#10;        // Fixed BottomNavigationBar&#10;        Box(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .fillMaxWidth()&#10;        ) {&#10;            BottomNavigationBar(navController)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HomeHeader(navController: NavController) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(start = 48.dp, end = 48.dp, top = 40.dp, bottom = 30.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;&#10;        Text(&#10;            text = &quot;Discover&quot;,&#10;            color = Color.Black,&#10;            fontWeight = FontWeight.Bold,&#10;            fontSize = 30.sp&#10;        )&#10;&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileCard(&#10;    profiles: List&lt;Map&lt;String, Any&gt;&gt;,&#10;    profileIndex: MutableState&lt;Int&gt;,&#10;    handleProfileAction: suspend (Boolean, MutableState&lt;Int&gt;, List&lt;Map&lt;String, Any&gt;&gt;, HomeViewModel) -&gt; Unit,&#10;    animateSwipe: suspend (Animatable&lt;Float, *&gt;, Float) -&gt; Unit,&#10;    homeViewModel: HomeViewModel = viewModel()&#10;) {&#10;    val currentProfile = profiles.getOrNull(profileIndex.value)&#10;&#10;    if (currentProfile == null) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(900.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Text(&quot;No profiles available&quot;, color = Color.Gray)&#10;        }&#10;        return&#10;    }&#10;&#10;    val firstName = currentProfile[&quot;firstName&quot;] as? String ?: &quot;&quot;&#10;    val lastName = currentProfile[&quot;lastName&quot;] as? String ?: &quot;&quot;&#10;    val name = (firstName + &quot; &quot; + lastName).trim().ifEmpty { &quot;Unknown&quot; }&#10;    val birthday = currentProfile[&quot;birthday&quot;] as? String&#10;    Log.d(&quot;YearBug&quot;, &quot;Year: $birthday&quot;)&#10;&#10;    val age = birthday?.let {&#10;        try {&#10;            // Expecting format dd/MM/yyyy&#10;            val year = it.split(&quot;/&quot;).getOrNull(2)?.toInt() ?: throw Exception(&quot;Invalid date&quot;)&#10;            Log.d(&quot;YearBug&quot;, &quot;Year: $year&quot;)&#10;            val currentYear = Calendar.getInstance().get(Calendar.YEAR)&#10;            (currentYear - year).toString()&#10;        } catch (e: Exception) {&#10;            &quot;?&quot;&#10;        }&#10;    } ?: &quot;?&quot;&#10;    val description = currentProfile[&quot;description&quot;] as? String ?: &quot;No description&quot;&#10;    val distance = currentProfile[&quot;distance&quot;]?.toString() ?: &quot;1 km&quot;&#10;&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;    val offsetY = remember { Animatable(0f) }&#10;    val isDragging = remember { mutableStateOf(false) }&#10;    val likeProgress = (offsetX.value / 200f).coerceIn(0f, 1f)&#10;    val dislikeProgress = (-offsetX.value / 200f).coerceIn(0f, 1f)&#10;    val iconAlpha = maxOf(likeProgress, dislikeProgress)&#10;    val iconScale = 1f + 0.3f * iconAlpha&#10;    val cardRotation = (offsetX.value / 15).coerceIn(-25f, 25f)&#10;    val threshold = 200f&#10;    val nextProfile = profiles.getOrNull(profileIndex.value + 1)&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(550.dp)&#10;            .padding(horizontal = 30.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Next card (subtle scale/alpha)&#10;        if (nextProfile != null) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(550.dp)&#10;                    .clip(RoundedCornerShape(32.dp))&#10;                    .background(Color(0xFF23222B))&#10;                    .graphicsLayer(&#10;                        scaleX = lerp(0.95f, 1f, iconAlpha),&#10;                        scaleY = lerp(0.95f, 1f, iconAlpha),&#10;                        alpha = lerp(0.7f, 1f, iconAlpha)&#10;                    )&#10;            ) {}&#10;        }&#10;        // Top card (draggable)&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(550.dp)&#10;                .offset { IntOffset(offsetX.value.toInt(), offsetY.value.toInt()) }&#10;                .rotate(cardRotation)&#10;                .clip(RoundedCornerShape(32.dp))&#10;                .background(Color(0xFF23222B))&#10;                .pointerInput(profileIndex.value) {&#10;                    detectDragGestures(&#10;                        onDragStart = { isDragging.value = true },&#10;                        onDragEnd = {&#10;                            isDragging.value = false&#10;                            scope.launch {&#10;                                when {&#10;                                    offsetX.value &gt; threshold -&gt; {&#10;                                        handleProfileAction(true, profileIndex, profiles, homeViewModel, navController)&#10;                                        animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;                                        offsetY.snapTo(0f)&#10;                                    }&#10;                                    offsetX.value &lt; -threshold -&gt; {&#10;                                        handleProfileAction(false, profileIndex, profiles, homeViewModel, navController)&#10;                                        animateSwipe(offsetX, -1f) // Pass direction explicitly&#10;                                        offsetY.snapTo(0f)&#10;                                    }&#10;                                    else -&gt; {&#10;                                        offsetX.animateTo(0f, spring(stiffness = Spring.StiffnessMedium))&#10;                                        offsetY.animateTo(0f, spring(stiffness = Spring.StiffnessMedium))&#10;                                    }&#10;                                }&#10;                            }&#10;                        },&#10;                        onDrag = { change, dragAmount -&gt;&#10;                            scope.launch {&#10;                                offsetX.snapTo(offsetX.value + dragAmount.x)&#10;                                offsetY.snapTo(offsetY.value + dragAmount.y)&#10;                            }&#10;                        }&#10;                    )&#10;                },&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            // Portrait Image (placeholder)&#10;            Image(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile Image&quot;,&#10;                contentScale = ContentScale.Crop,&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .clip(RoundedCornerShape(32.dp))&#10;            )&#10;            // Distance Label&#10;            Box(&#10;                modifier = Modifier&#10;                    .padding(16.dp)&#10;                    .align(Alignment.TopStart)&#10;                    .background(Color.White.copy(alpha = 0.85f), RoundedCornerShape(50))&#10;                    .padding(horizontal = 16.dp, vertical = 6.dp)&#10;            ) {&#10;                Text(distance, color = Color.Black, fontWeight = FontWeight.Bold, fontSize = 14.sp)&#10;            }&#10;            // Gradient Overlay&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(120.dp)&#10;                    .align(Alignment.BottomCenter)&#10;                    .background(&#10;                        Brush.verticalGradient(&#10;                            colors = listOf(Color.Transparent, Color.Black),&#10;                            startY = 0f,&#10;                            endY = 300f&#10;                        ),&#10;                        shape = RoundedCornerShape(bottomStart = 32.dp, bottomEnd = 32.dp)&#10;                    )&#10;            )&#10;            // Name, Age, Description&#10;            Column(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.Center,&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;$name, $age&quot;,&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 28.sp,&#10;                    maxLines = 1,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;                Text(&#10;                    text = description,&#10;                    color = Color(0xFFCCCCCC),&#10;                    fontSize = 16.sp,&#10;                    maxLines = 1,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;            // Like/Dislike Icon Overlay&#10;            if (likeProgress &gt; 0.05f) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Favorite,&#10;                    contentDescription = &quot;Like&quot;,&#10;                    tint = Color.Red.copy(alpha = iconAlpha),&#10;                    modifier = Modifier&#10;                        .size((96f * iconScale).dp)&#10;                        .align(Alignment.Center)&#10;                )&#10;            } else if (dislikeProgress &gt; 0.05f) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Close,&#10;                    contentDescription = &quot;Dislike&quot;,&#10;                    tint = Color.White.copy(alpha = iconAlpha),&#10;                    modifier = Modifier&#10;                        .size((96f * iconScale).dp)&#10;                        .align(Alignment.Center)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionButtons(&#10;    profiles: List&lt;Map&lt;String, Any&gt;&gt;,&#10;    profileIndex: MutableState&lt;Int&gt;,&#10;    handleProfileAction: suspend (Boolean, MutableState&lt;Int&gt;, List&lt;Map&lt;String, Any&gt;&gt;, HomeViewModel) -&gt; Unit,&#10;    animateSwipe: suspend (Animatable&lt;Float, *&gt;, Float) -&gt; Unit,&#10;    homeViewModel: HomeViewModel = viewModel()&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 24.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(25.dp, Alignment.CenterHorizontally),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        // Dislike Button&#10;        ActionButton(&#10;            icon = Icons.Default.Close,&#10;            background = Color.White,&#10;            iconTint = Color.Black,&#10;            size = 75.dp,&#10;            shadow = 8.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(false, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, -1f) // Pass direction explicitly&#10;            }&#10;        }&#10;        // Super Like Button&#10;        ActionButton(&#10;            icon = Icons.Default.Favorite,&#10;            background = AppColors.Text_Pink,&#10;            iconTint = Color.White,&#10;            size = 95.dp,&#10;            shadow = 12.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;            }&#10;        }&#10;        // Like Button (calls a different method for clarity)&#10;        ActionButton(&#10;            icon = Icons.Default.Star,&#10;            background = Color(0xFF4A154B),&#10;            iconTint = Color.White,&#10;            size = 75.dp,&#10;            shadow = 8.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionButton(&#10;    icon: ImageVector,&#10;    background: Color,&#10;    iconTint: Color,&#10;    size: Dp,&#10;    shadow: Dp,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .size(size)&#10;            .shadow(shadow, CircleShape)&#10;            .clip(CircleShape)&#10;            .background(background)&#10;            .clickable { onClick() },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = iconTint,&#10;            modifier = Modifier.size(size * 0.5f)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BottomNavIcon(&#10;    icon: ImageVector,&#10;    isActive: Boolean,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    IconButton(onClick = onClick) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = if (isActive) AppColors.Text_Pink else Color(0xFFBDBDBD),&#10;            modifier = Modifier.size(32.dp)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BottomNavigationBar(navController: NavController) {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(103.dp)&#10;            .background(Color.White.copy(alpha = 1.0f)),&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 32.dp, vertical = 20.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            BottomNavIcon(&#10;                icon = Icons.Default.ViewModule,&#10;                isActive = true&#10;            ) { /* TODO: Handle navigation */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Favorite,&#10;                isActive = false&#10;            ) { navController.navigate(&quot;favorite&quot;) }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Chat,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Person,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.gestures.detectDragGestures&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateListOf&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.IntOffset&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.dating.R&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.animation.core.Animatable&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.runtime.Applier&#10;import kotlinx.coroutines.tasks.await&#10;import com.example.dating.ui.theme.AppColors&#10;import androidx.compose.ui.zIndex&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import java.util.Calendar&#10;import androidx.compose.runtime.MutableState&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.util.lerp&#10;import androidx.compose.animation.core.Spring&#10;import androidx.compose.animation.core.spring&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.dating.viewmodel.HomeViewModel&#10;import androidx.compose.runtime.collectAsState&#10;&#10;@Composable&#10;fun HomeScreen(navController: NavController) {&#10;    val homeViewModel: HomeViewModel = viewModel()&#10;    val profiles by homeViewModel.profiles.collectAsState()&#10;    val isLoading by homeViewModel.isLoading.collectAsState()&#10;    val errorMessage by homeViewModel.errorMessage.collectAsState()&#10;    val profileIndex = remember { mutableStateOf(0) }&#10;&#10;    // Helper functions&#10;    suspend fun handleProfileAction(isLike: Boolean, profileIndex: MutableState&lt;Int&gt;, profiles: List&lt;Map&lt;String, Any&gt;&gt;, homeViewModel: HomeViewModel, navController: NavController) {&#10;        val currentProfile = profiles.getOrNull(profileIndex.value)&#10;        if (currentProfile != null) {&#10;            if (isLike) {&#10;                val likedUserId = currentProfile[&quot;uid&quot;] as? String&#10;                if (likedUserId != null) {&#10;                    homeViewModel.likeProfile(likedUserId)&#10;                    // Check for match and navigate if found&#10;                    val matchId = homeViewModel.matchFoundUserId.value&#10;                    if (matchId != null) {&#10;                        navController.navigate(&quot;match&quot;)&#10;                    }&#10;                }&#10;            }&#10;            profileIndex.value++&#10;        }&#10;    }&#10;    suspend fun animateSwipe(offsetX: Animatable&lt;Float, *&gt;, direction: Float) {&#10;        offsetX.animateTo(direction * 400f, tween(300))&#10;        offsetX.snapTo(0f)&#10;    }&#10;&#10;    LaunchedEffect(Unit) {&#10;        homeViewModel.fetchHome()&#10;    }&#10;&#10;    // Observe matchFoundUserId and navigate if a match is found&#10;    val matchFoundUserId by homeViewModel.matchFoundUserId.collectAsState()&#10;    LaunchedEffect(matchFoundUserId) {&#10;        if (matchFoundUserId != null) {&#10;            navController.navigate(&quot;match_screen/${matchFoundUserId}&quot;)&#10;        }&#10;    }&#10;&#10;    // Use Box to overlay BottomNavigationBar and keep it fixed at the bottom&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(AppColors.MainBackground)&#10;        ) {&#10;            HomeHeader(navController)&#10;            if (isLoading) {&#10;                Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else if (errorMessage != null) {&#10;                Box(modifier = Modifier.fillMaxWidth().height(200.dp), contentAlignment = Alignment.Center) {&#10;                    Text(&quot;Error: $errorMessage&quot;, color = Color.Red)&#10;                }&#10;            } else {&#10;                ProfileCard(&#10;                    profiles = profiles,&#10;                    profileIndex = profileIndex,&#10;                    handleProfileAction = { isLike, profileIndex, profiles, homeViewModel -&gt;&#10;                        handleProfileAction(isLike, profileIndex, profiles, homeViewModel, navController)&#10;                    },&#10;                    animateSwipe = ::animateSwipe&#10;                )&#10;                ActionButtons(&#10;                    profiles = profiles,&#10;                    profileIndex = profileIndex,&#10;                    handleProfileAction = { isLike, profileIndex, profiles, homeViewModel -&gt;&#10;                        handleProfileAction(isLike, profileIndex, profiles, homeViewModel, navController)&#10;                    },&#10;                    animateSwipe = ::animateSwipe&#10;                )&#10;            }&#10;        }&#10;        // Fixed BottomNavigationBar&#10;        Box(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .fillMaxWidth()&#10;        ) {&#10;            BottomNavigationBar(navController)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HomeHeader(navController: NavController) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(start = 48.dp, end = 48.dp, top = 40.dp, bottom = 30.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;&#10;        Text(&#10;            text = &quot;Discover&quot;,&#10;            color = Color.Black,&#10;            fontWeight = FontWeight.Bold,&#10;            fontSize = 30.sp&#10;        )&#10;&#10;        IconButton(onClick = { navController.navigate(&quot;profile_details&quot;) }) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = &quot;Profile&quot;,&#10;                tint = AppColors.Text_Pink&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileCard(&#10;    profiles: List&lt;Map&lt;String, Any&gt;&gt;,&#10;    profileIndex: MutableState&lt;Int&gt;,&#10;    handleProfileAction: suspend (Boolean, MutableState&lt;Int&gt;, List&lt;Map&lt;String, Any&gt;&gt;, HomeViewModel) -&gt; Unit,&#10;    animateSwipe: suspend (Animatable&lt;Float, *&gt;, Float) -&gt; Unit,&#10;    homeViewModel: HomeViewModel = viewModel()&#10;) {&#10;    val currentProfile = profiles.getOrNull(profileIndex.value)&#10;&#10;    if (currentProfile == null) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(900.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Text(&quot;No profiles available&quot;, color = Color.Gray)&#10;        }&#10;        return&#10;    }&#10;&#10;    val firstName = currentProfile[&quot;firstName&quot;] as? String ?: &quot;&quot;&#10;    val lastName = currentProfile[&quot;lastName&quot;] as? String ?: &quot;&quot;&#10;    val name = (firstName + &quot; &quot; + lastName).trim().ifEmpty { &quot;Unknown&quot; }&#10;    val birthday = currentProfile[&quot;birthday&quot;] as? String&#10;    Log.d(&quot;YearBug&quot;, &quot;Year: $birthday&quot;)&#10;&#10;    val age = birthday?.let {&#10;        try {&#10;            // Expecting format dd/MM/yyyy&#10;            val year = it.split(&quot;/&quot;).getOrNull(2)?.toInt() ?: throw Exception(&quot;Invalid date&quot;)&#10;            Log.d(&quot;YearBug&quot;, &quot;Year: $year&quot;)&#10;            val currentYear = Calendar.getInstance().get(Calendar.YEAR)&#10;            (currentYear - year).toString()&#10;        } catch (e: Exception) {&#10;            &quot;?&quot;&#10;        }&#10;    } ?: &quot;?&quot;&#10;    val description = currentProfile[&quot;description&quot;] as? String ?: &quot;No description&quot;&#10;    val distance = currentProfile[&quot;distance&quot;]?.toString() ?: &quot;1 km&quot;&#10;&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;    val offsetY = remember { Animatable(0f) }&#10;    val isDragging = remember { mutableStateOf(false) }&#10;    val likeProgress = (offsetX.value / 200f).coerceIn(0f, 1f)&#10;    val dislikeProgress = (-offsetX.value / 200f).coerceIn(0f, 1f)&#10;    val iconAlpha = maxOf(likeProgress, dislikeProgress)&#10;    val iconScale = 1f + 0.3f * iconAlpha&#10;    val cardRotation = (offsetX.value / 15).coerceIn(-25f, 25f)&#10;    val threshold = 200f&#10;    val nextProfile = profiles.getOrNull(profileIndex.value + 1)&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(550.dp)&#10;            .padding(horizontal = 30.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Next card (subtle scale/alpha)&#10;        if (nextProfile != null) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(550.dp)&#10;                    .clip(RoundedCornerShape(32.dp))&#10;                    .background(Color(0xFF23222B))&#10;                    .graphicsLayer(&#10;                        scaleX = lerp(0.95f, 1f, iconAlpha),&#10;                        scaleY = lerp(0.95f, 1f, iconAlpha),&#10;                        alpha = lerp(0.7f, 1f, iconAlpha)&#10;                    )&#10;            ) {}&#10;        }&#10;        // Top card (draggable)&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(550.dp)&#10;                .offset { IntOffset(offsetX.value.toInt(), offsetY.value.toInt()) }&#10;                .rotate(cardRotation)&#10;                .clip(RoundedCornerShape(32.dp))&#10;                .background(Color(0xFF23222B))&#10;                .pointerInput(profileIndex.value) {&#10;                    detectDragGestures(&#10;                        onDragStart = { isDragging.value = true },&#10;                        onDragEnd = {&#10;                            isDragging.value = false&#10;                            scope.launch {&#10;                                when {&#10;                                    offsetX.value &gt; threshold -&gt; {&#10;                                        handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                                        animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;                                        offsetY.snapTo(0f)&#10;                                    }&#10;                                    offsetX.value &lt; -threshold -&gt; {&#10;                                        handleProfileAction(false, profileIndex, profiles, homeViewModel)&#10;                                        animateSwipe(offsetX, -1f) // Pass direction explicitly&#10;                                        offsetY.snapTo(0f)&#10;                                    }&#10;                                    else -&gt; {&#10;                                        offsetX.animateTo(0f, spring(stiffness = Spring.StiffnessMedium))&#10;                                        offsetY.animateTo(0f, spring(stiffness = Spring.StiffnessMedium))&#10;                                    }&#10;                                }&#10;                            }&#10;                        },&#10;                        onDrag = { change, dragAmount -&gt;&#10;                            scope.launch {&#10;                                offsetX.snapTo(offsetX.value + dragAmount.x)&#10;                                offsetY.snapTo(offsetY.value + dragAmount.y)&#10;                            }&#10;                        }&#10;                    )&#10;                },&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            // Portrait Image (placeholder)&#10;            Image(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Profile Image&quot;,&#10;                contentScale = ContentScale.Crop,&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .clip(RoundedCornerShape(32.dp))&#10;            )&#10;            // Distance Label&#10;            Box(&#10;                modifier = Modifier&#10;                    .padding(16.dp)&#10;                    .align(Alignment.TopStart)&#10;                    .background(Color.White.copy(alpha = 0.85f), RoundedCornerShape(50))&#10;                    .padding(horizontal = 16.dp, vertical = 6.dp)&#10;            ) {&#10;                Text(distance, color = Color.Black, fontWeight = FontWeight.Bold, fontSize = 14.sp)&#10;            }&#10;            // Gradient Overlay&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(120.dp)&#10;                    .align(Alignment.BottomCenter)&#10;                    .background(&#10;                        Brush.verticalGradient(&#10;                            colors = listOf(Color.Transparent, Color.Black),&#10;                            startY = 0f,&#10;                            endY = 300f&#10;                        ),&#10;                        shape = RoundedCornerShape(bottomStart = 32.dp, bottomEnd = 32.dp)&#10;                    )&#10;            )&#10;            // Name, Age, Description&#10;            Column(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.Center,&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;$name, $age&quot;,&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 28.sp,&#10;                    maxLines = 1,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;                Text(&#10;                    text = description,&#10;                    color = Color(0xFFCCCCCC),&#10;                    fontSize = 16.sp,&#10;                    maxLines = 1,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;            // Like/Dislike Icon Overlay&#10;            if (likeProgress &gt; 0.05f) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Favorite,&#10;                    contentDescription = &quot;Like&quot;,&#10;                    tint = Color.Red.copy(alpha = iconAlpha),&#10;                    modifier = Modifier&#10;                        .size((96f * iconScale).dp)&#10;                        .align(Alignment.Center)&#10;                )&#10;            } else if (dislikeProgress &gt; 0.05f) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Close,&#10;                    contentDescription = &quot;Dislike&quot;,&#10;                    tint = Color.White.copy(alpha = iconAlpha),&#10;                    modifier = Modifier&#10;                        .size((96f * iconScale).dp)&#10;                        .align(Alignment.Center)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionButtons(&#10;    profiles: List&lt;Map&lt;String, Any&gt;&gt;,&#10;    profileIndex: MutableState&lt;Int&gt;,&#10;    handleProfileAction: suspend (Boolean, MutableState&lt;Int&gt;, List&lt;Map&lt;String, Any&gt;&gt;, HomeViewModel) -&gt; Unit,&#10;    animateSwipe: suspend (Animatable&lt;Float, *&gt;, Float) -&gt; Unit,&#10;    homeViewModel: HomeViewModel = viewModel()&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val offsetX = remember { Animatable(0f) }&#10;&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 24.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(25.dp, Alignment.CenterHorizontally),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        // Dislike Button&#10;        ActionButton(&#10;            icon = Icons.Default.Close,&#10;            background = Color.White,&#10;            iconTint = Color.Black,&#10;            size = 75.dp,&#10;            shadow = 8.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(false, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, -1f) // Pass direction explicitly&#10;            }&#10;        }&#10;        // Super Like Button&#10;        ActionButton(&#10;            icon = Icons.Default.Favorite,&#10;            background = AppColors.Text_Pink,&#10;            iconTint = Color.White,&#10;            size = 95.dp,&#10;            shadow = 12.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;            }&#10;        }&#10;        // Like Button (calls a different method for clarity)&#10;        ActionButton(&#10;            icon = Icons.Default.Star,&#10;            background = Color(0xFF4A154B),&#10;            iconTint = Color.White,&#10;            size = 75.dp,&#10;            shadow = 8.dp&#10;        ) {&#10;            scope.launch {&#10;                handleProfileAction(true, profileIndex, profiles, homeViewModel)&#10;                animateSwipe(offsetX, 1f) // Pass direction explicitly&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionButton(&#10;    icon: ImageVector,&#10;    background: Color,&#10;    iconTint: Color,&#10;    size: Dp,&#10;    shadow: Dp,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .size(size)&#10;            .shadow(shadow, CircleShape)&#10;            .clip(CircleShape)&#10;            .background(background)&#10;            .clickable { onClick() },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = iconTint,&#10;            modifier = Modifier.size(size * 0.5f)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BottomNavIcon(&#10;    icon: ImageVector,&#10;    isActive: Boolean,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    IconButton(onClick = onClick) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = if (isActive) AppColors.Text_Pink else Color(0xFFBDBDBD),&#10;            modifier = Modifier.size(32.dp)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BottomNavigationBar(navController: NavController) {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(103.dp)&#10;            .background(Color.White.copy(alpha = 1.0f)),&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 32.dp, vertical = 20.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            BottomNavIcon(&#10;                icon = Icons.Default.ViewModule,&#10;                isActive = true&#10;            ) { /* TODO: Handle navigation */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Favorite,&#10;                isActive = false&#10;            ) { navController.navigate(&quot;favorite&quot;) }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Chat,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;            BottomNavIcon(&#10;                icon = Icons.Default.Person,&#10;                isActive = false&#10;            ) { /* TODO: Handle navigation */ }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/HomeViewModel.kt" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class HomeViewModel : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val _addFavoriteState = MutableStateFlow&lt;Result&lt;Unit&gt;?&gt;(null)&#10;    val addFavoriteState: StateFlow&lt;Result&lt;Unit&gt;?&gt; = _addFavoriteState&#10;&#10;    fun addFavorite(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        val favorite = hashMapOf(&#10;            &quot;likerId&quot; to likerId,&#10;            &quot;likedId&quot; to likedId,&#10;            &quot;timestamp&quot; to Timestamp.now()&#10;        )&#10;        viewModelScope.launch {&#10;            try {&#10;                db.collection(&quot;favorites&quot;).add(favorite)&#10;                _addFavoriteState.value = Result.success(Unit)&#10;            } catch (e: Exception) {&#10;                _addFavoriteState.value = Result.failure(e)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearAddFavoriteState() {&#10;        _addFavoriteState.value = null&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/MatchScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/ui/mainscreens/MatchScreen.kt" />
              <option name="originalContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.dating.ui.theme.AppColors&#10;import com.google.firebase.auth.FirebaseAuth&#10;import androidx.compose.ui.zIndex&#10;import com.example.dating.viewmodel.MatchViewModel&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;&#10;@Composable&#10;fun MatchScreen(navController: NavController, matchedUserId: String?) {&#10;    val matchViewModel: MatchViewModel = viewModel()&#10;    val currentUser = FirebaseAuth.getInstance().currentUser&#10;    android.util.Log.d(&quot;MatchScreen&quot;, &quot;currentUser: $currentUser, uid: ${currentUser?.uid}, email: ${currentUser?.email}, displayName: ${currentUser?.displayName}&quot;)&#10;    val currentUserName = matchViewModel.getCurrentUserFirstName(currentUser?.uid)&#10;&#10;    Column(modifier = Modifier.fillMaxSize()) {&#10;&#10;&#10;        // Main content&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(AppColors.GradientBackground) // Light purple&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(horizontal = 32.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.Center&#10;            ) {&#10;                Box(modifier = Modifier.height(300.dp)) {&#10;&#10;                    // Upper right profile photo (current user)&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(width = 190.dp, height = 280.dp)&#10;                            .align(Alignment.TopEnd)&#10;                            .offset(x = 55.dp, y = -30.dp)&#10;                            .rotate(10f)&#10;                            .clip(RoundedCornerShape(24.dp))&#10;                            .background(Color.Black)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = &quot;Current User&quot;,&#10;                            tint = Color.Gray,&#10;                            modifier = Modifier.fillMaxSize()&#10;                        )&#10;                    }&#10;&#10;                    // Lower left profile photo (matched user)&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(width = 190.dp, height = 280.dp)&#10;                            .align(Alignment.BottomStart)&#10;                            .offset(x = -55.dp, y = 90.dp)&#10;                            .rotate(-10f)&#10;                            .clip(RoundedCornerShape(24.dp))&#10;                            .background(Color.Black)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = &quot;Matched User&quot;,&#10;                            tint = Color.Gray,&#10;                            modifier = Modifier.fillMaxSize()&#10;                        )&#10;                    }&#10;&#10;                    // Heart for upper right photo&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(60.dp)&#10;                            .align(Alignment.TopEnd)&#10;                            .offset(x = -75.dp, y = -50.dp)&#10;                            .rotate(10f)&#10;                            .background(AppColors.Text_Pink, CircleShape),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Favorite,&#10;                            contentDescription = &quot;Heart&quot;,&#10;                            tint = Color.White,&#10;                            modifier = Modifier.size(22.dp)&#10;                        )&#10;                    }&#10;&#10;                    // Heart for lower left photo&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(60.dp)&#10;                            .align(Alignment.BottomStart)&#10;                            .offset(x = -60.dp, y = 120.dp)&#10;                            .rotate(-10f)&#10;                            .background(AppColors.Text_Pink, CircleShape),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Favorite,&#10;                            contentDescription = &quot;Heart&quot;,&#10;                            tint = Color.White,&#10;                            modifier = Modifier.size(22.dp)&#10;                        )&#10;                    }&#10;&#10;                }&#10;                Spacer(modifier = Modifier.height(160.dp))&#10;                Text(&#10;                    text = &quot;It's a match, $currentUserName!&quot;,&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 32.sp,&#10;                    color = Color.Black,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;                Text(&#10;                    text = &quot;Start a conversation now with each other.&quot;,&#10;                    fontSize = 18.sp,&#10;                    color = Color.Black,&#10;                    modifier = Modifier.padding(bottom = 40.dp)&#10;                )&#10;                Button(&#10;                    onClick = { /* TODO: Implement chat navigation */ },&#10;                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4A154B)),&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp)&#10;                ) {&#10;                    Text(&quot;Say hello&quot;, color = Color.White, fontSize = 18.sp, fontWeight = FontWeight.Bold)&#10;                }&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                OutlinedButton(&#10;                    onClick = { navController.navigate(&quot;home&quot;) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp),&#10;                    colors = ButtonDefaults.outlinedButtonColors(containerColor = Color.White)&#10;                ) {&#10;                    Text(&quot;Keep swiping&quot;, color = Color.Black, fontSize = 18.sp, fontWeight = FontWeight.Bold)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.dating.ui.mainscreens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.dating.ui.theme.AppColors&#10;import com.google.firebase.auth.FirebaseAuth&#10;import androidx.compose.ui.zIndex&#10;import com.example.dating.viewmodel.MatchViewModel&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;&#10;@Composable&#10;fun MatchScreen(navController: NavController, matchedUserId: String?) {&#10;    val matchViewModel: MatchViewModel = viewModel()&#10;    val currentUser = FirebaseAuth.getInstance().currentUser&#10;    android.util.Log.d(&quot;MatchScreen&quot;, &quot;currentUser: $currentUser, uid: ${currentUser?.uid}, email: ${currentUser?.email}, displayName: ${currentUser?.displayName}&quot;)&#10;    val currentUserFirstName by matchViewModel.currentUserFirstName.collectAsState()&#10;    LaunchedEffect(currentUser?.uid) {&#10;        matchViewModel.fetchCurrentUserFirstName(currentUser?.uid)&#10;    }&#10;&#10;    Column(modifier = Modifier.fillMaxSize()) {&#10;&#10;&#10;        // Main content&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(AppColors.GradientBackground) // Light purple&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(horizontal = 32.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.Center&#10;            ) {&#10;                Box(modifier = Modifier.height(300.dp)) {&#10;&#10;                    // Upper right profile photo (current user)&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(width = 190.dp, height = 280.dp)&#10;                            .align(Alignment.TopEnd)&#10;                            .offset(x = 55.dp, y = -30.dp)&#10;                            .rotate(10f)&#10;                            .clip(RoundedCornerShape(24.dp))&#10;                            .background(Color.Black)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = &quot;Current User&quot;,&#10;                            tint = Color.Gray,&#10;                            modifier = Modifier.fillMaxSize()&#10;                        )&#10;                    }&#10;&#10;                    // Lower left profile photo (matched user)&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(width = 190.dp, height = 280.dp)&#10;                            .align(Alignment.BottomStart)&#10;                            .offset(x = -55.dp, y = 90.dp)&#10;                            .rotate(-10f)&#10;                            .clip(RoundedCornerShape(24.dp))&#10;                            .background(Color.Black)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = &quot;Matched User&quot;,&#10;                            tint = Color.Gray,&#10;                            modifier = Modifier.fillMaxSize()&#10;                        )&#10;                    }&#10;&#10;                    // Heart for upper right photo&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(60.dp)&#10;                            .align(Alignment.TopEnd)&#10;                            .offset(x = -75.dp, y = -50.dp)&#10;                            .rotate(10f)&#10;                            .background(AppColors.Text_Pink, CircleShape),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Favorite,&#10;                            contentDescription = &quot;Heart&quot;,&#10;                            tint = Color.White,&#10;                            modifier = Modifier.size(22.dp)&#10;                        )&#10;                    }&#10;&#10;                    // Heart for lower left photo&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(60.dp)&#10;                            .align(Alignment.BottomStart)&#10;                            .offset(x = -60.dp, y = 120.dp)&#10;                            .rotate(-10f)&#10;                            .background(AppColors.Text_Pink, CircleShape),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Favorite,&#10;                            contentDescription = &quot;Heart&quot;,&#10;                            tint = Color.White,&#10;                            modifier = Modifier.size(22.dp)&#10;                        )&#10;                    }&#10;&#10;                }&#10;                Spacer(modifier = Modifier.height(160.dp))&#10;                Text(&#10;                    text = &quot;It's a match, $currentUserFirstName!&quot;,&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 32.sp,&#10;                    color = Color.Black,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;                Text(&#10;                    text = &quot;Start a conversation now with each other.&quot;,&#10;                    fontSize = 18.sp,&#10;                    color = Color.Black,&#10;                    modifier = Modifier.padding(bottom = 40.dp)&#10;                )&#10;                Button(&#10;                    onClick = { /* TODO: Implement chat navigation */ },&#10;                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4A154B)),&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp)&#10;                ) {&#10;                    Text(&quot;Say hello&quot;, color = Color.White, fontSize = 18.sp, fontWeight = FontWeight.Bold)&#10;                }&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                OutlinedButton(&#10;                    onClick = { navController.navigate(&quot;home&quot;) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp),&#10;                    colors = ButtonDefaults.outlinedButtonColors(containerColor = Color.White)&#10;                ) {&#10;                    Text(&quot;Keep swiping&quot;, color = Color.Black, fontSize = 18.sp, fontWeight = FontWeight.Bold)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/FavoriteViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/FavoriteViewModel.kt" />
              <option name="originalContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.FavoriteRepository&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FieldPath&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class FavoriteViewModel(private val favoriteRepository: FavoriteRepository = FavoriteRepository()) : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val _likedMeProfiles = MutableStateFlow&lt;List&lt;Map&lt;String, Any&gt;&gt;&gt;(emptyList())&#10;    val likedMeProfiles: StateFlow&lt;List&lt;Map&lt;String, Any&gt;&gt;&gt; = _likedMeProfiles&#10;    private val _isLoading = MutableStateFlow(true)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading&#10;    private val _errorMessage = MutableStateFlow&lt;String?&gt;(null)&#10;    val errorMessage: StateFlow&lt;String?&gt; = _errorMessage&#10;&#10;    fun fetchFavorites() {&#10;        val currentUserId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            try {&#10;                _isLoading.value = true&#10;                // Users who liked me&#10;                val likedMeSnapshot = favoriteRepository.getFavoritesByLikedId(currentUserId)&#10;                val likedMeIds = likedMeSnapshot.mapNotNull { it[&quot;likerId&quot;] as? String }&#10;                android.util.Log.d(&quot;FavoriteViewModel&quot;, &quot;likedMeIds: $likedMeIds&quot;)&#10;                val likedMeProfilesList = if (likedMeIds.isNotEmpty()) {&#10;                    val likedMeProfilesSnapshot = db.collection(&quot;users&quot;)&#10;                        .whereIn(FieldPath.documentId(), likedMeIds.take(9))&#10;                        .get().await()&#10;                    android.util.Log.d(&quot;FavoriteViewModel&quot;, &quot;likedMeProfilesSnapshot: ${likedMeProfilesSnapshot.documents}&quot;)&#10;                    likedMeProfilesSnapshot.documents.mapNotNull { it.data?.plus(&quot;uid&quot; to it.id) }&#10;                } else {&#10;                    emptyList()&#10;                }&#10;                _likedMeProfiles.value = likedMeProfilesList&#10;&#10;                _isLoading.value = false&#10;                _errorMessage.value = null&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = e.message&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteFavorite(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            try {&#10;                favoriteRepository.deleteFavorite(likerId, likedId)&#10;                fetchFavorites() // Refresh after delete&#10;            } catch (_: Exception) {}&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.FavoriteRepository&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FieldPath&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class FavoriteViewModel(private val favoriteRepository: FavoriteRepository = FavoriteRepository()) : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val _likedMeProfiles = MutableStateFlow&lt;List&lt;Map&lt;String, Any&gt;&gt;&gt;(emptyList())&#10;    val likedMeProfiles: StateFlow&lt;List&lt;Map&lt;String, Any&gt;&gt;&gt; = _likedMeProfiles&#10;    private val _isLoading = MutableStateFlow(true)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading&#10;    private val _errorMessage = MutableStateFlow&lt;String?&gt;(null)&#10;    val errorMessage: StateFlow&lt;String?&gt; = _errorMessage&#10;&#10;    fun fetchFavorites() {&#10;        val currentUserId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            try {&#10;                _isLoading.value = true&#10;                // Users who liked me&#10;                val likedMeSnapshot = favoriteRepository.getFavoritesByLikedId(currentUserId)&#10;                val likedMeIds = likedMeSnapshot.mapNotNull { it[&quot;likerId&quot;] as? String }&#10;                android.util.Log.d(&quot;FavoriteViewModel&quot;, &quot;likedMeIds: $likedMeIds&quot;)&#10;                val likedMeProfilesList = favoriteRepository.getUserProfilesByIds(likedMeIds)&#10;                _likedMeProfiles.value = likedMeProfilesList&#10;&#10;                _isLoading.value = false&#10;                _errorMessage.value = null&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = e.message&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteFavorite(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            try {&#10;                favoriteRepository.deleteFavorite(likerId, likedId)&#10;                fetchFavorites() // Refresh after delete&#10;            } catch (_: Exception) {}&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/HomeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/HomeViewModel.kt" />
              <option name="originalContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.FavoriteRepository&#10;import com.example.dating.data.model.repository.MatchRepository&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class HomeViewModel : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val matchRepository = MatchRepository()&#10;    private val favoriteRepository = FavoriteRepository()&#10;   &#10;    private val _profiles = MutableStateFlow&lt;List&lt;Map&lt;String, Any&gt;&gt;&gt;(emptyList())&#10;    val profiles: StateFlow&lt;List&lt;Map&lt;String, Any&gt;&gt;&gt; = _profiles&#10;&#10;    private val _isLoading = MutableStateFlow(true)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading&#10;&#10;    private val _errorMessage = MutableStateFlow&lt;String?&gt;(null)&#10;    val errorMessage: StateFlow&lt;String?&gt; = _errorMessage&#10;&#10;    private val _matchFoundUserId = MutableStateFlow&lt;String?&gt;(null)&#10;    val matchFoundUserId: StateFlow&lt;String?&gt; = _matchFoundUserId&#10;&#10;    fun fetchHome() {&#10;        val currentUserId = FirebaseAuth.getInstance().currentUser?.uid&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val snapshot = db.collection(&quot;users&quot;).get().await()&#10;                val allProfiles = snapshot.documents.mapNotNull { doc -&gt;&#10;                    val data = doc.data&#10;                    if (doc.id != currentUserId &amp;&amp; data != null) data + (&quot;uid&quot; to doc.id) else null&#10;                }&#10;                _profiles.value = allProfiles&#10;                _isLoading.value = false&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = e.message&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun likeProfile(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            try {&#10;                // Add favorite using repository&#10;                val added = favoriteRepository.addFavorite(likerId, likedId)&#10;                // Check for match using repository&#10;                val isMatch = favoriteRepository.isMatch(likerId, likedId)&#10;                if (isMatch) {&#10;                    _matchFoundUserId.value = likedId&#10;                    android.util.Log.d(&quot;HomeViewModel&quot;, &quot;Calling MatchRepository.saveMatch with $likerId and $likedId&quot;)&#10;                    matchRepository.saveMatch(likerId, likedId, true)&#10;                } else {&#10;                    _matchFoundUserId.value = null&#10;                    android.util.Log.d(&quot;HomeViewModel&quot;, &quot;Calling MatchRepository.saveMatch with $likerId and $likedId, status=false&quot;)&#10;                    matchRepository.saveMatch(likerId, likedId, false)&#10;                }&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = e.message&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.FavoriteRepository&#10;import com.example.dating.data.model.repository.MatchRepository&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class HomeViewModel : ViewModel() {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val matchRepository = MatchRepository()&#10;    private val favoriteRepository = FavoriteRepository()&#10;   &#10;    private val _profiles = MutableStateFlow&lt;List&lt;Map&lt;String, Any&gt;&gt;&gt;(emptyList())&#10;    val profiles: StateFlow&lt;List&lt;Map&lt;String, Any&gt;&gt;&gt; = _profiles&#10;&#10;    private val _isLoading = MutableStateFlow(true)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading&#10;&#10;    private val _errorMessage = MutableStateFlow&lt;String?&gt;(null)&#10;    val errorMessage: StateFlow&lt;String?&gt; = _errorMessage&#10;&#10;    private val _matchFoundUserId = MutableStateFlow&lt;String?&gt;(null)&#10;    val matchFoundUserId: StateFlow&lt;String?&gt; = _matchFoundUserId&#10;&#10;    fun fetchHome() {&#10;        val currentUserId = FirebaseAuth.getInstance().currentUser?.uid&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val snapshot = db.collection(&quot;users&quot;).get().await()&#10;                val allProfiles = snapshot.documents.mapNotNull { doc -&gt;&#10;                    val data = doc.data&#10;                    if (doc.id != currentUserId &amp;&amp; data != null) data + (&quot;uid&quot; to doc.id) else null&#10;                }&#10;                _profiles.value = allProfiles&#10;                _isLoading.value = false&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = e.message&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun likeProfile(likedId: String) {&#10;        val likerId = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        viewModelScope.launch {&#10;            try {&#10;                // Add favorite using repository&#10;                favoriteRepository.addFavorite(likerId, likedId)&#10;                // Check for match using repository&#10;                val isMatch = favoriteRepository.isMatch(likerId, likedId)&#10;                if (isMatch) {&#10;                    _matchFoundUserId.value = likedId&#10;                    android.util.Log.d(&quot;HomeViewModel&quot;, &quot;Calling MatchRepository.saveMatch with $likerId and $likedId&quot;)&#10;                    matchRepository.saveMatch(likerId, likedId, true)&#10;                } else {&#10;                    _matchFoundUserId.value = null&#10;                    android.util.Log.d(&quot;HomeViewModel&quot;, &quot;Calling MatchRepository.saveMatch with $likerId and $likedId, status=false&quot;)&#10;                    matchRepository.saveMatch(likerId, likedId, false)&#10;                }&#10;            } catch (e: Exception) {&#10;                _errorMessage.value = e.message&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/MatchViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dating/viewmodel/MatchViewModel.kt" />
              <option name="originalContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.MatchRepository&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class MatchViewModel(private val matchRepository: MatchRepository = MatchRepository()) : ViewModel() {&#10;    private val _currentUserFirstName = MutableStateFlow&lt;String&gt;(&quot;You&quot;)&#10;    val currentUserFirstName: StateFlow&lt;String&gt; = _currentUserFirstName&#10;&#10;    fun saveMatch(userId1: String, userId2: String, status: Boolean) {&#10;        viewModelScope.launch {&#10;            matchRepository.saveMatch(userId1, userId2, status)&#10;        }&#10;    }&#10;&#10;    fun getCurrentUserFirstName(uid: String?) {&#10;        if (uid == null) {&#10;            _currentUserFirstName.value = &quot;You&quot;&#10;            return&#10;        }&#10;        viewModelScope.launch {&#10;            try {&#10;                val firstName = matchRepository.getUserFirstName(uid)&#10;                _currentUserFirstName.value = firstName&#10;            } catch (e: Exception) {&#10;                _currentUserFirstName.value = &quot;You&quot;&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dating.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dating.data.model.repository.MatchRepository&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class MatchViewModel(private val matchRepository: MatchRepository = MatchRepository()) : ViewModel() {&#10;    private val _currentUserFirstName = MutableStateFlow&lt;String&gt;(&quot;You&quot;)&#10;    val currentUserFirstName: StateFlow&lt;String&gt; = _currentUserFirstName&#10;&#10;    fun saveMatch(userId1: String, userId2: String, status: Boolean) {&#10;        viewModelScope.launch {&#10;            matchRepository.saveMatch(userId1, userId2, status)&#10;        }&#10;    }&#10;&#10;    fun fetchCurrentUserFirstName(uid: String?) {&#10;        android.util.Log.d(&quot;MatchViewModel&quot;, &quot;fetchCurrentUserFirstName called with uid=$uid&quot;)&#10;        if (uid == null) {&#10;            _currentUserFirstName.value = &quot;You&quot;&#10;            return&#10;        }&#10;        viewModelScope.launch {&#10;            try {&#10;                val firstName = matchRepository.getUserFirstName(uid)&#10;                android.util.Log.d(&quot;MatchViewModel&quot;, &quot;fetchCurrentUserFirstName result: firstName=$firstName&quot;)&#10;                _currentUserFirstName.value = firstName&#10;            } catch (e: Exception) {&#10;                android.util.Log.e(&quot;MatchViewModel&quot;, &quot;fetchCurrentUserFirstName error: ${e.message}&quot;)&#10;                _currentUserFirstName.value = &quot;You&quot;&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_arrow_drop_down.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_arrow_drop_down.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#757575&quot;&#10;        android:pathData=&quot;M7,10l5,5 5,-5z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_avatar.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_avatar.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;120dp&quot;&#10;    android:height=&quot;120dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#CCCCCC&quot;&#10;        android:pathData=&quot;M12,12c2.67,0 8,1.34 8,4v2H4v-2c0-2.66 5.33-4 8-4zm0-2a4,4 0 1,0 0,-8 4,4 0 0,0 0,8z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>